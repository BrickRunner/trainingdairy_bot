"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
"""

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from datetime import datetime
import re

from bot.fsm import AddTrainingStates
from bot.keyboards import (
    get_main_menu_keyboard,
    get_training_types_keyboard,
    get_cancel_keyboard,
    get_skip_keyboard,
    get_fatigue_keyboard,
    get_period_keyboard,
    get_date_keyboard
)
from database.queries import add_user, add_training, get_user

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    await add_user(user_id, username)
    
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **Trainingdiary_bot** ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫! üèÉ‚Äç‚ôÇÔ∏è\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "‚ûï –î–æ–±–∞–≤–ª—è—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "üìà –°—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
        "üèÜ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
    )
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_menu_keyboard(),
        parse_mode="Markdown"
    )


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**\n\n"
        "**–ö–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/add_training - –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "**–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é:**\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É - –ó–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "üìà –ì—Ä–∞—Ñ–∏–∫–∏ - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
        "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è - –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –Ω–∞–≥—Ä–∞–¥—ã\n\n"
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞. "
        "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"
    )
    
    await message.answer(help_text, parse_mode="Markdown")


@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
@router.message(Command("add_training"))
async def start_add_training(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await message.answer(
        "üèãÔ∏è **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
        reply_markup=get_training_types_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(AddTrainingStates.waiting_for_type)


@router.callback_query(F.data.startswith("training_type:"))
async def process_training_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    training_type = callback.data.split(":")[1]
    
    await state.update_data(training_type=training_type)
    
    await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø: **{training_type.capitalize()}**",
        parse_mode="Markdown"
    )
    
    await callback.message.answer(
        "üìÖ –ö–æ–≥–¥–∞ –±—ã–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=get_date_keyboard()
    )
    
    await state.set_state(AddTrainingStates.waiting_for_date)
    await callback.answer()


@router.message(AddTrainingStates.waiting_for_date)
async def process_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_handler(message, state)
        return
    
    # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ UTC+3 (–ú–æ—Å–∫–≤–∞)
    from datetime import timedelta
    utc_now = datetime.utcnow()
    moscow_now = utc_now + timedelta(hours=3)
    today = moscow_now.date()
    yesterday = today - timedelta(days=1)
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
    if message.text in ["—Å–µ–≥–æ–¥–Ω—è", "üìÖ –°–µ–≥–æ–¥–Ω—è"]:
        date = today
    elif message.text in ["–≤—á–µ—Ä–∞", "üìÖ –í—á–µ—Ä–∞"]:
        date = yesterday
    elif message.text == "üìù –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é
        await message.answer(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n\n"
            "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.01.2024",
            reply_markup=get_cancel_keyboard()
        )
        return
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì
        date_pattern = r'^\d{2}\.\d{2}\.\d{4}$'
        if not re.match(date_pattern, message.text):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.01.2024)\n"
                "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ"
            )
            return
        
        try:
            date = datetime.strptime(message.text, "%d.%m.%Y").date()
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞!\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã"
            )
            return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
    if date > today:
        await message.answer(
            f"‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –±—É–¥—É—â–µ–º!\n\n"
            f"–°–µ–≥–æ–¥–Ω—è: {today.strftime('%d.%m.%Y')}\n"
            f"–í—ã –≤–≤–µ–ª–∏: {date.strftime('%d.%m.%Y')}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–µ –ø–æ–∑–∂–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π."
        )
        return
    
    await state.update_data(date=date)
    
    await message.answer(
        f"‚úÖ –î–∞—Ç–∞: {date.strftime('%d.%m.%Y')}\n\n"
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n\n"
        "–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú:–°–°\n"
        "–ü—Ä–∏–º–µ—Ä—ã: 01:25:30 –∏–ª–∏ 25:15:45 (–¥–ª—è —É–ª—å—Ç—Ä–∞–º–∞—Ä–∞—Ñ–æ–Ω–æ–≤)",
        reply_markup=get_cancel_keyboard()
    )
    
    await state.set_state(AddTrainingStates.waiting_for_time)


@router.message(AddTrainingStates.waiting_for_time)
async def process_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_handler(message, state)
        return
    
    # –ì–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ß:–ú–ú:–°–° –∏–ª–∏ –ß–ß:–ú–ú:–°–° –∏–ª–∏ –ß–ß–ß:–ú–ú:–°–° (–¥–ª—è —É–ª—å—Ç—Ä–∞–º–∞—Ä–∞—Ñ–æ–Ω–æ–≤)
    time_pattern = r'^\d{1,3}:\d{1,2}:\d{1,2}$'
    if not re.match(time_pattern, message.text):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú:–°–°\n"
            "–ü—Ä–∏–º–µ—Ä—ã: 01:25:30 –∏–ª–∏ 1:25:30 –∏–ª–∏ 25:15:45"
        )
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        hours, minutes, seconds = map(int, message.text.split(':'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–∏–Ω—É—Ç –∏ —Å–µ–∫—É–Ω–¥
        if minutes > 59 or seconds > 59:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è!\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–∏–Ω—É—Ç—ã ‚â§ 59, —Å–µ–∫—É–Ω–¥—ã ‚â§ 59"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω—É–ª–µ–≤–æ–µ –≤—Ä–µ–º—è
        if hours == 0 and minutes == 0 and seconds == 0:
            await message.answer(
                "‚ùå –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å 00:00:00!\n\n"
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: 00:00:01\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏."
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –∫—Ä–∞—Å–∏–≤—ã–π –≤–∏–¥ —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏
        formatted_time = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–∏–Ω—É—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ë–î
        total_minutes = hours * 60 + minutes + (1 if seconds > 0 else 0)
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è!\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"
        )
        return
    
    await state.update_data(time=formatted_time, duration=total_minutes)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    data = await state.get_data()
    training_type = data.get('training_type', '–∫—Ä–æ—Å—Å')
    
    if training_type == '—Å–∏–ª–æ–≤–∞—è':
        # –î–ª—è —Å–∏–ª–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        await message.answer(
            f"‚úÖ –í—Ä–µ–º—è: {formatted_time}\n\n"
            "üí™ –û–ø–∏—à–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "–ñ–∏–º –ª—ë–∂–∞ 3—Ö10 (70–∫–≥)\n"
            "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è 4—Ö12 (80–∫–≥)\n"
            "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è 3—Ö8\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
            reply_markup=get_skip_keyboard()
        )
        await state.set_state(AddTrainingStates.waiting_for_exercises)
    elif training_type == '–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è':
        # –î–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
        await message.answer(
            f"‚úÖ –í—Ä–µ–º—è: {formatted_time}\n\n"
            "‚ö° –û–ø–∏—à–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "1. –†–∞–∑–º–∏–Ω–∫–∞ - 3000–º\n"
            "2. –û–†–£ + –°–ë–£ + 2 —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ ~80–º\n"
            "    –†–∞–±–æ—Ç–∞:\n"
            "3. 6 —Ö 1000–º / 200–º - ()\n"
            "4. –¢—Ä—É—Å—Ü–∞ - 600–º\n"
            "5. 3 —Ö 60–º / 60–º - ()\n"
            "6. –¢—Ä—É—Å—Ü–∞ - 600–º\n"
            "7. –°–ë–£ –ø–æ 40–º:\n"
            "–í—ã—Å–æ–∫–∏–µ –ø–æ–¥—Å–∫–æ–∫–∏\n"
            "–ë—É—Ä–∞—Ç–∏–Ω–æ\n"
            "2 —Ö –ë—É—Ä–∞—Ç–∏–Ω–æ + –≤—ã—Å–æ–∫–æ–µ –±–µ–¥—Ä–æ\n"
            "–ü—Ä—ã–∂–∫–∏\n"
            "–ü—Ä—ã–∂–∫–∏ + –ø—Ä—ã–∂–∫–∏ –≤–±–æ–∫\n"
            "2 —Ö –ø—Ä—ã–∂–∫–∏ + –∫–∞–Ω–¥–∏–±–æ–±–µ—Ä\n"
            "–ö–∞–Ω–¥–∏–±–æ–±–µ—Ä\n"
            "2 —Ö –º–Ω–æ–≥–æ—Å–∫–æ–∫–∏ –Ω–∞ –æ–¥–Ω—É –Ω–æ–≥—É\n"
            "–ú–Ω–æ–≥–æ—Å–∫–æ–∫–∏\n"
            "8. –ó–∞–º–∏–Ω–∫–∞ - 1000–º"
        )
        await state.set_state(AddTrainingStates.waiting_for_intervals)
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
        await message.answer(
            f"‚úÖ –í—Ä–µ–º—è: {formatted_time}\n\n"
            "üèÉ –í–≤–µ–¥–∏—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 10.5"
        )
        await state.set_state(AddTrainingStates.waiting_for_distance)


@router.message(AddTrainingStates.waiting_for_distance)
async def process_distance(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_handler(message, state)
        return
    
    try:
        distance = float(message.text.replace(',', '.'))
        if distance <= 0:
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–∫–∏–ª–æ–º–µ—Ç—Ä—ã)\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 10.5"
        )
        return
    
    await state.update_data(distance=distance)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    data = await state.get_data()
    training_type = data.get('training_type', '–∫—Ä–æ—Å—Å')
    
    # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if training_type == '–ø–ª–∞–≤–∞–Ω–∏–µ':
        distance_text = f"‚úÖ –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance} –∫–º ({distance * 1000} –º)"
    else:
        distance_text = f"‚úÖ –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance} –∫–º"
    
    await message.answer(
        f"{distance_text}\n\n"
        "‚ù§Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å (—É–¥/–º–∏–Ω)\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 145"
    )
    
    await state.set_state(AddTrainingStates.waiting_for_avg_pulse)


@router.message(AddTrainingStates.waiting_for_avg_pulse)
async def process_avg_pulse(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—É–ª—å—Å–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_handler(message, state)
        return
    
    try:
        avg_pulse = int(message.text)
        if avg_pulse <= 0 or avg_pulse > 250:
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É–ª—å—Å–∞ (30-250 —É–¥/–º–∏–Ω)\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 145"
        )
        return
    
    await state.update_data(avg_pulse=avg_pulse)
    
    await message.answer(
        f"‚úÖ –°—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å: {avg_pulse} —É–¥/–º–∏–Ω\n\n"
        "üíì –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å (—É–¥/–º–∏–Ω)\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 175"
    )
    
    await state.set_state(AddTrainingStates.waiting_for_max_pulse)


@router.message(AddTrainingStates.waiting_for_exercises)
async def process_exercises(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è —Å–∏–ª–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_handler(message, state)
        return
    
    exercises = None if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text
    await state.update_data(exercises=exercises)
    
    await message.answer(
        "‚ù§Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å (—É–¥/–º–∏–Ω)\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 130"
    )
    
    await state.set_state(AddTrainingStates.waiting_for_avg_pulse)


@router.message(AddTrainingStates.waiting_for_intervals)
async def process_intervals(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_handler(message, state)
        return
    
    # –û–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ - –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    intervals = message.text
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä—ë–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    from utils.interval_calculator import calculate_interval_volume, format_volume_message
    volume = calculate_interval_volume(intervals)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–±—ä—ë–º
    await state.update_data(intervals=intervals, calculated_volume=volume)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –æ–±—ä—ë–º
    if volume:
        volume_msg = f"\n\n{format_volume_message(volume)}"
        await message.answer(
            f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ{volume_msg}\n\n"
            "‚ù§Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å (—É–¥/–º–∏–Ω)\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 165"
        )
    else:
        await message.answer(
            "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n"
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—ä—ë–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
            "(–í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –≤—Å–µ –ø—É–Ω–∫—Ç—ã –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω—ã)\n\n"
            "‚ù§Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å (—É–¥/–º–∏–Ω)\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 165"
        )
    
    await state.set_state(AddTrainingStates.waiting_for_avg_pulse)


@router.message(AddTrainingStates.waiting_for_max_pulse)
async def process_max_pulse(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—É–ª—å—Å–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_handler(message, state)
        return
    
    try:
        max_pulse = int(message.text)
        if max_pulse <= 0 or max_pulse > 250:
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É–ª—å—Å–∞ (30-250 —É–¥/–º–∏–Ω)\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 175"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å –Ω–µ –º–µ–Ω—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
    data = await state.get_data()
    avg_pulse = data.get('avg_pulse', 0)
    
    if max_pulse < avg_pulse:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞!\n\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å ({max_pulse}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ ({avg_pulse})!\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—É–ª—å—Å–∞:"
        )
        return
    
    await state.update_data(max_pulse=max_pulse)
    
    await message.answer(
        f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å: {max_pulse} —É–¥/–º–∏–Ω\n\n"
        "üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –•–æ—Ä–æ—à–∞—è —Ñ–æ—Ä–º–∞, –ª–µ–≥–∫–æ –ø—Ä–æ–±–µ–∂–∞–ª\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        reply_markup=get_skip_keyboard()
    )
    
    await state.set_state(AddTrainingStates.waiting_for_comment)


@router.message(AddTrainingStates.waiting_for_comment)
async def process_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_handler(message, state)
        return
    
    comment = None if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text
    await state.update_data(comment=comment)
    
    await message.answer(
        "üò¥ –û—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 (—Å–æ–≤—Å–µ–º –Ω–µ —É—Å—Ç–∞–ª) –¥–æ 10 (–æ—á–µ–Ω—å —É—Å—Ç–∞–ª):",
        reply_markup=ReplyKeyboardRemove()
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–ª–æ—Å—Ç–∏:",
        reply_markup=get_fatigue_keyboard()
    )
    
    await state.set_state(AddTrainingStates.waiting_for_fatigue)


@router.callback_query(F.data.startswith("fatigue:"))
async def process_fatigue(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    fatigue_level = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    data['fatigue_level'] = fatigue_level
    data['user_id'] = callback.from_user.id
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø
    time_str = data['time']
    hours, minutes, seconds = map(int, time_str.split(':'))
    total_seconds = hours * 3600 + minutes * 60 + seconds
    total_minutes = total_seconds / 60
    training_type = data['training_type']
    
    # –†–∞—Å—á–µ—Ç —Ç–µ–º–ø–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å –¥–∏—Å—Ç–∞–Ω—Ü–∏–µ–π
    if training_type not in ['—Å–∏–ª–æ–≤–∞—è', '–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è']:
        distance = data['distance']
        
        # –†–∞—Å—á–µ—Ç —Ç–µ–º–ø–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        if training_type == '–ø–ª–∞–≤–∞–Ω–∏–µ':
            # –î–ª—è –ø–ª–∞–≤–∞–Ω–∏—è: –º–∏–Ω:—Å–µ–∫ –Ω–∞ 100 –º–µ—Ç—Ä–æ–≤
            distance_in_meters = distance * 1000
            seconds_per_100m = (total_seconds / distance_in_meters) * 100
            pace_minutes = int(seconds_per_100m // 60)
            pace_seconds = int(seconds_per_100m % 60)
            avg_pace = f"{pace_minutes}:{pace_seconds:02d}"
            pace_unit = "–º–∏–Ω/100–º"
        elif training_type == '–≤–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞':
            # –î–ª—è –≤–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: —Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –∫–º/—á
            hours_total = total_seconds / 3600
            avg_speed = distance / hours_total
            avg_pace = f"{avg_speed:.1f}"
            pace_unit = "–∫–º/—á"
        else:
            # –î–ª—è –∫—Ä–æ—Å—Å–∞: –º–∏–Ω:—Å–µ–∫ –Ω–∞ –∫–∏–ª–æ–º–µ—Ç—Ä
            avg_pace_minutes = total_minutes / distance
            pace_minutes = int(avg_pace_minutes)
            pace_seconds = int((avg_pace_minutes - pace_minutes) * 60)
            avg_pace = f"{pace_minutes}:{pace_seconds:02d}"
            pace_unit = "–º–∏–Ω/–∫–º"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º–ø –≤ –¥–∞–Ω–Ω—ã–µ
        data['avg_pace'] = avg_pace
        data['pace_unit'] = pace_unit
    
    # –î–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - calculated_volume —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ data
    # (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –ë–î
    await add_training(data)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    training_type = data['training_type']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if training_type == '–ø–ª–∞–≤–∞–Ω–∏–µ':
        training_emoji = "üèä"
    elif training_type == '–≤–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞':
        training_emoji = "üö¥"
    elif training_type == '—Å–∏–ª–æ–≤–∞—è':
        training_emoji = "üí™"
    elif training_type == '–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è':
        training_emoji = "‚ö°"
    else:  # –∫—Ä–æ—Å—Å
        training_emoji = "üèÉ"
    
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
    summary = (
        "‚úÖ **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
        f"üìÖ –î–∞—Ç–∞: {data['date'].strftime('%d.%m.%Y')}\n"
        f"{training_emoji} –¢–∏–ø: {training_type.capitalize()}\n"
        f"‚è∞ –í—Ä–µ–º—è: {data['time']}\n"
    )
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if training_type == '—Å–∏–ª–æ–≤–∞—è':
        # –î–ª—è —Å–∏–ª–æ–≤–æ–π - —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –∏ —Ç–µ–º–ø–∞
        if data.get('exercises'):
            summary += f"üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n{data['exercises']}\n"
    elif training_type == '–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è':
        # –î–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π - –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        if data.get('intervals'):
            summary += f"‚ö° –û–ø–∏—Å–∞–Ω–∏–µ:\n{data['intervals']}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –æ–±—ä—ë–º –µ—Å–ª–∏ –µ—Å—Ç—å
            if data.get('calculated_volume'):
                from utils.interval_calculator import format_volume_message
                volume_text = format_volume_message(data['calculated_volume'])
                if volume_text:
                    summary += f"{volume_text}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø –æ—Ç—Ä–µ–∑–∫–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            from utils.interval_calculator import calculate_average_interval_pace
            avg_pace_intervals = calculate_average_interval_pace(data['intervals'])
            if avg_pace_intervals:
                summary += f"‚ö° –°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø –æ—Ç—Ä–µ–∑–∫–æ–≤: {avg_pace_intervals}\n"
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ - –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –∏ —Ç–µ–º–ø
        distance_km = data['distance']
        
        if training_type == '–ø–ª–∞–≤–∞–Ω–∏–µ':
            distance_text = f"üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance_km} –∫–º ({int(distance_km * 1000)} –º)"
        else:
            distance_text = f"üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance_km} –∫–º"
        
        pace_emoji = "‚ö°"
        if training_type == '–≤–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞':
            pace_label = "–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å"
        else:
            pace_label = "–°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø"
        
        summary += (
            f"{distance_text}\n"
            f"{pace_emoji} {pace_label}: {avg_pace} {pace_unit}\n"
        )
    
    # –ü—É–ª—å—Å –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    if data.get('avg_pulse') and data.get('max_pulse'):
        summary += f"‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å: {data['avg_pulse']} —É–¥/–º–∏–Ω\n"
        summary += f"üíì –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å: {data['max_pulse']} —É–¥/–º–∏–Ω\n"
    
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
    if data.get('comment'):
        summary += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}\n"
    
    summary += f"üò¥ –£—Å—Ç–∞–ª–æ—Å—Ç—å: {fatigue_level}/10"
    
    await callback.message.edit_text(summary, parse_mode="Markdown")
    await callback.message.answer(
        "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
        reply_markup=get_main_menu_keyboard()
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await callback.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! ‚úÖ")


@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
@router.callback_query(F.data == "cancel")
async def cancel_handler(message: Message | CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    current_state = await state.get_state()
    
    if current_state is None:
        if isinstance(message, Message):
            await message.answer(
                "–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å ü§∑‚Äç‚ôÇÔ∏è",
                reply_markup=get_main_menu_keyboard()
            )
        return
    
    await state.clear()
    
    if isinstance(message, CallbackQuery):
        await message.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await message.message.answer(
            "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
            reply_markup=get_main_menu_keyboard()
        )
        await message.answer()
    else:
        await message.answer(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\n\n–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
            reply_markup=get_main_menu_keyboard()
        )


@router.message(F.text == "üìä –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
async def show_my_trainings(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    await message.answer(
        "üìä *–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        parse_mode="Markdown",
        reply_markup=get_period_keyboard()
    )


@router.callback_query(F.data.startswith("period:"))
async def show_trainings_period(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    period = callback.data.split(":")[1]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    period_days = {
        "week": 7,
        "2weeks": 14,
        "month": 30
    }
    
    period_names = {
        "week": "–Ω–µ–¥–µ–ª—é",
        "2weeks": "2 –Ω–µ–¥–µ–ª–∏",
        "month": "–º–µ—Å—è—Ü"
    }
    
    days = period_days.get(period, 7)
    period_name = period_names.get(period, "–Ω–µ–¥–µ–ª—é")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    from database.queries import get_trainings_by_period, get_training_statistics
    
    stats = await get_training_statistics(callback.from_user.id, days)
    trainings = await get_trainings_by_period(callback.from_user.id, days)
    
    if not trainings:
        await callback.message.edit_text(
            f"üìä *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ {period_name}*\n\n"
            f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.\n\n"
            f"_–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}_",
            parse_mode="Markdown",
            reply_markup=get_period_keyboard()
        )
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    message_text = f"üìä *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ {period_name}*\n\n"
    message_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    message_text += "üìà *–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n"
    message_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    # 1. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    message_text += f"üèÉ –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: *{stats['total_count']}*\n"
    
    # 2. –û–±—â–∏–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂
    if stats['total_distance'] > 0:
        message_text += f"üìè –û–±—â–∏–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂: *{stats['total_distance']:.2f} –∫–º*\n"
    
    # 3. –¢–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
    if stats['types_count']:
        message_text += f"\nüìã *–¢–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:*\n"
        
        type_emoji = {
            '–∫—Ä–æ—Å—Å': 'üèÉ',
            '–ø–ª–∞–≤–∞–Ω–∏–µ': 'üèä',
            '–≤–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞': 'üö¥',
            '—Å–∏–ª–æ–≤–∞—è': 'üí™',
            '–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è': '‚ö°'
        }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
        sorted_types = sorted(stats['types_count'].items(), key=lambda x: x[1], reverse=True)
        
        for t_type, count in sorted_types:
            emoji = type_emoji.get(t_type, 'üìù')
            percentage = (count / stats['total_count']) * 100
            message_text += f"  {emoji} {t_type.capitalize()}: {count} ({percentage:.1f}%)\n"
    
    # 4. –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–ª–æ—Å—Ç–∏
    if stats['avg_fatigue'] > 0:
        message_text += f"\nüò¥ –°—Ä–µ–¥–Ω—è—è —É—Å—Ç–∞–ª–æ—Å—Ç—å: *{stats['avg_fatigue']}/10*\n"
    
    message_text += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    message_text += "üìù *–°–ü–ò–°–û–ö –¢–†–ï–ù–ò–†–û–í–û–ö*\n"
    message_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–æ–≤
    type_emoji = {
        '–∫—Ä–æ—Å—Å': 'üèÉ',
        '–ø–ª–∞–≤–∞–Ω–∏–µ': 'üèä',
        '–≤–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞': 'üö¥',
        '—Å–∏–ª–æ–≤–∞—è': 'üí™',
        '–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è': '‚ö°'
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    for idx, training in enumerate(trainings[:15], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 15
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        date = datetime.strptime(training['date'], '%Y-%m-%d').strftime('%d.%m.%Y')
        t_type = training['type']
        emoji = type_emoji.get(t_type, 'üìù')
        
        # 1. –î–∞—Ç–∞ –∏ —Ç–∏–ø
        message_text += f"*{idx}.* {emoji} *{t_type.capitalize()}* ‚Ä¢ {date}\n"
        
        # 2. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:–°–°
        if training.get('time'):
            message_text += f"   ‚è∞ –í—Ä–µ–º—è: {training['time']}\n"
        
        # 3. –û–±—â–∏–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂
        if t_type == '–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è':
            if training.get('calculated_volume'):
                message_text += f"   üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {training['calculated_volume']} –∫–º\n"
        else:
            if training.get('distance'):
                if t_type == '–ø–ª–∞–≤–∞–Ω–∏–µ':
                    meters = int(training['distance'] * 1000)
                    message_text += f"   üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {training['distance']} –∫–º ({meters} –º)\n"
                else:
                    message_text += f"   üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {training['distance']} –∫–º\n"
        
        # 4. –°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø/—Å–∫–æ—Ä–æ—Å—Ç—å/–∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        if t_type == '–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø –æ—Ç—Ä–µ–∑–∫–æ–≤
            if training.get('intervals'):
                from utils.interval_calculator import calculate_average_interval_pace
                avg_pace_intervals = calculate_average_interval_pace(training['intervals'])
                if avg_pace_intervals:
                    message_text += f"   ‚ö° –°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø –æ—Ç—Ä–µ–∑–∫–æ–≤: {avg_pace_intervals}\n"
        elif t_type == '–≤–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞':
            # –î–ª—è –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ - —Å–∫–æ—Ä–æ—Å—Ç—å
            if training.get('avg_pace'):
                message_text += f"   üö¥ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {training['avg_pace']} {training.get('pace_unit', '')}\n"
        elif t_type != '—Å–∏–ª–æ–≤–∞—è':
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö (–∫—Ä–æ—Å—Å, –ø–ª–∞–≤–∞–Ω–∏–µ) - —Ç–µ–º–ø
            if training.get('avg_pace'):
                message_text += f"   ‚ö° –°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø: {training['avg_pace']} {training.get('pace_unit', '')}\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø—É–ª—å—Å
        if training.get('avg_pulse'):
            message_text += f"   ‚ù§Ô∏è –ü—É–ª—å—Å: {training['avg_pulse']} —É–¥/–º–∏–Ω\n"
        
        # –£—Å—Ç–∞–ª–æ—Å—Ç—å
        if training.get('fatigue_level'):
            message_text += f"   üò¥ –£—Å—Ç–∞–ª–æ—Å—Ç—å: {training['fatigue_level']}/10\n"
        
        message_text += "\n"
    
    if len(trainings) > 15:
        message_text += f"_... –∏ –µ—â—ë {len(trainings) - 15} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫_\n"
    
    try:
        await callback.message.edit_text(
            message_text,
            parse_mode="Markdown",
            reply_markup=get_period_keyboard()
        )
    except Exception as e:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        if "message is not modified" in str(e):
            await callback.answer("–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã", show_alert=False)
        else:
            raise
    
    await callback.answer()


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.delete()
    await callback.message.answer(
        "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer(
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ!\n\n"
        "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å:\n"
        "‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        "‚Ä¢ –°—É–º–º–∞—Ä–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é\n"
        "‚Ä¢ –°—Ä–µ–¥–Ω—é—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!"
    )


@router.message(F.text == "üìà –ì—Ä–∞—Ñ–∏–∫–∏")
async def show_graphs(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer("üìà –ì—Ä–∞—Ñ–∏–∫–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–∑–∂–µ!")


@router.message(F.text == "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
async def show_achievements(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–∑–∂–µ!")


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–∑–∂–µ!")


@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
    await cmd_help(message)
