"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
"""

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import datetime
import re

from bot.fsm import AddTrainingStates
from bot.keyboards import (
    get_main_menu_keyboard,
    get_training_types_keyboard,
    get_cancel_keyboard,
    get_skip_keyboard,
    get_fatigue_keyboard
)
from database.queries import add_user, add_training, get_user

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    await add_user(user_id, username)
    
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **Trainingdiary_bot** ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫! üèÉ‚Äç‚ôÇÔ∏è\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "‚ûï –î–æ–±–∞–≤–ª—è—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "üìà –°—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
        "üèÜ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
    )
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_menu_keyboard(),
        parse_mode="Markdown"
    )


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**\n\n"
        "**–ö–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/add_training - –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "**–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é:**\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É - –ó–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "üìà –ì—Ä–∞—Ñ–∏–∫–∏ - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
        "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è - –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –Ω–∞–≥—Ä–∞–¥—ã\n\n"
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞. "
        "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"
    )
    
    await message.answer(help_text, parse_mode="Markdown")


@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
@router.message(Command("add_training"))
async def start_add_training(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await message.answer(
        "üèãÔ∏è **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
        reply_markup=get_training_types_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(AddTrainingStates.waiting_for_type)


@router.callback_query(F.data.startswith("training_type:"))
async def process_training_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    training_type = callback.data.split(":")[1]
    
    await state.update_data(training_type=training_type)
    
    await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø: **{training_type.capitalize()}**",
        parse_mode="Markdown"
    )
    
    await callback.message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n\n"
        "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.01.2024)\n"
        "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '—Å–µ–≥–æ–¥–Ω—è' –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã",
        reply_markup=get_cancel_keyboard()
    )
    
    await state.set_state(AddTrainingStates.waiting_for_date)
    await callback.answer()


@router.message(AddTrainingStates.waiting_for_date)
async def process_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_handler(message, state)
        return
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
    if message.text.lower() == "—Å–µ–≥–æ–¥–Ω—è":
        date = datetime.now().date()
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì
        date_pattern = r'^\d{2}\.\d{2}\.\d{4}$'
        if not re.match(date_pattern, message.text):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.01.2024)\n"
                "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '—Å–µ–≥–æ–¥–Ω—è'"
            )
            return
        
        try:
            date = datetime.strptime(message.text, "%d.%m.%Y").date()
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞!\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã"
            )
            return
    
    await state.update_data(date=date)
    
    await message.answer(
        f"‚úÖ –î–∞—Ç–∞: {date.strftime('%d.%m.%Y')}\n\n"
        "‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 60"
    )
    
    await state.set_state(AddTrainingStates.waiting_for_duration)


@router.message(AddTrainingStates.waiting_for_duration)
async def process_duration(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_handler(message, state)
        return
    
    try:
        duration = int(message.text)
        if duration <= 0:
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–º–∏–Ω—É—Ç—ã)\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 60"
        )
        return
    
    await state.update_data(duration=duration)
    
    await message.answer(
        f"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω\n\n"
        "üèÉ –í–≤–µ–¥–∏—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 10.5"
    )
    
    await state.set_state(AddTrainingStates.waiting_for_distance)


@router.message(AddTrainingStates.waiting_for_distance)
async def process_distance(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_handler(message, state)
        return
    
    try:
        distance = float(message.text.replace(',', '.'))
        if distance <= 0:
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–∫–∏–ª–æ–º–µ—Ç—Ä—ã)\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 10.5"
        )
        return
    
    await state.update_data(distance=distance)
    
    await message.answer(
        f"‚úÖ –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance} –∫–º\n\n"
        "‚ù§Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å (—É–¥/–º–∏–Ω)\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 145"
    )
    
    await state.set_state(AddTrainingStates.waiting_for_pulse)


@router.message(AddTrainingStates.waiting_for_pulse)
async def process_pulse(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–ª—å—Å–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_handler(message, state)
        return
    
    try:
        pulse = int(message.text)
        if pulse <= 0 or pulse > 250:
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É–ª—å—Å–∞ (30-250 —É–¥/–º–∏–Ω)\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 145"
        )
        return
    
    await state.update_data(pulse=pulse)
    
    await message.answer(
        f"‚úÖ –°—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å: {pulse} —É–¥/–º–∏–Ω\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –†–∞–∑–º–∏–Ω–∫–∞ - 3000–º, –û–†–£ + –°–ë–£ + 3 —É—Å–∫–æ—Ä–µ–Ω–∏—è\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        reply_markup=get_skip_keyboard()
    )
    
    await state.set_state(AddTrainingStates.waiting_for_description)


@router.message(AddTrainingStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_handler(message, state)
        return
    
    description = None if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text
    await state.update_data(description=description)
    
    await message.answer(
        "üéØ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 3 —Ö 200–º / 200–º - (28.0-29.0-28.4)\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    )
    
    await state.set_state(AddTrainingStates.waiting_for_results)


@router.message(AddTrainingStates.waiting_for_results)
async def process_results(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_handler(message, state)
        return
    
    results = None if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text
    await state.update_data(results=results)
    
    await message.answer(
        "üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –•–æ—Ä–æ—à–∞—è —Ñ–æ—Ä–º–∞, –ª–µ–≥–∫–æ –ø—Ä–æ–±–µ–∂–∞–ª\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    )
    
    await state.set_state(AddTrainingStates.waiting_for_comment)


@router.message(AddTrainingStates.waiting_for_comment)
async def process_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_handler(message, state)
        return
    
    comment = None if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text
    await state.update_data(comment=comment)
    
    await message.answer(
        "üò¥ –û—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 (—Å–æ–≤—Å–µ–º –Ω–µ —É—Å—Ç–∞–ª) –¥–æ 10 (–æ—á–µ–Ω—å —É—Å—Ç–∞–ª):",
        reply_markup=get_fatigue_keyboard()
    )
    
    await state.set_state(AddTrainingStates.waiting_for_fatigue)


@router.callback_query(F.data.startswith("fatigue:"))
async def process_fatigue(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    fatigue_level = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    data['fatigue_level'] = fatigue_level
    data['user_id'] = callback.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –ë–î
    await add_training(data)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    summary = (
        "‚úÖ **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
        f"üìÖ –î–∞—Ç–∞: {data['date'].strftime('%d.%m.%Y')}\n"
        f"üèÉ –¢–∏–ø: {data['training_type'].capitalize()}\n"
        f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data['duration']} –º–∏–Ω\n"
        f"üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {data['distance']} –∫–º\n"
        f"‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å: {data['pulse']} —É–¥/–º–∏–Ω\n"
    )
    
    if data.get('description'):
        summary += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
    if data.get('results'):
        summary += f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {data['results']}\n"
    if data.get('comment'):
        summary += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}\n"
    
    summary += f"üò¥ –£—Å—Ç–∞–ª–æ—Å—Ç—å: {fatigue_level}/10"
    
    await callback.message.edit_text(summary, parse_mode="Markdown")
    await callback.message.answer(
        "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
        reply_markup=get_main_menu_keyboard()
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await callback.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! ‚úÖ")


@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
@router.callback_query(F.data == "cancel")
async def cancel_handler(message: Message | CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    current_state = await state.get_state()
    
    if current_state is None:
        if isinstance(message, Message):
            await message.answer(
                "–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å ü§∑‚Äç‚ôÇÔ∏è",
                reply_markup=get_main_menu_keyboard()
            )
        return
    
    await state.clear()
    
    if isinstance(message, CallbackQuery):
        await message.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await message.message.answer(
            "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
            reply_markup=get_main_menu_keyboard()
        )
        await message.answer()
    else:
        await message.answer(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\n\n–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
            reply_markup=get_main_menu_keyboard()
        )


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer(
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ!\n\n"
        "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å:\n"
        "‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        "‚Ä¢ –°—É–º–º–∞—Ä–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é\n"
        "‚Ä¢ –°—Ä–µ–¥–Ω—é—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!"
    )


@router.message(F.text == "üìà –ì—Ä–∞—Ñ–∏–∫–∏")
async def show_graphs(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer("üìà –ì—Ä–∞—Ñ–∏–∫–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–∑–∂–µ!")


@router.message(F.text == "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
async def show_achievements(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–∑–∂–µ!")


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–∑–∂–µ!")


@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
    await cmd_help(message)
