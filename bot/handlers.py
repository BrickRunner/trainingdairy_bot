"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
"""

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from datetime import datetime
import re
import logging

from bot.fsm import AddTrainingStates, ExportPDFStates
from bot.keyboards import (
    get_main_menu_keyboard,
    get_training_types_keyboard,
    get_cancel_keyboard,
    get_skip_keyboard,
    get_fatigue_keyboard,
    get_period_keyboard,
    get_date_keyboard,
    get_trainings_list_keyboard,
    get_training_detail_keyboard,
    get_export_period_keyboard
)
from bot.calendar_keyboard import CalendarKeyboard
from database.queries import (
    add_user, add_training, get_user,
    get_trainings_by_period, get_training_statistics, get_training_by_id,
    get_trainings_by_custom_period, get_statistics_by_custom_period,
    delete_training,  # –ù–û–í–´–ô –ö–û–î: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º delete_training
    get_user_settings,  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º get_user_settings –¥–ª—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
    get_main_training_types,  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    get_pulse_zone_for_value  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É–ª—å—Å–æ–≤–æ–π –∑–æ–Ω—ã
)
from bot.graphs import generate_graphs
from bot.pdf_export import create_training_pdf
from utils.unit_converter import format_distance, format_pace, format_swimming_distance
from utils.date_formatter import DateFormatter, get_user_date_format
from utils.goals_checker import check_weekly_goals

router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    await add_user(user_id, username)
    
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Trainingdairy_bot</b> ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫! üèÉ‚Äç‚ôÇÔ∏è\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "‚ûï –î–æ–±–∞–≤–ª—è—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "üìà –°—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
        "üèÜ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
    )
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_menu_keyboard(),
        parse_mode="HTML"
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**\n\n"
        "**–ö–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/add_training - –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "**–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é:**\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É - –ó–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "üìä –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        "üìà –ì—Ä–∞—Ñ–∏–∫–∏ - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
        "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è - –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –Ω–∞–≥—Ä–∞–¥—ã\n"
        "üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ PDF\n\n"
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞. "
        "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –µ—ë –¥–µ—Ç–∞–ª–∏ –≤ 'üìä –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏' –∏ –Ω–∞–∂–º–∏—Ç–µ 'üóë –£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'.\n"
        "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"
    )
    
    await message.answer(help_text, parse_mode="Markdown")

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
@router.message(Command("add_training"))
async def start_add_training(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    main_types = await get_main_training_types(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø
    if not main_types:
        await message.answer(
            "‚ö†Ô∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫**\n\n"
            "–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí üë§ –ü—Ä–æ—Ñ–∏–ª—å ‚Üí "
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
            parse_mode="Markdown"
        )
        return

    await message.answer(
        "üèãÔ∏è **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
        reply_markup=get_training_types_keyboard(main_types),
        parse_mode="Markdown"
    )
    await state.set_state(AddTrainingStates.waiting_for_type)

@router.callback_query(F.data.startswith("training_type:"))
async def process_training_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    training_type = callback.data.split(":")[1]
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –≤—Ö–æ–¥–∏—Ç –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    main_types = await get_main_training_types(user_id)

    if training_type not in main_types:
        await callback.answer(
            "‚ùå –≠—Ç–æ—Ç —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n"
            "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ü—Ä–æ—Ñ–∏–ª—å",
            show_alert=True
        )
        return

    await state.update_data(training_type=training_type)

    await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø: **{training_type.capitalize()}**",
        parse_mode="Markdown"
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    calendar = CalendarKeyboard.create_calendar(1, datetime.now(), "cal")
    await callback.message.answer(
        "üìÖ –ö–æ–≥–¥–∞ –±—ã–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
        reply_markup=calendar
    )

    # –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
    await callback.message.answer(
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=get_date_keyboard()
    )

    await state.set_state(AddTrainingStates.waiting_for_date)
    await callback.answer()

@router.message(AddTrainingStates.waiting_for_date)
async def process_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_handler(message, state)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    date_format = await get_user_date_format(user_id)
    
    # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ UTC+3 (–ú–æ—Å–∫–≤–∞)
    from datetime import timedelta
    utc_now = datetime.utcnow()
    moscow_now = utc_now + timedelta(hours=3)
    today = moscow_now.date()
    yesterday = today - timedelta(days=1)
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
    if message.text in ["—Å–µ–≥–æ–¥–Ω—è", "üìÖ –°–µ–≥–æ–¥–Ω—è"]:
        date = today
    elif message.text in ["–≤—á–µ—Ä–∞", "üìÖ –í—á–µ—Ä–∞"]:
        date = yesterday
    elif message.text == "üìù –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é —Å —É—á–µ—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        format_desc = DateFormatter.get_format_description(date_format)
        await message.answer(
            f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n\n"
            f"–§–æ—Ä–º–∞—Ç: {format_desc}",
            reply_markup=get_cancel_keyboard()
        )
        return
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        date_pattern = DateFormatter.get_validation_pattern(date_format)
        if not re.match(date_pattern, message.text):
            format_desc = DateFormatter.get_format_description(date_format)
            await message.answer(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: {format_desc}\n"
                "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ"
            )
            return
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        date = DateFormatter.parse_date(message.text, date_format)
        if date is None:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞!\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã"
            )
            return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
    if date > today:
        today_str = DateFormatter.format_date(today, date_format)
        date_str = DateFormatter.format_date(date, date_format)
        await message.answer(
            f"‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –±—É–¥—É—â–µ–º!\n\n"
            f"–°–µ–≥–æ–¥–Ω—è: {today_str}\n"
            f"–í—ã –≤–≤–µ–ª–∏: {date_str}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–µ –ø–æ–∑–∂–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π."
        )
        return
    
    await state.update_data(date=date)
    
    date_str = DateFormatter.format_date(date, date_format)
    await message.answer(
        f"‚úÖ –î–∞—Ç–∞: {date_str}\n\n"
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n\n"
        "–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú:–°–°\n"
        "–ü—Ä–∏–º–µ—Ä—ã: 01:25:30 –∏–ª–∏ 25:15:45 (–¥–ª—è —É–ª—å—Ç—Ä–∞–º–∞—Ä–∞—Ñ–æ–Ω–æ–≤)",
        reply_markup=get_cancel_keyboard()
    )
    
    await state.set_state(AddTrainingStates.waiting_for_time)

@router.message(AddTrainingStates.waiting_for_time)
async def process_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_handler(message, state)
        return
    
    # –ì–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ß:–ú–ú:–°–° –∏–ª–∏ –ß–ß:–ú–ú:–°–° –∏–ª–∏ –ß–ß–ß:–ú–ú:–°–° (–¥–ª—è —É–ª—å—Ç—Ä–∞–º–∞—Ä–∞—Ñ–æ–Ω–æ–≤)
    time_pattern = r'^\d{1,3}:\d{1,2}:\d{1,2}$'
    if not re.match(time_pattern, message.text):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú:–°–°\n"
            "–ü—Ä–∏–º–µ—Ä—ã: 01:25:30 –∏–ª–∏ 1:25:30 –∏–ª–∏ 25:15:45"
        )
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        hours, minutes, seconds = map(int, message.text.split(':'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–∏–Ω—É—Ç –∏ —Å–µ–∫—É–Ω–¥
        if minutes > 59 or seconds > 59:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è!\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–∏–Ω—É—Ç—ã ‚â§ 59, —Å–µ–∫—É–Ω–¥—ã ‚â§ 59"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω—É–ª–µ–≤–æ–µ –≤—Ä–µ–º—è
        if hours == 0 and minutes == 0 and seconds == 0:
            await message.answer(
                "‚ùå –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å 00:00:00!\n\n"
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: 00:00:01\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏."
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –∫—Ä–∞—Å–∏–≤—ã–π –≤–∏–¥ —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏
        formatted_time = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–∏–Ω—É—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ë–î
        total_minutes = hours * 60 + minutes + (1 if seconds > 0 else 0)
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è!\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"
        )
        return
    
    await state.update_data(time=formatted_time, duration=total_minutes)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    data = await state.get_data()
    training_type = data.get('training_type', '–∫—Ä–æ—Å—Å')
    
    if training_type == '—Å–∏–ª–æ–≤–∞—è':
        # –î–ª—è —Å–∏–ª–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        await message.answer(
            f"‚úÖ –í—Ä–µ–º—è: {formatted_time}\n\n"
            "üí™ –û–ø–∏—à–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "–ñ–∏–º –ª—ë–∂–∞ 3—Ö10 (70–∫–≥)\n"
            "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è 4—Ö12 (80–∫–≥)\n"
            "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è 3—Ö8\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
            reply_markup=get_skip_keyboard()
        )
        await state.set_state(AddTrainingStates.waiting_for_exercises)
    elif training_type == '–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è':
        # –î–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
        await message.answer(
            f"‚úÖ –í—Ä–µ–º—è: {formatted_time}\n\n"
            "‚ö° –û–ø–∏—à–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "1. –†–∞–∑–º–∏–Ω–∫–∞ - 3000–º\n"
            "2. –û–†–£ + –°–ë–£ + 2 —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ ~80–º\n"
            "    –†–∞–±–æ—Ç–∞:\n"
            "3. 10 —Ö 200–º / 200–º - (33,6; 33,0; 33,5; 34,0; 33,7; 33,3; 33,4; 33,5; 33,0; 29,0)\n"
            "4. –¢—Ä—É—Å—Ü–∞ - 600–º\n"
            "   7 —Ö 60–º - –º–Ω–æ–≥–æ—Å–∫–æ–∫–∏ \n"
            "5. –ó–∞–º–∏–Ω–∫–∞ - 1000–º"
        )
        await state.set_state(AddTrainingStates.waiting_for_intervals)
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
        # –ü–æ–ª—É—á–∞–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        user_settings = await get_user_settings(user_id)
        distance_unit = user_settings.get('distance_unit', '–∫–º') if user_settings else '–∫–º'

        await message.answer(
            f"‚úÖ –í—Ä–µ–º—è: {formatted_time}\n\n"
            f"üèÉ –í–≤–µ–¥–∏—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –≤ {distance_unit}\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 10.5"
        )
        await state.set_state(AddTrainingStates.waiting_for_distance)

@router.message(AddTrainingStates.waiting_for_distance)
async def process_distance(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_handler(message, state)
        return

    # –ü–æ–ª—É—á–∞–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    user_settings = await get_user_settings(user_id)
    distance_unit = user_settings.get('distance_unit', '–∫–º') if user_settings else '–∫–º'

    try:
        distance_input = float(message.text.replace(',', '.'))
        if distance_input <= 0:
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ({distance_unit})\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 10.5"
        )
        return

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–∏–ª–æ–º–µ—Ç—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    if distance_unit == '–º–∏–ª–∏':
        from utils.unit_converter import miles_to_km
        distance_km = miles_to_km(distance_input)
    else:
        distance_km = distance_input

    await state.update_data(distance=distance_km)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    data = await state.get_data()
    training_type = data.get('training_type', '–∫—Ä–æ—Å—Å')

    # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å —É—á–µ—Ç–æ–º –µ–¥–∏–Ω–∏—Ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if training_type == '–ø–ª–∞–≤–∞–Ω–∏–µ':
        distance_text = f"‚úÖ –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {format_swimming_distance(distance_km, distance_unit)}"
    else:
        distance_text = f"‚úÖ –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {format_distance(distance_km, distance_unit)}"
    
    await message.answer(
        f"{distance_text}\n\n"
        "‚ù§Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å (—É–¥/–º–∏–Ω)\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 145"
    )
    
    await state.set_state(AddTrainingStates.waiting_for_avg_pulse)

@router.message(AddTrainingStates.waiting_for_avg_pulse)
async def process_avg_pulse(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—É–ª—å—Å–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_handler(message, state)
        return

    try:
        avg_pulse = int(message.text)
        if avg_pulse < 40 or avg_pulse > 250:
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É–ª—å—Å–∞ (40-250 —É–¥/–º–∏–Ω)\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 145"
        )
        return

    await state.update_data(avg_pulse=avg_pulse)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É–ª—å—Å–æ–≤—É—é –∑–æ–Ω—É
    user_id = message.from_user.id
    pulse_zone = await get_pulse_zone_for_value(user_id, avg_pulse)

    zone_names = {
        'zone1': 'üü¢ –ó–æ–Ω–∞ 1 (–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ)',
        'zone2': 'üîµ –ó–æ–Ω–∞ 2 (–ê—ç—Ä–æ–±–Ω–∞—è)',
        'zone3': 'üü° –ó–æ–Ω–∞ 3 (–¢–µ–º–ø–æ–≤–∞—è)',
        'zone4': 'üü† –ó–æ–Ω–∞ 4 (–ê–Ω–∞—ç—Ä–æ–±–Ω–∞—è)',
        'zone5': 'üî¥ –ó–æ–Ω–∞ 5 (–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è)'
    }

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–æ–Ω–µ
    zone_info = ""
    if pulse_zone:
        zone_info = f"\n{zone_names[pulse_zone]}"

    await message.answer(
        f"‚úÖ –°—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å: {avg_pulse} —É–¥/–º–∏–Ω{zone_info}\n\n"
        "üíì –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å (—É–¥/–º–∏–Ω)\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 175"
    )

    await state.set_state(AddTrainingStates.waiting_for_max_pulse)

@router.message(AddTrainingStates.waiting_for_exercises)
async def process_exercises(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è —Å–∏–ª–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_handler(message, state)
        return
    
    exercises = None if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text
    await state.update_data(exercises=exercises)
    
    await message.answer(
        "‚ù§Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å (—É–¥/–º–∏–Ω)\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 130"
    )
    
    await state.set_state(AddTrainingStates.waiting_for_avg_pulse)

@router.message(AddTrainingStates.waiting_for_intervals)
async def process_intervals(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_handler(message, state)
        return
    
    # –û–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ - –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    intervals = message.text
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä—ë–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    from utils.interval_calculator import calculate_interval_volume, format_volume_message
    volume = calculate_interval_volume(intervals)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–±—ä—ë–º
    await state.update_data(intervals=intervals, calculated_volume=volume)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –æ–±—ä—ë–º
    if volume:
        volume_msg = f"\n\n{format_volume_message(volume)}"
        await message.answer(
            f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ{volume_msg}\n\n"
            "‚ù§Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å (—É–¥/–º–∏–Ω)\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 165"
        )
    else:
        await message.answer(
            "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n"
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—ä—ë–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
            "(–í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –≤—Å–µ –ø—É–Ω–∫—Ç—ã –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω—ã)\n\n"
            "‚ù§Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å (—É–¥/–º–∏–Ω)\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 165"
        )
    
    await state.set_state(AddTrainingStates.waiting_for_avg_pulse)

@router.message(AddTrainingStates.waiting_for_max_pulse)
async def process_max_pulse(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—É–ª—å—Å–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_handler(message, state)
        return

    try:
        max_pulse = int(message.text)
        if max_pulse < 40 or max_pulse > 250:
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É–ª—å—Å–∞ (40-250 —É–¥/–º–∏–Ω)\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 175"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å –Ω–µ –º–µ–Ω—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
    data = await state.get_data()
    avg_pulse = data.get('avg_pulse', 0)

    if max_pulse < avg_pulse:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞!\n\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å ({max_pulse}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ ({avg_pulse})!\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—É–ª—å—Å–∞:"
        )
        return

    await state.update_data(max_pulse=max_pulse)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É–ª—å—Å–æ–≤—É—é –∑–æ–Ω—É –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—É–ª—å—Å–∞
    user_id = message.from_user.id
    pulse_zone = await get_pulse_zone_for_value(user_id, max_pulse)

    zone_names = {
        'zone1': 'üü¢ –ó–æ–Ω–∞ 1 (–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ)',
        'zone2': 'üîµ –ó–æ–Ω–∞ 2 (–ê—ç—Ä–æ–±–Ω–∞—è)',
        'zone3': 'üü° –ó–æ–Ω–∞ 3 (–¢–µ–º–ø–æ–≤–∞—è)',
        'zone4': 'üü† –ó–æ–Ω–∞ 4 (–ê–Ω–∞—ç—Ä–æ–±–Ω–∞—è)',
        'zone5': 'üî¥ –ó–æ–Ω–∞ 5 (–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è)'
    }

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–æ–Ω–µ
    zone_info = ""
    if pulse_zone:
        zone_info = f"\n{zone_names[pulse_zone]}"

    await message.answer(
        f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å: {max_pulse} —É–¥/–º–∏–Ω{zone_info}\n\n"
        "üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –•–æ—Ä–æ—à–∞—è —Ñ–æ—Ä–º–∞, –ª–µ–≥–∫–æ –ø—Ä–æ–±–µ–∂–∞–ª\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        reply_markup=get_skip_keyboard()
    )

    await state.set_state(AddTrainingStates.waiting_for_comment)

@router.message(AddTrainingStates.waiting_for_comment)
async def process_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_handler(message, state)
        return
    
    comment = None if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text
    await state.update_data(comment=comment)
    
    await message.answer(
        "üò¥ –û—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 (—Å–æ–≤—Å–µ–º –Ω–µ —É—Å—Ç–∞–ª) –¥–æ 10 (–æ—á–µ–Ω—å —É—Å—Ç–∞–ª):",
        reply_markup=ReplyKeyboardRemove()
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–ª–æ—Å—Ç–∏:",
        reply_markup=get_fatigue_keyboard()
    )
    
    await state.set_state(AddTrainingStates.waiting_for_fatigue)

@router.callback_query(F.data.startswith("fatigue:"))
async def process_fatigue(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    fatigue_level = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    data['fatigue_level'] = fatigue_level
    data['user_id'] = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    user_settings = await get_user_settings(callback.from_user.id)
    distance_unit = user_settings.get('distance_unit', '–∫–º') if user_settings else '–∫–º'
    date_format = user_settings.get('date_format', 'DD.MM.YYYY') if user_settings else 'DD.MM.YYYY'
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø
    time_str = data['time']
    hours, minutes, seconds = map(int, time_str.split(':'))
    total_seconds = hours * 3600 + minutes * 60 + seconds
    total_minutes = total_seconds / 60
    training_type = data['training_type']
    
    # –†–∞—Å—á–µ—Ç —Ç–µ–º–ø–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å –¥–∏—Å—Ç–∞–Ω—Ü–∏–µ–π
    if training_type not in ['—Å–∏–ª–æ–≤–∞—è', '–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è']:
        distance = data['distance']
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º–ø–∞
        avg_pace, pace_unit = format_pace(
            distance, 
            total_seconds, 
            distance_unit, 
            training_type
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º–ø –≤ –¥–∞–Ω–Ω—ã–µ
        data['avg_pace'] = avg_pace
        data['pace_unit'] = pace_unit
    
    # –î–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - calculated_volume —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ data
    # (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –ë–î
    await add_training(data)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    try:
        await check_weekly_goals(callback.from_user.id, callback.bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–µ–π: {str(e)}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    training_type = data['training_type']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if training_type == '–ø–ª–∞–≤–∞–Ω–∏–µ':
        training_emoji = "üèä"
    elif training_type == '–≤–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞':
        training_emoji = "üö¥"
    elif training_type == '—Å–∏–ª–æ–≤–∞—è':
        training_emoji = "üí™"
    elif training_type == '–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è':
        training_emoji = "‚ö°"
    else:  # –∫—Ä–æ—Å—Å
        training_emoji = "üèÉ"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    date_str = DateFormatter.format_date(data['date'], date_format)
    
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
    summary = (
        "‚úÖ **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
        f"üìÖ –î–∞—Ç–∞: {date_str}\n"
        f"{training_emoji} –¢–∏–ø: {training_type.capitalize()}\n"
        f"‚è∞ –í—Ä–µ–º—è: {data['time']}\n"
    )
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if training_type == '—Å–∏–ª–æ–≤–∞—è':
        # –î–ª—è —Å–∏–ª–æ–≤–æ–π - —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –∏ —Ç–µ–º–ø–∞
        if data.get('exercises'):
            summary += f"üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n{data['exercises']}\n"
    elif training_type == '–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è':
        # –î–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π - –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        if data.get('intervals'):
            summary += f"‚ö° –û–ø–∏—Å–∞–Ω–∏–µ:\n{data['intervals']}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –æ–±—ä—ë–º –µ—Å–ª–∏ –µ—Å—Ç—å
            if data.get('calculated_volume'):
                from utils.interval_calculator import format_volume_message
                volume_text = format_volume_message(data['calculated_volume'])
                if volume_text:
                    summary += f"{volume_text}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø –æ—Ç—Ä–µ–∑–∫–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            from utils.interval_calculator import calculate_average_interval_pace
            avg_pace_intervals = calculate_average_interval_pace(data['intervals'])
            if avg_pace_intervals:
                summary += f"‚ö° –°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø –æ—Ç—Ä–µ–∑–∫–æ–≤: {avg_pace_intervals}\n"
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ - –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –∏ —Ç–µ–º–ø —Å —É—á–µ—Ç–æ–º –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
        distance_km = data['distance']
        
        if training_type == '–ø–ª–∞–≤–∞–Ω–∏–µ':
            distance_text = f"üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {format_swimming_distance(distance_km, distance_unit)}"
        else:
            distance_text = f"üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {format_distance(distance_km, distance_unit)}"
        
        pace_emoji = "‚ö°"
        if training_type == '–≤–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞':
            pace_label = "–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å"
        else:
            pace_label = "–°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø"
        
        summary += (
            f"{distance_text}\n"
            f"{pace_emoji} {pace_label}: {avg_pace} {pace_unit}\n"
        )
    
    # –ü—É–ª—å—Å –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    if data.get('avg_pulse') and data.get('max_pulse'):
        summary += f"‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å: {data['avg_pulse']} —É–¥/–º–∏–Ω\n"
        summary += f"üíì –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å: {data['max_pulse']} —É–¥/–º–∏–Ω\n"
    
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
    if data.get('comment'):
        summary += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}\n"
    
    summary += f"üò¥ –£—Å—Ç–∞–ª–æ—Å—Ç—å: {fatigue_level}/10"
    
    await callback.message.edit_text(summary, parse_mode="Markdown")
    await callback.message.answer(
        "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
        reply_markup=get_main_menu_keyboard()
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await callback.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! ‚úÖ")

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
@router.callback_query(F.data == "cancel")
async def cancel_handler(message: Message | CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    current_state = await state.get_state()
    
    if current_state is None:
        if isinstance(message, Message):
            await message.answer(
                "–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å ü§∑‚Äç‚ôÇÔ∏è",
                reply_markup=get_main_menu_keyboard()
            )
        return
    
    await state.clear()
    
    if isinstance(message, CallbackQuery):
        await message.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await message.message.answer(
            "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
            reply_markup=get_main_menu_keyboard()
        )
        await message.answer()
    else:
        await message.answer(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\n\n–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
            reply_markup=get_main_menu_keyboard()
        )

@router.message(F.text == "üìä –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
async def show_my_trainings(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    await message.answer(
        "üìä *–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        parse_mode="Markdown",
        reply_markup=get_period_keyboard()
    )

@router.callback_query(F.data.startswith("period:"))
async def show_trainings_period(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    period = callback.data.split(":")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    user_settings = await get_user_settings(callback.from_user.id)
    distance_unit = user_settings.get('distance_unit', '–∫–º') if user_settings else '–∫–º'
    date_format = user_settings.get('date_format', 'DD.MM.YYYY') if user_settings else 'DD.MM.YYYY'
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    period_days = {
        "week": 7,
        "2weeks": 14,
        "month": 30
    }
    
    period_names = {
        "week": "–Ω–µ–¥–µ–ª—é",
        "2weeks": "2 –Ω–µ–¥–µ–ª–∏",
        "month": "–º–µ—Å—è—Ü"
    }
    
    days = period_days.get(period, 7)
    period_name = period_names.get(period, "–ø–µ—Ä–∏–æ–¥")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
    stats = await get_training_statistics(callback.from_user.id, period)
    trainings = await get_trainings_by_period(callback.from_user.id, period)
    
    if not trainings:
        await callback.message.edit_text(
            f"üìä *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ {period_name}*\n\n"
            f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.\n\n"
            f"_–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}_",
            parse_mode="Markdown",
            reply_markup=get_period_keyboard()
        )
        await callback.answer()
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    from datetime import timedelta
    today = datetime.now().date()
    
    if period == 'week':
        start_date = today - timedelta(days=today.weekday())
        start_date_str = DateFormatter.format_date(start_date, date_format).split('.')[-1] if date_format == 'DD.MM.YYYY' else DateFormatter.format_date(start_date, date_format).rsplit('.', 1)[0] if '.' in DateFormatter.format_date(start_date, date_format) else DateFormatter.format_date(start_date, date_format).rsplit('/', 1)[0] if '/' in DateFormatter.format_date(start_date, date_format) else DateFormatter.format_date(start_date, date_format).rsplit('-', 1)[0]
        # –ö–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ (–±–µ–∑ –≥–æ–¥–∞)
        if date_format == 'DD.MM.YYYY':
            period_display = f"–Ω–µ–¥–µ–ª—é (—Å {start_date.strftime('%d.%m')} –ø–æ —Å–µ–≥–æ–¥–Ω—è)"
        elif date_format == 'MM/DD/YYYY':
            period_display = f"–Ω–µ–¥–µ–ª—é (—Å {start_date.strftime('%m/%d')} –ø–æ —Å–µ–≥–æ–¥–Ω—è)"
        else:
            period_display = f"–Ω–µ–¥–µ–ª—é (—Å {start_date.strftime('%m-%d')} –ø–æ —Å–µ–≥–æ–¥–Ω—è)"
    elif period == '2weeks':
        start_date = today - timedelta(days=today.weekday() + 7)
        if date_format == 'DD.MM.YYYY':
            period_display = f"2 –Ω–µ–¥–µ–ª–∏ (—Å {start_date.strftime('%d.%m')} –ø–æ —Å–µ–≥–æ–¥–Ω—è)"
        elif date_format == 'MM/DD/YYYY':
            period_display = f"2 –Ω–µ–¥–µ–ª–∏ (—Å {start_date.strftime('%m/%d')} –ø–æ —Å–µ–≥–æ–¥–Ω—è)"
        else:
            period_display = f"2 –Ω–µ–¥–µ–ª–∏ (—Å {start_date.strftime('%m-%d')} –ø–æ —Å–µ–≥–æ–¥–Ω—è)"
    elif period == 'month':
        start_date = today.replace(day=1)
        if date_format == 'DD.MM.YYYY':
            period_display = f"–º–µ—Å—è—Ü (—Å {start_date.strftime('%d.%m')} –ø–æ —Å–µ–≥–æ–¥–Ω—è)"
        elif date_format == 'MM/DD/YYYY':
            period_display = f"–º–µ—Å—è—Ü (—Å {start_date.strftime('%m/%d')} –ø–æ —Å–µ–≥–æ–¥–Ω—è)"
        else:
            period_display = f"–º–µ—Å—è—Ü (—Å {start_date.strftime('%m-%d')} –ø–æ —Å–µ–≥–æ–¥–Ω—è)"
    else:
        period_display = period_name
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    message_text = f"üìä *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ {period_display}*\n\n"
    message_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    message_text += "üìà *–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n"
    message_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    # 1. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    message_text += f"üèÉ –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: *{stats['total_count']}*\n"
    
    # 2. –û–±—â–∏–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂ (–∏ —Å—Ä–µ–¥–Ω–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø–µ—Ä–∏–æ–¥–æ–≤ > 1 –Ω–µ–¥–µ–ª–∏)
    if stats['total_distance'] > 0:
        message_text += f"üìè –û–±—â–∏–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂: *{format_distance(stats['total_distance'], distance_unit)}*\n"
        
        # –î–ª—è –ø–µ—Ä–∏–æ–¥–æ–≤ –±–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –∫–º –∑–∞ –Ω–µ–¥–µ–ª—é
        if period in ['2weeks', 'month']:
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –Ω–µ–¥–µ–ª—å –≤ –ø–µ—Ä–∏–æ–¥–µ
            days_in_period = (today - start_date).days + 1  # +1 —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è
            weeks_count = days_in_period / 7
            
            if weeks_count > 0:
                avg_per_week = stats['total_distance'] / weeks_count
                message_text += f"   _(–°—Ä–µ–¥–Ω–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: {format_distance(avg_per_week, distance_unit)})_\n"
    
    # 3. –¢–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
    if stats['types_count']:
        message_text += f"\nüìã *–¢–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:*\n"
        
        type_emoji = {
            '–∫—Ä–æ—Å—Å': 'üèÉ',
            '–ø–ª–∞–≤–∞–Ω–∏–µ': 'üèä',
            '–≤–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞': 'üö¥',
            '—Å–∏–ª–æ–≤–∞—è': 'üí™',
            '–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è': '‚ö°'
        }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
        sorted_types = sorted(stats['types_count'].items(), key=lambda x: x[1], reverse=True)
        
        for t_type, count in sorted_types:
            emoji = type_emoji.get(t_type, 'üìù')
            percentage = (count / stats['total_count']) * 100
            message_text += f"  {emoji} {t_type.capitalize()}: {count} ({percentage:.1f}%)\n"
    
    # 4. –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–ª–æ—Å—Ç–∏
    if stats['avg_fatigue'] > 0:
        message_text += f"\nüò¥ –°—Ä–µ–¥–Ω—è—è —É—Å—Ç–∞–ª–æ—Å—Ç—å: *{stats['avg_fatigue']}/10*\n"
    
    message_text += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    message_text += "üìù *–°–ü–ò–°–û–ö –¢–†–ï–ù–ò–†–û–í–û–ö*\n"
    message_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–æ–≤
    type_emoji = {
        '–∫—Ä–æ—Å—Å': 'üèÉ',
        '–ø–ª–∞–≤–∞–Ω–∏–µ': 'üèä',
        '–≤–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞': 'üö¥',
        '—Å–∏–ª–æ–≤–∞—è': 'üí™',
        '–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è': '‚ö°'
    }
    
    # –ù–û–í–´–ô –ö–û–î: –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ "–ù–∞–∑–∞–¥"
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    for idx, training in enumerate(trainings[:15], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 15
        # –ü–∞—Ä—Å–∏–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        date = DateFormatter.format_date(training['date'], date_format)
        t_type = training['type']
        emoji = type_emoji.get(t_type, 'üìù')
        
        # 1. –î–∞—Ç–∞ –∏ —Ç–∏–ø
        message_text += f"*{idx}.* {emoji} *{t_type.capitalize()}* ‚Ä¢ {date}\n"
        
        # 2. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:–°–°
        if training.get('time'):
            message_text += f"   ‚è∞ –í—Ä–µ–º—è: {training['time']}\n"
        
        # 3. –û–±—â–∏–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂ —Å —É—á–µ—Ç–æ–º –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
        if t_type == '–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è':
            if training.get('calculated_volume'):
                message_text += f"   üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {format_distance(training['calculated_volume'], distance_unit)}\n"
        else:
            if training.get('distance'):
                if t_type == '–ø–ª–∞–≤–∞–Ω–∏–µ':
                    message_text += f"   üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {format_swimming_distance(training['distance'], distance_unit)}\n"
                else:
                    message_text += f"   üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {format_distance(training['distance'], distance_unit)}\n"
        
        # 4. –°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø/—Å–∫–æ—Ä–æ—Å—Ç—å/–∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        if t_type == '–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø –æ—Ç—Ä–µ–∑–∫–æ–≤
            if training.get('intervals'):
                from utils.interval_calculator import calculate_average_interval_pace
                avg_pace_intervals = calculate_average_interval_pace(training['intervals'])
                if avg_pace_intervals:
                    message_text += f"   ‚ö° –°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø –æ—Ç—Ä–µ–∑–∫–æ–≤: {avg_pace_intervals}\n"
        elif t_type == '–≤–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞':
            # –î–ª—è –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ - —Å–∫–æ—Ä–æ—Å—Ç—å
            if training.get('avg_pace'):
                message_text += f"   üö¥ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {training['avg_pace']} {training.get('pace_unit', '')}\n"
        elif t_type != '—Å–∏–ª–æ–≤–∞—è':
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö (–∫—Ä–æ—Å—Å, –ø–ª–∞–≤–∞–Ω–∏–µ) - —Ç–µ–º–ø
            if training.get('avg_pace'):
                message_text += f"   ‚ö° –°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø: {training['avg_pace']} {training.get('pace_unit', '')}\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø—É–ª—å—Å
        if training.get('avg_pulse'):
            message_text += f"   ‚ù§Ô∏è –ü—É–ª—å—Å: {training['avg_pulse']} —É–¥/–º–∏–Ω\n"
        
        # –£—Å—Ç–∞–ª–æ—Å—Ç—å
        if training.get('fatigue_level'):
            message_text += f"   üò¥ –£—Å—Ç–∞–ª–æ—Å—Ç—å: {training['fatigue_level']}/10\n"
        
        message_text += "\n"
    
    if len(trainings) > 15:
        message_text += f"_... –∏ –µ—â—ë {len(trainings) - 15} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫_\n"
    
    # –ù–û–í–´–ô –ö–û–î: –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_periods"))
    reply_markup = builder.as_markup()
    
    try:
        await callback.message.edit_text(
            message_text,
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    except Exception as e:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        if "message is not modified" in str(e):
            await callback.answer("–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã", show_alert=False)
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            raise
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ >= 2)
    if len(trainings) >= 2:
        try:
            period_captions = {
                'week': '–∑–∞ –Ω–µ–¥–µ–ª—é',
                '2weeks': '–∑–∞ 2 –Ω–µ–¥–µ–ª–∏',
                'month': '–∑–∞ –º–µ—Å—è—Ü'
            }
            caption_suffix = period_captions.get(period, '')

            combined_graph = generate_graphs(trainings, period, days, distance_unit)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {period}...")
            
            if combined_graph:
                await callback.message.answer_photo(
                    photo=BufferedInputFile(combined_graph.read(), filename="statistics.png"),
                    caption=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ {caption_suffix}"
                )
                logger.info("–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏")
                await callback.message.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}", exc_info=True)
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {str(e)}")
    else:
        logger.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {len(trainings)} (–º–∏–Ω–∏–º—É–º 2)")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    await callback.message.answer(
        "üìã *–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:*\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥",
        parse_mode="Markdown",
        reply_markup=get_trainings_list_keyboard(trainings, period, date_format)
    )
    
    await callback.answer()

# –ù–û–í–´–ô –ö–û–î: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("delete_training:"))
async def request_delete_confirmation(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    parts = callback.data.split(":")
    training_id = int(parts[1])
    period = parts[2]
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete:{training_id}:{period}"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_delete")
    )
    
    await callback.message.answer(
        f"üóë –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –ù–û–í–´–ô –ö–û–î: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("confirm_delete:"))
async def confirm_delete(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    parts = callback.data.split(":")
    training_id = int(parts[1])
    period = parts[2]
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_settings = await get_user_settings(user_id)
    date_format = user_settings.get('date_format', 'DD.MM.YYYY') if user_settings else 'DD.MM.YYYY'
    
    # –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    deleted = await delete_training(training_id, user_id)
    
    if deleted:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
        await callback.message.answer(f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
        
        # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        stats = await get_training_statistics(user_id, period)
        trainings = await get_trainings_by_period(user_id, period)
        
        if not trainings:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º period_names –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            period_names = {"week": "–Ω–µ–¥–µ–ª—é", "2weeks": "2 –Ω–µ–¥–µ–ª–∏", "month": "–º–µ—Å—è—Ü"}
            period_name = period_names.get(period, "–ø–µ—Ä–∏–æ–¥")
            await callback.message.answer(
                f"üìä *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ {period_name}*\n\n"
                f"–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.",
                parse_mode="Markdown",
                reply_markup=get_period_keyboard()
            )
            await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        period_days = {"week": 7, "2weeks": 14, "month": 30}
        period_names = {"week": "–Ω–µ–¥–µ–ª—é", "2weeks": "2 –Ω–µ–¥–µ–ª–∏", "month": "–º–µ—Å—è—Ü"}
        days = period_days.get(period, 7)
        period_name = period_names.get(period, "–ø–µ—Ä–∏–æ–¥")
        
        from datetime import timedelta
        today = datetime.now().date()
        if period == 'week':
            start_date = today - timedelta(days=today.weekday())
            period_display = f"–Ω–µ–¥–µ–ª—é (—Å {start_date.strftime('%d.%m')} –ø–æ —Å–µ–≥–æ–¥–Ω—è)"
        elif period == '2weeks':
            start_date = today - timedelta(days=today.weekday() + 7)
            period_display = f"2 –Ω–µ–¥–µ–ª–∏ (—Å {start_date.strftime('%d.%m')} –ø–æ —Å–µ–≥–æ–¥–Ω—è)"
        elif period == 'month':
            start_date = today.replace(day=1)
            period_display = f"–º–µ—Å—è—Ü (—Å {start_date.strftime('%d.%m')} –ø–æ —Å–µ–≥–æ–¥–Ω—è)"
        else:
            period_display = period_name
        
        message_text = f"üìä *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ {period_display}*\n\n"
        message_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        message_text += "üìà *–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n"
        message_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        message_text += f"üèÉ –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: *{stats['total_count']}*\n"
        if stats['total_distance'] > 0:
            distance_unit = user_settings.get('distance_unit', '–∫–º') if user_settings else '–∫–º'
            message_text += f"üìè –û–±—â–∏–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂: *{format_distance(stats['total_distance'], distance_unit)}*\n"
            if period in ['2weeks', 'month']:
                days_in_period = (today - start_date).days + 1
                weeks_count = days_in_period / 7
                if weeks_count > 0:
                    avg_per_week = stats['total_distance'] / weeks_count
                    message_text += f"   _(–°—Ä–µ–¥–Ω–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: {format_distance(avg_per_week, distance_unit)})_\n"
        if stats['types_count']:
            message_text += f"\nüìã *–¢–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:*\n"
            type_emoji = {
                '–∫—Ä–æ—Å—Å': 'üèÉ', '–ø–ª–∞–≤–∞–Ω–∏–µ': 'üèä', '–≤–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞': 'üö¥', '—Å–∏–ª–æ–≤–∞—è': 'üí™', '–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è': '‚ö°'
            }
            sorted_types = sorted(stats['types_count'].items(), key=lambda x: x[1], reverse=True)
            for t_type, count in sorted_types:
                emoji = type_emoji.get(t_type, 'üìù')
                percentage = (count / stats['total_count']) * 100
                message_text += f"  {emoji} {t_type.capitalize()}: {count} ({percentage:.1f}%)\n"
        if stats['avg_fatigue'] > 0:
            message_text += f"\nüò¥ –°—Ä–µ–¥–Ω—è—è —É—Å—Ç–∞–ª–æ—Å—Ç—å: *{stats['avg_fatigue']}/10*\n"
        message_text += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        message_text += "üìù *–°–ü–ò–°–û–ö –¢–†–ï–ù–ò–†–û–í–û–ö*\n"
        message_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        builder = InlineKeyboardBuilder()
        for idx, training in enumerate(trainings[:15], 1):
            date = DateFormatter.format_date(training['date'], date_format)
            t_type = training['type']
            emoji = type_emoji.get(t_type, 'üìù')
            message_text += f"*{idx}.* {emoji} *{t_type.capitalize()}* ‚Ä¢ {date}\n"
            if training.get('time'):
                message_text += f"   ‚è∞ –í—Ä–µ–º—è: {training['time']}\n"
            if t_type == '–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è':
                if training.get('calculated_volume'):
                    message_text += f"   üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {format_distance(training['calculated_volume'], distance_unit)}\n"
            else:
                if training.get('distance'):
                    if t_type == '–ø–ª–∞–≤–∞–Ω–∏–µ':
                        message_text += f"   üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {format_swimming_distance(training['distance'], distance_unit)}\n"
                    else:
                        message_text += f"   üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {format_distance(training['distance'], distance_unit)}\n"
            if t_type == '–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è' and training.get('intervals'):
                from utils.interval_calculator import calculate_average_interval_pace
                avg_pace_intervals = calculate_average_interval_pace(training['intervals'])
                if avg_pace_intervals:
                    message_text += f"   ‚ö° –°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø –æ—Ç—Ä–µ–∑–∫–æ–≤: {avg_pace_intervals}\n"
            elif t_type == '–≤–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞' and training.get('avg_pace'):
                message_text += f"   üö¥ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {training['avg_pace']} {training.get('pace_unit', '')}\n"
            elif t_type != '—Å–∏–ª–æ–≤–∞—è' and training.get('avg_pace'):
                message_text += f"   ‚ö° –°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø: {training['avg_pace']} {training.get('pace_unit', '')}\n"
            if training.get('avg_pulse'):
                message_text += f"   ‚ù§Ô∏è –ü—É–ª—å—Å: {training['avg_pulse']} —É–¥/–º–∏–Ω\n"
            if training.get('fatigue_level'):
                message_text += f"   üò¥ –£—Å—Ç–∞–ª–æ—Å—Ç—å: {training['fatigue_level']}/10*\n"
            message_text += "\n"
        if len(trainings) > 15:
            message_text += f"_... –∏ –µ—â—ë {len(trainings) - 15} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫_\n"
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_periods"))
        reply_markup = builder.as_markup()
        
        try:
            await callback.message.edit_text(
                message_text,
                parse_mode="Markdown",
                reply_markup=reply_markup
            )
        except Exception as e:
            if "message is not modified" in str(e):
                await callback.answer("–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã", show_alert=False)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                raise
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏, –µ—Å–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ >= 2
        if len(trainings) >= 2:
            try:
                period_captions = {'week': '–∑–∞ –Ω–µ–¥–µ–ª—é', '2weeks': '–∑–∞ 2 –Ω–µ–¥–µ–ª–∏', 'month': '–∑–∞ –º–µ—Å—è—Ü'}
                caption_suffix = period_captions.get(period, '')
                combined_graph = generate_graphs(trainings, period, days, distance_unit)
                if combined_graph:
                    await callback.message.answer_photo(
                        photo=BufferedInputFile(combined_graph.read(), filename="statistics.png"),
                        caption=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ {caption_suffix}"
                    )
                    logger.info("–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                else:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏")
                    await callback.message.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}", exc_info=True)
                await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {str(e)}")
        
        await callback.message.answer(
            "üìã *–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:*\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥",
            parse_mode="Markdown",
            reply_markup=get_trainings_list_keyboard(trainings, period, date_format)
        )
    else:
        await callback.message.answer(f"‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≤–∞—à–∞.")
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await callback.answer()

# –ù–û–í–´–ô –ö–û–î: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data == "cancel_delete")
async def cancel_delete(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await callback.message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.message.delete()
    await callback.answer()

@router.callback_query(F.data.startswith("training_detail:"))
async def show_training_detail(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"""
    # –ü–∞—Ä—Å–∏–º callback_data: "training_detail:ID:period"
    parts = callback.data.split(":")
    training_id = int(parts[1])
    period = parts[2]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    training = await get_training_by_id(training_id, callback.from_user.id)
    
    if not training:
        await callback.answer("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    user_settings = await get_user_settings(callback.from_user.id)
    distance_unit = user_settings.get('distance_unit', '–∫–º') if user_settings else '–∫–º'
    date_format = user_settings.get('date_format', 'DD.MM.YYYY') if user_settings else 'DD.MM.YYYY'
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    from datetime import datetime
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–æ–≤
    type_emoji = {
        '–∫—Ä–æ—Å—Å': 'üèÉ',
        '–ø–ª–∞–≤–∞–Ω–∏–µ': 'üèä',
        '–≤–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞': 'üö¥',
        '—Å–∏–ª–æ–≤–∞—è': 'üí™',
        '–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è': '‚ö°'
    }
    
    t_type = training['type']
    emoji = type_emoji.get(t_type, 'üìù')
    date = DateFormatter.format_date(training['date'], date_format)
    
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    detail_text = (
        f"{emoji} *–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ*\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üìÖ *–î–∞—Ç–∞:* {date}\n"
        f"üèãÔ∏è *–¢–∏–ø:* {t_type.capitalize()}\n"
    )
    
    # –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    if training.get('time'):
        detail_text += f"‚è± *–í—Ä–µ–º—è:* {training['time']}\n"
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if t_type == '–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è':
        # –î–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π - –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–±—ä–µ–º
        if training.get('calculated_volume'):
            detail_text += f"üìè *–û–±—ä–µ–º:* {format_distance(training['calculated_volume'], distance_unit)}\n"
        
        if training.get('intervals'):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø –æ—Ç—Ä–µ–∑–∫–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            from utils.interval_calculator import calculate_average_interval_pace
            avg_pace_intervals = calculate_average_interval_pace(training['intervals'])
            if avg_pace_intervals:
                detail_text += f"‚ö° *–°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø –æ—Ç—Ä–µ–∑–∫–æ–≤:* {avg_pace_intervals}\n"
            
            detail_text += f"\nüìã *–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n```\n{training['intervals']}\n```\n"
    
    elif t_type == '—Å–∏–ª–æ–≤–∞—è':
        # –î–ª—è —Å–∏–ª–æ–≤–æ–π - —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        if training.get('exercises'):
            detail_text += f"\nüí™ *–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:*\n```\n{training['exercises']}\n```\n"
    
    else:
        # –î–ª—è –∫—Ä–æ—Å—Å–∞, –ø–ª–∞–≤–∞–Ω–∏—è, –≤–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –∏ —Ç–µ–º–ø
        if training.get('distance'):
            if t_type == '–ø–ª–∞–≤–∞–Ω–∏–µ':
                detail_text += f"üìè *–î–∏—Å—Ç–∞–Ω—Ü–∏—è:* {format_swimming_distance(training['distance'], distance_unit)}\n"
            else:
                detail_text += f"üìè *–î–∏—Å—Ç–∞–Ω—Ü–∏—è:* {format_distance(training['distance'], distance_unit)}\n"
        
        if training.get('avg_pace'):
            pace_unit = training.get('pace_unit', '')
            if t_type == '–≤–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞':
                detail_text += f"üö¥ *–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å:* {training['avg_pace']} {pace_unit}\n"
            else:
                detail_text += f"‚ö° *–°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø:* {training['avg_pace']} {pace_unit}\n"
    
    # –ü—É–ª—å—Å (–¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤)
    if training.get('avg_pulse'):
        detail_text += f"‚ù§Ô∏è *–°—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å:* {training['avg_pulse']} —É–¥/–º–∏–Ω\n"
    
    if training.get('max_pulse'):
        detail_text += f"üíó *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å:* {training['max_pulse']} —É–¥/–º–∏–Ω\n"
    
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    if training.get('comment'):
        detail_text += f"\nüí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:*\n_{training['comment']}_\n"
    
    # –£—Å—Ç–∞–ª–æ—Å—Ç—å
    if training.get('fatigue_level'):
        detail_text += f"\nüò¥ *–£—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–ª–æ—Å—Ç–∏:* {training['fatigue_level']}/10\n"
    
    detail_text += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    # –ù–û–í–´–ô –ö–û–î: –ü–µ—Ä–µ–¥–∞–µ–º training_id –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        await callback.message.edit_text(
            detail_text,
            parse_mode="Markdown",
            reply_markup=get_training_detail_keyboard(period, training_id=training_id)  # –ù–û–í–´–ô –ö–û–î: –î–æ–±–∞–≤–ª—è–µ–º training_id
        )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            detail_text,
            parse_mode="Markdown",
            reply_markup=get_training_detail_keyboard(period, training_id=training_id)  # –ù–û–í–´–ô –ö–û–î: –î–æ–±–∞–≤–ª—è–µ–º training_id
        )
    
    await callback.answer()

@router.callback_query(F.data == "back_to_periods")
async def back_to_periods(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–æ–≤"""
    await callback.message.edit_text(
        "üìä *–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        parse_mode="Markdown",
        reply_markup=get_period_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("back_to_list:"))
async def back_to_list(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∏–∑ callback_data
    period = callback.data.split(":")[1]

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    user_settings = await get_user_settings(callback.from_user.id)
    date_format = user_settings.get('date_format', 'DD.MM.YYYY') if user_settings else 'DD.MM.YYYY'

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    trainings = await get_trainings_by_period(callback.from_user.id, period)

    if not trainings:
        await callback.answer("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await callback.message.edit_text(
            "üìã *–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:*\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥",
            parse_mode="Markdown",
            reply_markup=get_trainings_list_keyboard(trainings, period, date_format)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É", show_alert=True)
        return
    
    await callback.answer()

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.delete()
    await callback.message.answer(
        "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer(
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ!\n\n"
        "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å:\n"
        "‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        "‚Ä¢ –°—É–º–º–∞—Ä–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é\n"
        "‚Ä¢ –°—Ä–µ–¥–Ω—é—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!"
    )

@router.message(F.text == "üìà –ì—Ä–∞—Ñ–∏–∫–∏")
async def show_graphs(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer("üìà –ì—Ä–∞—Ñ–∏–∫–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ!")

@router.message(F.text == "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
async def show_achievements(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–∑–∂–µ!")

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
    await cmd_help(message)

# ==================== –≠–ö–°–ü–û–†–¢ –í PDF ====================

@router.message(F.text == "üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF")
async def export_pdf_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF"""
    await message.answer(
        "üì• *–≠–∫—Å–ø–æ—Ä—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ PDF*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:",
        parse_mode="Markdown",
        reply_markup=get_export_period_keyboard()
    )

@router.callback_query(F.data.startswith("export_period:"))
async def process_export_period(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    period = callback.data.split(":")[1]
    
    from datetime import datetime, timedelta
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_settings = await get_user_settings(callback.from_user.id)
    date_format = user_settings.get('date_format', 'DD.MM.YYYY') if user_settings else 'DD.MM.YYYY'
    
    today = datetime.now().date()
    
    if period == "6months":
        # –ü–æ–ª–≥–æ–¥–∞ –Ω–∞–∑–∞–¥
        start_date = today - timedelta(days=180)
        end_date = today
        period_text = DateFormatter.format_date_range(start_date, end_date, date_format)
        
        await callback.message.edit_text(
            f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF –∑–∞ –ø–µ—Ä–∏–æ–¥:\n{period_text}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            parse_mode="Markdown"
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        await generate_and_send_pdf(
            callback.message,
            callback.from_user.id,
            start_date.strftime('%Y-%m-%d'),
            end_date.strftime('%Y-%m-%d'),
            period_text
        )
        
    elif period == "year":
        # –ì–æ–¥ –Ω–∞–∑–∞–¥
        start_date = today - timedelta(days=365)
        end_date = today
        period_text = DateFormatter.format_date_range(start_date, end_date, date_format)
        
        await callback.message.edit_text(
            f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF –∑–∞ –ø–µ—Ä–∏–æ–¥:\n{period_text}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            parse_mode="Markdown"
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        await generate_and_send_pdf(
            callback.message,
            callback.from_user.id,
            start_date.strftime('%Y-%m-%d'),
            end_date.strftime('%Y-%m-%d'),
            period_text
        )
        
    elif period == "custom":
        # –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        await callback.message.edit_text(
            f"üìÖ *–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥*\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è",
            parse_mode="Markdown"
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        calendar = CalendarKeyboard.create_calendar(1, datetime.now(), "cal")
        await callback.message.answer(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É:",
            reply_markup=calendar
        )

        await state.set_state(ExportPDFStates.waiting_for_start_date)
    
    await callback.answer()

@router.message(ExportPDFStates.waiting_for_start_date)
async def process_export_start_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "‚ùå –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω",
            reply_markup=get_main_menu_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –¥–ª—è message.text
    if not message.text:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π",
            reply_markup=get_cancel_keyboard()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_settings = await get_user_settings(message.from_user.id)
    date_format = user_settings.get('date_format', 'DD.MM.YYYY') if user_settings else 'DD.MM.YYYY'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    date_pattern = DateFormatter.get_validation_pattern(date_format)
    match = re.match(date_pattern, message.text.strip())
    
    if not match:
        format_desc = DateFormatter.get_format_description(date_format)
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format_desc}"
        )
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    start_date = DateFormatter.parse_date(message.text.strip(), date_format)
    
    if start_date is None:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞!\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∞—Ç—É"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –∏–∑ –±—É–¥—É—â–µ–≥–æ
    if start_date > datetime.now().date():
        await message.answer(
            "‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑ –±—É–¥—É—â–µ–≥–æ!\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É
    await state.update_data(start_date=start_date.strftime('%Y-%m-%d'))
    
    format_desc = DateFormatter.get_format_description(date_format)
    start_date_str = DateFormatter.format_date(start_date, date_format)
    await message.answer(
        f"‚úÖ –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: {start_date_str}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format_desc}",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(ExportPDFStates.waiting_for_end_date)

@router.message(ExportPDFStates.waiting_for_end_date)
async def process_export_end_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "‚ùå –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω",
            reply_markup=get_main_menu_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –¥–ª—è message.text
    if not message.text:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π",
            reply_markup=get_cancel_keyboard()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_settings = await get_user_settings(message.from_user.id)
    date_format = user_settings.get('date_format', 'DD.MM.YYYY') if user_settings else 'DD.MM.YYYY'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    date_pattern = DateFormatter.get_validation_pattern(date_format)
    match = re.match(date_pattern, message.text.strip())
    
    if not match:
        format_desc = DateFormatter.get_format_description(date_format)
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format_desc}"
        )
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    end_date = DateFormatter.parse_date(message.text.strip(), date_format)
    
    if end_date is None:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞!\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∞—Ç—É"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –∏–∑ –±—É–¥—É—â–µ–≥–æ
    if end_date > datetime.now().date():
        await message.answer(
            "‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑ –±—É–¥—É—â–µ–≥–æ!\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∏–∑ state
    data = await state.get_data()
    start_date_str = data['start_date']
    start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ >= –Ω–∞—á–∞–ª—å–Ω–æ–π
    if end_date < start_date:
        start_date_formatted = DateFormatter.format_date(start_date, date_format)
        await message.answer(
            f"‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π!\n\n"
            f"–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: {start_date_formatted}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –Ω–µ —Ä–∞–Ω—å—à–µ —ç—Ç–æ–π:"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
    period_text = DateFormatter.format_date_range(start_date, end_date, date_format)
    
    await message.answer(
        f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF –∑–∞ –ø–µ—Ä–∏–æ–¥:\n{period_text}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
    await generate_and_send_pdf(
        message,
        message.from_user.id,
        start_date_str,
        end_date.strftime('%Y-%m-%d'),
        period_text
    )
        
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
        
    

async def generate_and_send_pdf(message: Message, user_id: int, start_date: str, end_date: str, period_text: str):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PDF —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
        end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
        period_text: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        trainings = await get_trainings_by_custom_period(user_id, start_date, end_date)
        
        if not trainings:
            await message.answer(
                f"üì≠ –ó–∞ –ø–µ—Ä–∏–æ–¥ {period_text} –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥.",
                reply_markup=get_export_period_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await get_statistics_by_custom_period(user_id, start_date, end_date)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(trainings)} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
        pdf_buffer = await create_training_pdf(trainings, period_text, stats, user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ caption
        user_settings = await get_user_settings(user_id)
        distance_unit = user_settings.get('distance_unit', '–∫–º') if user_settings else '–∫–º'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"trainings_{start_date}_{end_date}.pdf"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç distance —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        total_distance = stats.get('total_distance', 0)
        distance_text = format_distance(total_distance, distance_unit) if total_distance else f"0 {distance_unit}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
        await message.answer_document(
            BufferedInputFile(pdf_buffer.read(), filename=filename),
            caption=f"üì• *–≠–∫—Å–ø–æ—Ä—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫*\n\n"
                    f"–ü–µ—Ä–∏–æ–¥: {period_text}\n"
                    f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {len(trainings)}\n"
                    f"–ö–∏–ª–æ–º–µ—Ç—Ä–∞–∂: {distance_text}",
            parse_mode="Markdown"
        )
        
        logger.info(f"PDF —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            "‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
            reply_markup=get_main_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {str(e)}", exc_info=True)
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF:\n{str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥.",
            reply_markup=get_main_menu_keyboard()
        )


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ê–õ–ï–ù–î–ê–†–Ø ====================

@router.callback_query(F.data.startswith("cal_1_select_"))
async def handle_calendar_date_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    parsed = CalendarKeyboard.parse_callback_data(callback.data)
    selected_date = parsed.get("date")

    if not selected_date:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –∏–∑ –±—É–¥—É—â–µ–≥–æ
    from datetime import timedelta
    utc_now = datetime.utcnow()
    moscow_now = utc_now + timedelta(hours=3)
    today = moscow_now.date()

    if selected_date.date() > today:
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏–∑ –±—É–¥—É—â–µ–≥–æ!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.from_user.id
    date_format = await get_user_date_format(user_id)
    date_str = DateFormatter.format_date(selected_date.date(), date_format)

    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
    if current_state == AddTrainingStates.waiting_for_date:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        await state.update_data(date=selected_date.date())

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
        try:
            await callback.message.delete()
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏

        await callback.message.answer(
            f"‚úÖ –î–∞—Ç–∞: {date_str}\n\n"
            "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n\n"
            "–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú:–°–°\n"
            "–ü—Ä–∏–º–µ—Ä—ã: 01:25:30 –∏–ª–∏ 25:15:45 (–¥–ª—è —É–ª—å—Ç—Ä–∞–º–∞—Ä–∞—Ñ–æ–Ω–æ–≤)",
            reply_markup=get_cancel_keyboard()
        )

        await state.set_state(AddTrainingStates.waiting_for_time)

    elif current_state == ExportPDFStates.waiting_for_start_date:
        # –≠–∫—Å–ø–æ—Ä—Ç PDF - –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
        await state.update_data(start_date=selected_date.date().strftime('%Y-%m-%d'))

        format_desc = DateFormatter.get_format_description(date_format)

        await callback.message.edit_text(
            f"‚úÖ –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: {date_str}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É"
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
        calendar = CalendarKeyboard.create_calendar(1, selected_date, "cal_end")
        await callback.message.answer(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É:",
            reply_markup=calendar
        )

        await state.set_state(ExportPDFStates.waiting_for_end_date)

    elif current_state == ExportPDFStates.waiting_for_end_date:
        # –≠–∫—Å–ø–æ—Ä—Ç PDF - –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∏–∑ state
        data = await state.get_data()
        start_date_str = data.get('start_date')

        if not start_date_str:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date()
        end_date = selected_date.date()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ >= –Ω–∞—á–∞–ª—å–Ω–æ–π
        if end_date < start_date:
            start_date_formatted = DateFormatter.format_date(start_date, date_format)
            await callback.answer(
                f"‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π ({start_date_formatted})!",
                show_alert=True
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
        period_text = DateFormatter.format_date_range(start_date, end_date, date_format)

        await callback.message.edit_text(
            f"‚úÖ –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞: {date_str}\n\n"
            f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF –∑–∞ –ø–µ—Ä–∏–æ–¥:\n{period_text}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        await generate_and_send_pdf(
            callback.message,
            callback.from_user.id,
            start_date_str,
            end_date.strftime('%Y-%m-%d'),
            period_text
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    await callback.answer()


@router.callback_query(F.data.startswith("cal_"))
async def handle_calendar_navigation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é"""
    # –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É cal_end_ –∏ cal_birth_ (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Å–≤–æ–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö)
    if callback.data.startswith("cal_end_") or callback.data.startswith("cal_birth_"):
        return

    # –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã (–æ–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ handle_calendar_date_selection)
    if callback.data.startswith("cal_1_select_"):
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏
    if callback.data == "cal_empty":
        await callback.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    new_keyboard = CalendarKeyboard.handle_navigation(callback.data, prefix="cal")

    if new_keyboard:
        try:
            await callback.message.edit_reply_markup(reply_markup=new_keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {str(e)}")

    await callback.answer()


@router.callback_query(F.data.startswith("cal_end_1_select_"))
async def handle_calendar_end_date_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    logger.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ cal_end_1_select_: {callback.data}")

    # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    parsed = CalendarKeyboard.parse_callback_data(callback.data.replace("cal_end_", "cal_"))
    selected_date = parsed.get("date")

    if not selected_date:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –∏–∑ –±—É–¥—É—â–µ–≥–æ
    from datetime import timedelta
    utc_now = datetime.utcnow()
    moscow_now = utc_now + timedelta(hours=3)
    today = moscow_now.date()

    if selected_date.date() > today:
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏–∑ –±—É–¥—É—â–µ–≥–æ!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∏–∑ state
    data = await state.get_data()
    start_date_str = data.get('start_date')

    if not start_date_str:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date()
    end_date = selected_date.date()

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.from_user.id
    date_format = await get_user_date_format(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ >= –Ω–∞—á–∞–ª—å–Ω–æ–π
    if end_date < start_date:
        start_date_formatted = DateFormatter.format_date(start_date, date_format)
        await callback.answer(
            f"‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π ({start_date_formatted})!",
            show_alert=True
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
    period_text = DateFormatter.format_date_range(start_date, end_date, date_format)
    date_str = DateFormatter.format_date(end_date, date_format)

    await callback.message.edit_text(
        f"‚úÖ –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞: {date_str}\n\n"
        f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF –∑–∞ –ø–µ—Ä–∏–æ–¥:\n{period_text}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
    await generate_and_send_pdf(
        callback.message,
        callback.from_user.id,
        start_date_str,
        end_date.strftime('%Y-%m-%d'),
        period_text
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await callback.answer()


@router.callback_query(F.data.startswith("cal_end_"))
async def handle_calendar_end_date_navigation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã"""
    logger.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ cal_end_ –Ω–∞–≤–∏–≥–∞—Ü–∏—è: {callback.data}")

    # –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã (–æ–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ handle_calendar_end_date_selection)
    if callback.data.startswith("cal_end_1_select_"):
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏
    if callback.data == "cal_end_empty":
        await callback.answer()
        return

    # –≠—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
    callback_data_normalized = callback.data.replace("cal_end_", "cal_")
    new_keyboard = CalendarKeyboard.handle_navigation(callback_data_normalized, prefix="cal")

    if new_keyboard:
        # –ú–µ–Ω—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ cal_end –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
        new_keyboard_json = new_keyboard.model_dump()
        for row in new_keyboard_json.get('inline_keyboard', []):
            for button in row:
                if 'callback_data' in button and button['callback_data'].startswith('cal_'):
                    button['callback_data'] = button['callback_data'].replace('cal_', 'cal_end_', 1)

        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º–∏ callback_data
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        new_rows = []
        for row in new_keyboard_json['inline_keyboard']:
            new_row = []
            for btn in row:
                new_row.append(InlineKeyboardButton(
                    text=btn['text'],
                    callback_data=btn['callback_data']
                ))
            new_rows.append(new_row)

        final_keyboard = InlineKeyboardMarkup(inline_keyboard=new_rows)

        try:
            await callback.message.edit_reply_markup(reply_markup=final_keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {str(e)}")

    await callback.answer()