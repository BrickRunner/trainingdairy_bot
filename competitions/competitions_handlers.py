"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π
"""

import logging
from datetime import datetime, date
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.fsm import CompetitionStates
from competitions.competitions_keyboards import (
    get_competitions_main_menu,
    get_competition_card_keyboard,
    get_distance_selection_keyboard,
    get_my_competitions_menu,
    get_my_competition_keyboard,
    get_cancel_keyboard,
    get_result_input_keyboard,
    format_competition_distance,
    format_time_until_competition
)
from competitions.competitions_queries import (
    get_upcoming_competitions,
    get_competition,
    register_for_competition,
    unregister_from_competition,
    is_user_registered,
    get_user_competitions,
    add_competition_result,
    get_competition_participants_count,
    get_user_personal_records
)
from bot.keyboards import get_main_menu_keyboard
from utils.time_formatter import normalize_time

router = Router()
logger = logging.getLogger(__name__)


# ========== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –°–û–†–ï–í–ù–û–í–ê–ù–ò–ô ==========

@router.callback_query(F.data == "competitions")
async def show_competitions_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π"""
    await state.clear()

    text = (
        "üèÜ <b>–°–û–†–ï–í–ù–û–í–ê–ù–ò–Ø</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ù–∞–π—Ç–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ä–∞—Ñ–æ–Ω—ã –∏ –∑–∞–±–µ–≥–∏\n"
        "‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
        "‚Ä¢ –í–µ—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é —É—á–∞—Å—Ç–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_competitions_main_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "comp:menu")
async def return_to_comp_menu(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π"""
    await show_competitions_menu(callback, state)


# ========== –ü–†–ï–î–°–¢–û–Ø–©–ò–ï –°–û–†–ï–í–ù–û–í–ê–ù–ò–Ø ==========

@router.callback_query(F.data == "comp:upcoming")
async def show_upcoming_competitions(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π"""
    await state.clear()

    competitions = await get_upcoming_competitions(limit=10)

    if not competitions:
        text = (
            "üìÖ <b>–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è</b>\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π.\n\n"
            "üí° –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ Russia Running API.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –ø–æ –≥–æ—Ä–æ–¥—É –∏ –¥–∞—Ç–µ."
        )

        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥—É –∏ –¥–∞—Ç–µ", callback_data="comp:search")
        )
        builder.row(
            InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="comp:create_custom")
        )
        builder.row(
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="comp:menu")
        )

        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    else:
        text = "üìÖ <b>–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è</b>\n\n"

        for i, comp in enumerate(competitions[:5], 1):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            try:
                comp_date = datetime.strptime(comp['date'], '%Y-%m-%d')
                date_str = comp_date.strftime('%d.%m.%Y')
            except:
                date_str = comp['date']

            time_until = format_time_until_competition(comp['date'])

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
            try:
                import json
                distances = json.loads(comp['distances']) if isinstance(comp['distances'], str) else comp['distances']
                distances_str = ', '.join([format_competition_distance(float(d)) for d in distances])
            except:
                distances_str = '–î–∏—Å—Ç–∞–Ω—Ü–∏–∏ —É—Ç–æ—á–Ω—è—é—Ç—Å—è'

            text += (
                f"{i}. <b>{comp['name']}</b>\n"
                f"   üìç {comp.get('city', '–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"   üìÖ {date_str} ({time_until})\n"
                f"   üèÉ {distances_str}\n\n"
            )

        # –°–æ–∑–¥–∞—ë–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º–∏
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()

        for i, comp in enumerate(competitions[:5], 1):
            builder.row(
                InlineKeyboardButton(
                    text=f"{i}. {comp['name'][:40]}...",
                    callback_data=f"comp:view:{comp['id']}"
                )
            )

        builder.row(
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥—É –∏ –¥–∞—Ç–µ", callback_data="comp:search")
        )
        builder.row(
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="comp:menu")
        )

        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )

    await callback.answer()


@router.callback_query(F.data.startswith("comp:view:"))
async def view_competition(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏"""
    competition_id = int(callback.data.split(":")[2])
    user_id = callback.from_user.id

    comp = await get_competition(competition_id)
    if not comp:
        await callback.answer("‚ùå –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_registered = await is_user_registered(user_id, competition_id)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participants_count = await get_competition_participants_count(competition_id)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    try:
        comp_date = datetime.strptime(comp['date'], '%Y-%m-%d')
        date_str = comp_date.strftime('%d %B %Y')
        month_names = {
            1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è',
            5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞',
            9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
        }
        date_str = comp_date.strftime(f'%d {month_names[comp_date.month]} %Y')
    except:
        date_str = comp['date']

    time_until = format_time_until_competition(comp['date'])

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
    try:
        distances = comp.get('distances', [])
        if isinstance(distances, str):
            import json
            distances = json.loads(distances)

        distances_list = []
        for d in distances:
            distances_list.append(f"  ‚Ä¢ {format_competition_distance(float(d))}")
        distances_str = '\n'.join(distances_list) if distances_list else '  –î–∏—Å—Ç–∞–Ω—Ü–∏–∏ —É—Ç–æ—á–Ω—è—é—Ç—Å—è'
    except Exception as e:
        logger.error(f"Error parsing distances: {e}")
        distances_str = '  –î–∏—Å—Ç–∞–Ω—Ü–∏–∏ —É—Ç–æ—á–Ω—è—é—Ç—Å—è'

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
    text = (
        f"üèÉ <b>{comp['name']}</b>\n"
        f"{'=' * 40}\n\n"
        f"üìÖ –î–∞—Ç–∞: {date_str}\n"
        f"‚è≥ {time_until}\n"
        f"üìç –ú–µ—Å—Ç–æ: {comp.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {comp.get('organizer', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        f"üèÉ <b>–î–∏—Å—Ç–∞–Ω—Ü–∏–∏:</b>\n{distances_str}\n\n"
    )

    if comp.get('description'):
        text += f"üìù {comp['description']}\n\n"

    if participants_count > 0:
        text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –±–æ—Ç–∞: {participants_count}\n\n"

    if is_registered:
        text += "‚úÖ <b>–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ</b>"
    else:
        text += "‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ"

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()

    has_multiple_distances = len(distances) > 1 if distances else False

    if is_registered:
        builder.row(
            InlineKeyboardButton(
                text="‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã",
                callback_data=f"comp:my_registration:{competition_id}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–∏–µ",
                callback_data=f"comp:unregister_confirm:{competition_id}"
            )
        )
    else:
        if has_multiple_distances:
            builder.row(
                InlineKeyboardButton(
                    text="‚úçÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è (–≤—ã–±—Ä–∞—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü–∏—é)",
                    callback_data=f"comp:select_distance:{competition_id}"
                )
            )
        elif distances and len(distances) == 1:
            builder.row(
                InlineKeyboardButton(
                    text="‚úçÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
                    callback_data=f"comp:register_single:{competition_id}:{distances[0]}"
                )
            )

    if comp.get('official_url'):
        builder.row(
            InlineKeyboardButton(
                text="üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç",
                url=comp['official_url']
            )
        )

    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="comp:upcoming")
    )

    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


# ========== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–ê –°–û–†–ï–í–ù–û–í–ê–ù–ò–ï ==========

@router.callback_query(F.data.startswith("comp:select_distance:"))
async def select_distance(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    competition_id = int(callback.data.split(":")[2])

    comp = await get_competition(competition_id)
    if not comp:
        await callback.answer("‚ùå –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    try:
        distances = comp.get('distances', [])
        if isinstance(distances, str):
            import json
            distances = json.loads(distances)

        distances = [float(d) for d in distances]
    except:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏—Å—Ç–∞–Ω—Ü–∏–π", show_alert=True)
        return

    text = (
        f"üèÉ <b>{comp['name']}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:"
    )

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∏—Å—Ç–∞–Ω—Ü–∏—è–º–∏
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()

    for distance in sorted(distances, reverse=True):
        builder.row(
            InlineKeyboardButton(
                text=format_competition_distance(distance),
                callback_data=f"comp:register_dist:{competition_id}:{distance}"
            )
        )

    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"comp:view:{competition_id}")
    )

    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("comp:register_single:"))
async def register_single_distance(callback: CallbackQuery, state: FSMContext):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ —Å –æ–¥–Ω–æ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–µ–π"""
    parts = callback.data.split(":")
    competition_id = int(parts[2])
    distance = float(parts[3])

    await register_user_for_competition(callback, state, competition_id, distance)


@router.callback_query(F.data.startswith("comp:register_dist:"))
async def register_with_distance(callback: CallbackQuery, state: FSMContext):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–µ–π"""
    parts = callback.data.split(":")
    competition_id = int(parts[2])
    distance = float(parts[3])

    await register_user_for_competition(callback, state, competition_id, distance)


async def register_user_for_competition(callback: CallbackQuery, state: FSMContext, competition_id: int, distance: float):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ"""
    user_id = callback.from_user.id

    comp = await get_competition(competition_id)
    if not comp:
        await callback.answer("‚ùå –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await register_for_competition(user_id, competition_id, distance)

        text = (
            f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n"
            f"üèÉ –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ: {comp['name']}\n"
            f"üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {format_competition_distance(distance)}\n"
            f"üìÖ –î–∞—Ç–∞: {comp['date']}\n\n"
            f"üí™ –ñ–µ–ª–∞–µ–º —É–¥–∞—á–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏!\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è'."
        )

        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="üìä –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è",
                callback_data=f"comp:set_target:{competition_id}:{distance}"
            )
        )
        builder.row(
            InlineKeyboardButton(text="üèÜ –ú–æ–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è", callback_data="comp:my")
        )
        builder.row(
            InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="comp:menu")
        )

        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        await callback.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")

    except Exception as e:
        logger.error(f"Error registering user: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)


# ========== –ú–û–ò –°–û–†–ï–í–ù–û–í–ê–ù–ò–Ø ==========

@router.callback_query(F.data == "comp:my")
async def show_my_competitions(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –¥–µ–ª–µ–Ω–∏—è)"""
    user_id = callback.from_user.id

    competitions = await get_user_competitions(user_id, status_filter='upcoming')

    if not competitions:
        text = (
            "‚úÖ <b>–ú–û–ò –°–û–†–ï–í–ù–û–í–ê–ù–ò–Ø</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π.\n\n"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ù–∞–π—Ç–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è' —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∑–∞–±–µ–≥!"
        )
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è", callback_data="comp:search")
        )
        builder.row(
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="comp:menu")
        )

        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    else:
        text = "‚úÖ <b>–ú–û–ò –°–û–†–ï–í–ù–û–í–ê–ù–ò–Ø</b>\n\n"

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from competitions.competitions_utils import format_competition_distance as format_dist_with_units, format_competition_date

        for i, comp in enumerate(competitions[:10], 1):
            time_until = format_time_until_competition(comp['date'])

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é —Å —É—á–µ—Ç–æ–º –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            dist_str = await format_dist_with_units(comp['distance'], user_id)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            date_str = await format_competition_date(comp['date'], user_id)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è
            target_time = comp.get('target_time')
            if target_time is None or target_time == 'None' or target_time == '':
                target_time_str = '–ù–µ—Ç —Ü–µ–ª–∏'
            else:
                target_time_str = target_time

            text += (
                f"{i}. <b>{comp['name']}</b>\n"
                f"   üìè {dist_str}\n"
                f"   üìÖ {date_str} ({time_until})\n"
                f"   üéØ –¶–µ–ª—å: {target_time_str}\n\n"
            )

        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()

        for comp in competitions[:10]:
            builder.row(
                InlineKeyboardButton(
                    text=f"{comp['name'][:40]}..." if len(comp['name']) > 40 else comp['name'],
                    callback_data=f"comp:my_view:{comp['id']}:{comp['distance']}"
                )
            )

        builder.row(
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="comp:menu")
        )

        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )

    await callback.answer()


@router.callback_query(F.data.startswith("comp:my_view:"))
async def view_my_competition(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –º–æ–µ–≥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"""
    user_id = callback.from_user.id
    parts = callback.data.split(":")
    competition_id = int(parts[2])
    distance = float(parts[3])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏
    competition = await get_competition(competition_id)

    if not competition:
        await callback.answer("‚ùå –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from competitions.competitions_queries import get_user_competitions
    user_comps = await get_user_competitions(user_id)

    # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    registration = None
    for comp in user_comps:
        if comp['id'] == competition_id and comp.get('distance') == distance:
            registration = comp
            break

    if not registration:
        await callback.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from competitions.competitions_utils import format_competition_distance as format_dist_with_units, format_competition_date

    time_until = format_time_until_competition(competition['date'])
    dist_str = await format_dist_with_units(distance, user_id)
    date_str = await format_competition_date(competition['date'], user_id)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è
    target_time = registration.get('target_time')
    if target_time is None or target_time == 'None' or target_time == '':
        target_time_str = '–ù–µ—Ç —Ü–µ–ª–∏'
    else:
        target_time_str = target_time

    text = (
        f"üèÉ <b>{competition['name']}</b>\n\n"
        f"üìç –ì–æ—Ä–æ–¥: {competition.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìÖ –î–∞—Ç–∞: {date_str}\n"
        f"‚è∞ –î–æ —Å—Ç–∞—Ä—Ç–∞: {time_until}\n\n"
        f"üìè –í–∞—à–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {dist_str}\n"
        f"üéØ –¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è: {target_time_str}\n\n"
    )

    if competition.get('description'):
        text += f"‚ÑπÔ∏è {competition['description']}\n\n"

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    builder.row(
        InlineKeyboardButton(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è",
            callback_data=f"comp:edit_target:{competition_id}:{distance}"
        )
    )

    builder.row(
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–∏–µ",
            callback_data=f"comp:cancel_registration:{competition_id}:{distance}"
        )
    )

    if competition.get('official_url'):
        builder.row(
            InlineKeyboardButton(
                text="üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç",
                url=competition['official_url']
            )
        )

    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="comp:my")
    )

    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


# ========== –ú–û–ò –†–ï–ó–£–õ–¨–¢–ê–¢–´ ==========

@router.callback_query(F.data == "comp:my_results")
async def show_my_results(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—ã–µ —Ä–µ–∫–æ—Ä–¥—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    from competitions.statistics_queries import get_user_competition_stats
    stats = await get_user_competition_stats(user_id)

    # –ü–æ–ª—É—á–∞–µ–º –ª–∏—á–Ω—ã–µ —Ä–µ–∫–æ—Ä–¥—ã
    records = await get_user_personal_records(user_id)

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
    finished_comps = await get_user_competitions(user_id, status_filter='finished')

    if not records and not finished_comps:
        text = (
            "üèÖ <b>–ú–û–ò –†–ï–ó–£–õ–¨–¢–ê–¢–´</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ª–∏—á–Ω—ã—Ö —Ä–µ–∫–æ—Ä–¥–æ–≤.\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–≤–æ–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å!"
        )
    else:
        text = "üèÖ <b>–ú–û–ò –†–ï–ó–£–õ–¨–¢–ê–¢–´</b>\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if stats and stats['total_competitions'] > 0:
            text += "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n"
            text += f"–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π: {stats['total_completed']}"

            if stats.get('total_distance_km', 0) > 0:
                text += f" ‚Ä¢ –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {stats['total_distance_km']:.1f} –∫–º"
            text += "\n\n"

        # –õ–∏—á–Ω—ã–µ —Ä–µ–∫–æ—Ä–¥—ã
        if records:
            text += "üèÜ <b>–õ–ò–ß–ù–´–ï –†–ï–ö–û–†–î–´</b>\n\n"

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
            sorted_records = sorted(records.items(), key=lambda x: x[0])

            for distance, record in sorted_records:
                dist_name = format_competition_distance(distance)
                text += f"üèÉ <b>{dist_name}</b>: {record['best_time']}"
                if record.get('competition_name'):
                    comp_name_short = record['competition_name'][:20] + "..." if len(record['competition_name']) > 20 else record['competition_name']
                    text += f" ({comp_name_short})"
                text += "\n"

            text += "\n"

        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
        if finished_comps:
            text += "üèÅ <b>–ó–ê–í–ï–†–®–ï–ù–ù–´–ï –°–û–†–ï–í–ù–û–í–ê–ù–ò–Ø</b>\n\n"

            for i, comp in enumerate(finished_comps[:5], 1):
                dist_str = format_competition_distance(comp['distance'])

                text += f"{i}. <b>{comp['name']}</b>\n"
                text += f"   üìè {dist_str} ‚Ä¢ üìÖ {comp['date']}\n"

                if comp.get('finish_time'):
                    normalized_time = normalize_time(comp['finish_time'])
                    result_line = f"   ‚è±Ô∏è {normalized_time}"
                    if comp.get('place_overall'):
                        result_line += f" ‚Ä¢ üèÜ {comp['place_overall']} –º–µ—Å—Ç–æ"
                    text += result_line + "\n"

                text += "\n"

            if len(finished_comps) > 5:
                text += f"<i>... –∏ –µ—â—ë {len(finished_comps) - 5} —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π</i>\n"

    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π
    if finished_comps:
        for comp in finished_comps[:5]:
            builder.row(
                InlineKeyboardButton(
                    text=f"üìä {comp['name'][:35]}..." if len(comp['name']) > 35 else f"üìä {comp['name']}",
                    callback_data=f"comp:view_result:{comp['id']}"
                )
            )

    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—à–µ–¥—à–µ–≥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—à–µ–¥—à–µ–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ", callback_data="comp:add_past")
    )
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="comp:menu")
    )

    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


# ========== –î–û–ë–ê–í–õ–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê ==========

@router.callback_query(F.data.startswith("comp:add_result:"))
async def start_add_result(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    competition_id = int(callback.data.split(":")[-1])
    user_id = callback.message.chat.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏
    comp = await get_competition(competition_id)
    if not comp:
        await callback.answer("‚ùå –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(result_competition_id=competition_id)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è
    text = (
        f"üèÜ <b>{comp['name']}</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ñ–∏–Ω–∏—à–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:–°–° –∏–ª–∏ –ú–ú:–°–°\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 1:23:45 –∏–ª–∏ 42:30"
    )

    await callback.message.answer(
        text,
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(CompetitionStates.waiting_for_finish_time)
    await callback.answer()


@router.message(CompetitionStates.waiting_for_finish_time)
async def process_finish_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∏–Ω–∏—à–Ω–æ–µ –≤—Ä–µ–º—è"""
    from utils.time_formatter import validate_time_format

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()
        return

    time_text = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
    if not validate_time_format(time_text):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú:–°–° –∏–ª–∏ –ú–ú:–°–°\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 1:23:45 –∏–ª–∏ 42:30"
        )
        return

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
    normalized_time = normalize_time(time_text)
    await state.update_data(result_finish_time=normalized_time)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Å—Ç–æ –≤ –æ–±—â–µ–º –∑–∞—á—ë—Ç–µ
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ –≤ –æ–±—â–µ–º –∑–∞—á—ë—Ç–µ (—á–∏—Å–ª–æ)\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\" –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å",
        reply_markup=get_result_input_keyboard()
    )
    await state.set_state(CompetitionStates.waiting_for_place_overall)


@router.message(CompetitionStates.waiting_for_place_overall)
async def process_place_overall(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ—Å—Ç–æ –≤ –æ–±—â–µ–º –∑–∞—á—ë—Ç–µ"""

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()
        return

    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(result_place_overall=None)
    else:
        try:
            place = int(message.text.strip())
            if place <= 0:
                await message.answer("‚ùå –ú–µ—Å—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                return
            await state.update_data(result_place_overall=place)
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\""
            )
            return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Å—Ç–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ –≤ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—á–∏—Å–ª–æ)\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\" –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å",
        reply_markup=get_result_input_keyboard()
    )
    await state.set_state(CompetitionStates.waiting_for_place_age)


@router.message(CompetitionStates.waiting_for_place_age)
async def process_place_age_category(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ—Å—Ç–æ –≤ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()
        return

    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(result_place_age=None)
    else:
        try:
            place = int(message.text.strip())
            if place <= 0:
                await message.answer("‚ùå –ú–µ—Å—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                return
            await state.update_data(result_place_age=place)
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\""
            )
            return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    data = await state.get_data()
    user_id = message.from_user.id
    competition_id = data['result_competition_id']

    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    from competitions.competitions_queries import get_user_competition_registration
    registration = await get_user_competition_registration(user_id, competition_id)
    if not registration:
        await message.answer(
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —ç—Ç–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()
        return

    distance = registration['distance']

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    success = await add_competition_result(
        user_id=user_id,
        competition_id=competition_id,
        distance=distance,
        finish_time=data['result_finish_time'],
        place_overall=data.get('result_place_overall'),
        place_age_category=data.get('result_place_age')
    )

    if success:
        comp = await get_competition(competition_id)
        text = (
            "‚úÖ <b>–†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–ë–ê–í–õ–ï–ù!</b>\n\n"
            f"üèÜ <b>{comp['name']}</b>\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è: {data['result_finish_time']}\n"
        )
        if data.get('result_place_overall'):
            text += f"üèÜ –ú–µ—Å—Ç–æ –æ–±—â–µ–µ: {data['result_place_overall']}\n"
        if data.get('result_place_age'):
            text += f"üèÜ –ú–µ—Å—Ç–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {data['result_place_age']}\n"

        await message.answer(
            text,
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
            reply_markup=get_main_menu_keyboard()
        )

    await state.clear()


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º InlineKeyboardButton –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ
from aiogram.types import InlineKeyboardButton

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ comp:search –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ search_competitions_handlers.py
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ comp:statistics –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ custom_competitions_handlers.py
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ comp:create_custom –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ custom_competitions_handlers.py
