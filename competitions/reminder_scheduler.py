"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö
"""

import asyncio
import aiosqlite
import os
import logging
from datetime import datetime, timedelta, date
from typing import Optional

DB_PATH = os.getenv('DB_PATH', 'database.sqlite')
logger = logging.getLogger(__name__)


async def create_reminders_for_competition(user_id: int, competition_id: int, comp_date_str: str):
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        competition_id: ID —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
        comp_date_str: –î–∞—Ç–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    """

    try:
        comp_date = datetime.strptime(comp_date_str, '%Y-%m-%d').date()
        today = date.today()

        # –¢–∏–ø—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –∑–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
        reminder_periods = {
            '30days': 30,
            '14days': 14,
            '7days': 7,
            '3days': 3,
            '1day': 1
        }

        async with aiosqlite.connect(DB_PATH) as db:
            for reminder_type, days_before in reminder_periods.items():
                scheduled_date = comp_date - timedelta(days=days_before)

                # –°–æ–∑–¥–∞—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞—Ç–∞ –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–∞
                if scheduled_date >= today:
                    await db.execute(
                        """
                        INSERT OR IGNORE INTO competition_reminders
                        (user_id, competition_id, reminder_type, scheduled_date, sent)
                        VALUES (?, ?, ?, ?, 0)
                        """,
                        (user_id, competition_id, reminder_type, scheduled_date.strftime('%Y-%m-%d'))
                    )

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø–æ—Å–ª–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è)
            result_reminder_date = comp_date + timedelta(days=1)
            await db.execute(
                """
                INSERT OR IGNORE INTO competition_reminders
                (user_id, competition_id, reminder_type, scheduled_date, sent)
                VALUES (?, ?, ?, ?, 0)
                """,
                (user_id, competition_id, 'result_input', result_reminder_date.strftime('%Y-%m-%d'))
            )

            await db.commit()

        logger.info(f"Created reminders for user {user_id}, competition {competition_id}")

    except Exception as e:
        logger.error(f"Error creating reminders: {e}")


async def get_pending_reminders(today: Optional[date] = None) -> list:
    """
    –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è

    Args:
        today: –î–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–≥–æ–¥–Ω—è)

    Returns:
        –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    """

    if today is None:
        today = date.today()

    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row

        async with db.execute(
            """
            SELECT
                r.id,
                r.user_id,
                r.competition_id,
                r.reminder_type,
                r.scheduled_date,
                c.name as competition_name,
                c.date as competition_date,
                c.type as competition_type,
                cp.distance,
                cp.target_time
            FROM competition_reminders r
            JOIN competitions c ON r.competition_id = c.id
            LEFT JOIN competition_participants cp ON
                r.competition_id = cp.competition_id AND
                r.user_id = cp.participant_id
            WHERE r.scheduled_date <= ? AND r.sent = 0
            ORDER BY r.scheduled_date, r.user_id
            """,
            (today.strftime('%Y-%m-%d'),)
        ) as cursor:
            rows = await cursor.fetchall()
            return [dict(row) for row in rows]


async def mark_reminder_as_sent(reminder_id: int):
    """
    –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ

    Args:
        reminder_id: ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    """

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            """
            UPDATE competition_reminders
            SET sent = 1, sent_at = CURRENT_TIMESTAMP
            WHERE id = ?
            """,
            (reminder_id,)
        )
        await db.commit()


async def send_competition_reminders(bot):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º)

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """

    try:
        reminders = await get_pending_reminders()

        if not reminders:
            logger.debug("No pending competition reminders")
            return

        logger.info(f"Found {len(reminders)} pending competition reminders")

        for reminder in reminders:
            try:
                await send_single_reminder(bot, reminder)
                await mark_reminder_as_sent(reminder['id'])
                await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏

            except Exception as e:
                logger.error(f"Error sending reminder {reminder['id']}: {e}")

        logger.info(f"Sent {len(reminders)} competition reminders")

    except Exception as e:
        logger.error(f"Error in send_competition_reminders: {e}")


async def send_single_reminder(bot, reminder: dict):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        reminder: –î–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    """

    user_id = reminder['user_id']
    reminder_type = reminder['reminder_type']
    comp_name = reminder['competition_name']
    comp_date_str = reminder['competition_date']

    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
    comp_date = datetime.strptime(comp_date_str, '%Y-%m-%d').date()
    days_until = (comp_date - date.today()).days

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if reminder_type == 'result_input':
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–≤–æ–¥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        text = (
            "üèÅ <b>–ö–ê–ö –ü–†–û–®–õ–û –°–û–†–ï–í–ù–û–í–ê–ù–ò–ï?</b>\n\n"
            f"–í—á–µ—Ä–∞ –±—ã–ª–æ –≤–∞—à–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ:\n"
            f"üèÜ <b>{comp_name}</b>\n\n"
            f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!\n"
            f"–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å."
        )

        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                callback_data=f"comp:add_result:{reminder['competition_id']}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="‚ùå –ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª",
                callback_data=f"comp:didnt_participate:{reminder['competition_id']}"
            )
        )

        await bot.send_message(
            user_id,
            text,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )

    else:
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏
        day_word = "–¥–µ–Ω—å" if days_until == 1 else "–¥–Ω—è" if 2 <= days_until <= 4 else "–¥–Ω–µ–π"

        text = (
            f"‚è∞ <b>–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –°–û–†–ï–í–ù–û–í–ê–ù–ò–ò</b>\n\n"
            f"–î–æ —Å—Ç–∞—Ä—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å <b>{days_until} {day_word}</b>!\n\n"
            f"üèÜ <b>{comp_name}</b>\n"
            f"üìÖ –î–∞—Ç–∞: {comp_date.strftime('%d.%m.%Y')}\n"
        )

        if reminder.get('distance'):
            text += f"üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {reminder['distance']} –∫–º\n"

        if reminder.get('target_time'):
            text += f"üéØ –í–∞—à–∞ —Ü–µ–ª—å: {reminder['target_time']}\n"

        text += "\nüí™ –£–¥–∞—á–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏!"

        await bot.send_message(user_id, text, parse_mode="HTML")

    logger.info(f"Sent {reminder_type} reminder to user {user_id} for competition {reminder['competition_id']}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ main.py)
async def schedule_competition_reminders(bot):
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–∞–∑ –≤ –¥–µ–Ω—å)

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """

    logger.info("Competition reminders scheduler started")

    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 9:00
            now = datetime.now()
            if now.hour == 9 and now.minute < 5:
                await send_competition_reminders(bot)

            # –ñ–¥—ë–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(300)

        except Exception as e:
            logger.error(f"Error in competition reminders scheduler: {e}")
            await asyncio.sleep(300)
