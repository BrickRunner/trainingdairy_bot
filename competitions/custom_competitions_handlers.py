"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π
–§—É–Ω–∫—Ü–∏–∏:
- –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö
- –í–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞
"""

import logging
import json
from datetime import datetime, timedelta, date
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.fsm import CompetitionStates
from bot.calendar_keyboard import CalendarKeyboard
from competitions.competitions_queries import (
    add_competition,
    register_for_competition,
    get_competition,
    add_competition_result
)
from competitions.competitions_utils import (
    format_competition_distance,
    parse_user_distance_input,
    format_competition_date,
    parse_user_date_input,
    get_date_format_description,
    get_distance_unit_name,
    determine_competition_type
)

logger = logging.getLogger(__name__)
router = Router()


# ========== –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–û–†–ï–í–ù–û–í–ê–ù–ò–Ø –í–†–£–ß–ù–£–Æ ==========

@router.callback_query(F.data == "comp:create_custom")
async def start_create_custom_competition(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –≤—Ä—É—á–Ω—É—é"""

    text = (
        "üîç <b>–î–û–ë–ê–í–õ–ï–ù–ò–ï –°–û–†–ï–í–ù–û–í–ê–ù–ò–Ø –í–†–£–ß–ù–£–Æ</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å.\n\n"
        "üìù <b>–®–∞–≥ 1 –∏–∑ 6</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è:\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–æ–≤—Å–∫–∏–π –º–∞—Ä–∞—Ñ–æ–Ω 2026</i>"
    )

    await callback.message.edit_text(text, parse_mode="HTML")
    await state.set_state(CompetitionStates.waiting_for_comp_name)
    await callback.answer()


@router.message(CompetitionStates.waiting_for_comp_name)
async def process_comp_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"""

    comp_name = message.text.strip()

    if not comp_name or len(comp_name) < 3:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∏–Ω–∏–º—É–º –∏–∑ 3 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    await state.update_data(comp_name=comp_name)

    text = (
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{comp_name}</b>\n\n"
        f"üìù <b>–®–∞–≥ 2 –∏–∑ 6</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ <b>–≥–æ—Ä–æ–¥</b>, –≥–¥–µ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ:\n"
        f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ö–∞–∑–∞–Ω—å</i>"
    )

    await message.answer(text, parse_mode="HTML")
    await state.set_state(CompetitionStates.waiting_for_comp_city)


@router.message(CompetitionStates.waiting_for_comp_city)
async def process_comp_city(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ—Ä–æ–¥ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"""

    comp_city = message.text.strip()

    if not comp_city or len(comp_city) < 2:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥
    await state.update_data(comp_city=comp_city)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    calendar = CalendarKeyboard.create_calendar(
        calendar_format=1,
        current_date=datetime.now(),
        callback_prefix="cal_comp"
    )

    text = (
        f"‚úÖ –ì–æ—Ä–æ–¥: <b>{comp_city}</b>\n\n"
        f"üìù <b>–®–∞–≥ 3 –∏–∑ 6</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ <b>–¥–∞—Ç—É</b> —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:"
    )

    await message.answer(text, parse_mode="HTML", reply_markup=calendar)
    await state.set_state(CompetitionStates.waiting_for_comp_date)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("cal_comp_1_select_"), CompetitionStates.waiting_for_comp_date)
async def handle_comp_calendar_day_select(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""

    parsed = CalendarKeyboard.parse_callback_data(callback.data.replace("cal_comp_", "cal_"))
    selected_date = parsed.get("date")

    if not selected_date:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã", show_alert=True)
        return

    comp_date = selected_date.date()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
    if comp_date < date.today():
        await callback.answer("‚ùå –î–∞—Ç–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
    await state.update_data(comp_date=comp_date.strftime('%Y-%m-%d'))

    user_id = callback.from_user.id
    formatted_date = await format_competition_date(comp_date.strftime('%Y-%m-%d'), user_id)

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üèÉ –ë–µ–≥", callback_data="comptype:running"))
    builder.row(InlineKeyboardButton(text="üèä –ü–ª–∞–≤–∞–Ω–∏–µ", callback_data="comptype:swimming"))
    builder.row(InlineKeyboardButton(text="üö¥ –í–µ–ª–æ—Å–ø–æ—Ä—Ç", callback_data="comptype:cycling"))
    builder.row(InlineKeyboardButton(text="üèä‚Äç‚ôÇÔ∏èüö¥‚Äç‚ôÇÔ∏èüèÉ –¢—Ä–∏–∞—Ç–ª–æ–Ω", callback_data="comptype:triathlon"))
    builder.row(InlineKeyboardButton(text="‚õ∞Ô∏è –¢—Ä–µ–π–ª", callback_data="comptype:trail"))

    text = (
        f"‚úÖ –î–∞—Ç–∞: <b>{formatted_date}</b>\n\n"
        f"üìù <b>–®–∞–≥ 4 –∏–∑ 6</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ <b>–≤–∏–¥ —Å–ø–æ—Ä—Ç–∞</b>:"
    )

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())
    await state.set_state(CompetitionStates.waiting_for_comp_type)
    await callback.answer()


@router.callback_query(F.data.startswith("cal_comp_"), CompetitionStates.waiting_for_comp_date)
async def handle_comp_calendar_navigation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–µ–≤/–≥–æ–¥–æ–≤)"""

    parsed = CalendarKeyboard.parse_callback_data(callback.data.replace("cal_comp_", "cal_"))

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ callback –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é
    current_date = parsed.get("date")
    if not current_date:
        current_date = datetime.now()

    action = parsed.get("action", "")
    cal_format = parsed.get("format", 1)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    if action == "less":
        # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥
        if cal_format == 1:  # –î–Ω–∏ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥
            current_date = current_date.replace(day=1)
            if current_date.month == 1:
                current_date = current_date.replace(year=current_date.year - 1, month=12)
            else:
                current_date = current_date.replace(month=current_date.month - 1)
        elif cal_format == 2:  # –ú–µ—Å—è—Ü—ã - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≥–æ–¥ –Ω–∞–∑–∞–¥
            current_date = current_date.replace(year=current_date.year - 1)
    elif action == "more":
        # –°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥
        if cal_format == 1:  # –î–Ω–∏ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥
            current_date = current_date.replace(day=1)
            if current_date.month == 12:
                current_date = current_date.replace(year=current_date.year + 1, month=1)
            else:
                current_date = current_date.replace(month=current_date.month + 1)
        elif cal_format == 2:  # –ú–µ—Å—è—Ü—ã - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≥–æ–¥ –≤–ø–µ—Ä–µ–¥
            current_date = current_date.replace(year=current_date.year + 1)
    elif action == "change":
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        if cal_format == 1:
            cal_format = 2  # –° –¥–Ω–µ–π –Ω–∞ –º–µ—Å—è—Ü—ã
        elif cal_format == 2:
            cal_format = 3  # –° –º–µ—Å—è—Ü–µ–≤ –Ω–∞ –≥–æ–¥—ã

    # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    calendar = CalendarKeyboard.create_calendar(
        calendar_format=cal_format,
        current_date=current_date,
        callback_prefix="cal_comp"
    )

    try:
        await callback.message.edit_reply_markup(reply_markup=calendar)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error updating calendar: {e}")
        await callback.answer()


@router.message(CompetitionStates.waiting_for_comp_date)
async def process_comp_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞—Ç—É —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—é)"""

    date_text = message.text.strip()
    user_id = message.from_user.id

    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å —É—á–µ—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    comp_date = await parse_user_date_input(date_text, user_id)

    if comp_date is None:
        date_format_desc = await get_date_format_description(user_id)
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: {date_format_desc}\n"
            f"–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤—ã—à–µ."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
    if comp_date < date.today():
        await message.answer(
            "‚ùå –î–∞—Ç–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
    await state.update_data(comp_date=comp_date.strftime('%Y-%m-%d'))

    formatted_date = await format_competition_date(comp_date.strftime('%Y-%m-%d'), user_id)

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üèÉ –ë–µ–≥", callback_data="comptype:running"))
    builder.row(InlineKeyboardButton(text="üèä –ü–ª–∞–≤–∞–Ω–∏–µ", callback_data="comptype:swimming"))
    builder.row(InlineKeyboardButton(text="üö¥ –í–µ–ª–æ—Å–ø–æ—Ä—Ç", callback_data="comptype:cycling"))
    builder.row(InlineKeyboardButton(text="üèä‚Äç‚ôÇÔ∏èüö¥‚Äç‚ôÇÔ∏èüèÉ –¢—Ä–∏–∞—Ç–ª–æ–Ω", callback_data="comptype:triathlon"))
    builder.row(InlineKeyboardButton(text="‚õ∞Ô∏è –¢—Ä–µ–π–ª", callback_data="comptype:trail"))

    text = (
        f"‚úÖ –î–∞—Ç–∞: <b>{formatted_date}</b>\n\n"
        f"üìù <b>–®–∞–≥ 4 –∏–∑ 6</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ <b>–≤–∏–¥ —Å–ø–æ—Ä—Ç–∞</b>:"
    )

    await message.answer(text, parse_mode="HTML", reply_markup=builder.as_markup())
    await state.set_state(CompetitionStates.waiting_for_comp_type)


@router.callback_query(F.data.startswith("comptype:"), CompetitionStates.waiting_for_comp_type)
async def process_comp_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∏–ø —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"""

    comp_type_map = {
        "running": "–±–µ–≥",
        "swimming": "–ø–ª–∞–≤–∞–Ω–∏–µ",
        "cycling": "–≤–µ–ª–æ—Å–ø–æ—Ä—Ç",
        "triathlon": "—Ç—Ä–∏–∞—Ç–ª–æ–Ω",
        "trail": "—Ç—Ä–µ–π–ª"
    }

    comp_type_key = callback.data.split(":")[1]
    comp_type = comp_type_map.get(comp_type_key, "–±–µ–≥")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø
    await state.update_data(comp_type=comp_type)

    user_id = callback.from_user.id
    distance_unit = await get_distance_unit_name(user_id)

    text = (
        f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: <b>{comp_type}</b>\n\n"
        f"üìù <b>–®–∞–≥ 5 –∏–∑ 6</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ <b>–¥–∏—Å—Ç–∞–Ω—Ü–∏—é</b> –≤ <b>{distance_unit}</b>:\n"
    )

    if distance_unit == '–∫–º':
        text += (
            f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            f"‚Ä¢ 42.195 (–¥–ª—è –º–∞—Ä–∞—Ñ–æ–Ω–∞)\n"
            f"‚Ä¢ 21.1 (–¥–ª—è –ø–æ–ª—É–º–∞—Ä–∞—Ñ–æ–Ω–∞)\n"
            f"‚Ä¢ 10 (–¥–ª—è 10 –∫–º)</i>"
        )
    else:
        text += (
            f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            f"‚Ä¢ 26.2 (–¥–ª—è –º–∞—Ä–∞—Ñ–æ–Ω–∞)\n"
            f"‚Ä¢ 13.1 (–¥–ª—è –ø–æ–ª—É–º–∞—Ä–∞—Ñ–æ–Ω–∞)\n"
            f"‚Ä¢ 6.2 (–¥–ª—è 10 –∫–º)</i>"
        )

    await callback.message.edit_text(text, parse_mode="HTML")
    await state.set_state(CompetitionStates.waiting_for_comp_distance)
    await callback.answer()


@router.message(CompetitionStates.waiting_for_comp_distance)
async def process_comp_distance(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü–∏—é —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"""

    distance_text = message.text.strip().replace(',', '.')
    user_id = message.from_user.id

    # –ü–∞—Ä—Å–∏–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é —Å —É—á–µ—Ç–æ–º –µ–¥–∏–Ω–∏—Ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    distance_km = await parse_user_distance_input(distance_text, user_id)

    if distance_km is None:
        distance_unit = await get_distance_unit_name(user_id)
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏.\n"
            f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ {distance_unit} (–Ω–∞–ø—Ä–∏–º–µ—Ä: 42.195 –∏–ª–∏ 10):"
        )
        return

    if distance_km <= 0 or distance_km > 500:
        distance_unit = await get_distance_unit_name(user_id)
        await message.answer(
            f"‚ùå –î–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0.1 –¥–æ 500 –∫–º.\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ {distance_unit}:"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –≤ –∫–º
    await state.update_data(comp_distance=distance_km)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
    distance_name = await format_competition_distance(distance_km, user_id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="comp:skip_target"))

    text = (
        f"‚úÖ –î–∏—Å—Ç–∞–Ω—Ü–∏—è: <b>{distance_name}</b>\n\n"
        f"üìù <b>–®–∞–≥ 6 –∏–∑ 6</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ <b>—Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è</b>:\n"
        f"<i>–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú:–°–°\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: 03:30:00 (3 —á–∞—Å–∞ 30 –º–∏–Ω—É—Ç)\n"
        f"–ò–ª–∏: 00:45:00 (45 –º–∏–Ω—É—Ç)</i>\n\n"
        f"–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
    )

    await message.answer(text, parse_mode="HTML", reply_markup=builder.as_markup())
    await state.set_state(CompetitionStates.waiting_for_comp_target)


async def create_competition_from_state(user_id: int, state: FSMContext, target_time: str = None, message_obj=None):
    """–°–æ–∑–¥–∞—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö FSM"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    comp_name = data.get('comp_name')
    comp_city = data.get('comp_city')
    comp_date = data.get('comp_date')
    comp_type = data.get('comp_type')
    comp_distance = data.get('comp_distance')

    # –°–æ–∑–¥–∞—ë–º —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –≤ –ë–î
    try:
        competition_data = {
            'name': comp_name,
            'date': comp_date,
            'city': comp_city,
            'country': '–†–æ—Å—Å–∏—è',
            'type': comp_type,
            'distances': json.dumps([comp_distance]),
            'status': 'upcoming',
            'created_by': user_id,
            'is_official': 0,  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ
            'registration_status': 'open'
        }

        comp_id = await add_competition(competition_data)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ
        await register_for_competition(
            user_id=user_id,
            competition_id=comp_id,
            distance=comp_distance,
            target_time=target_time
        )

        logger.info(f"User {user_id} created custom competition {comp_id}: {comp_name}")

        # –°–æ–∑–¥–∞—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        from competitions.reminder_scheduler import create_reminders_for_competition
        await create_reminders_for_competition(user_id, comp_id, comp_date)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        formatted_date = await format_competition_date(comp_date, user_id)
        formatted_distance = await format_competition_distance(comp_distance, user_id)

        text = (
            "‚úÖ <b>–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
            f"üèÜ <b>{comp_name}</b>\n"
            f"üèôÔ∏è –ì–æ—Ä–æ–¥: {comp_city}\n"
            f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
            f"üèÉ –í–∏–¥: {comp_type}\n"
            f"üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {formatted_distance}\n"
        )

        if target_time:
            text += f"üéØ –¶–µ–ª—å: {target_time}\n"

        text += (
            "\nüîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã</b>\n"
            "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
            "‚Ä¢ –ó–∞ 30 –¥–Ω–µ–π –¥–æ —Å—Ç–∞—Ä—Ç–∞\n"
            "‚Ä¢ –ó–∞ 14 –¥–Ω–µ–π –¥–æ —Å—Ç–∞—Ä—Ç–∞\n"
            "‚Ä¢ –ó–∞ 7 –¥–Ω–µ–π –¥–æ —Å—Ç–∞—Ä—Ç–∞\n"
            "‚Ä¢ –ó–∞ 3 –¥–Ω—è –¥–æ —Å—Ç–∞—Ä—Ç–∞\n"
            "‚Ä¢ –ó–∞ 1 –¥–µ–Ω—å –¥–æ —Å—Ç–∞—Ä—Ç–∞\n"
            "‚Ä¢ –ù–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ (–¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)\n\n"
            "–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª '–ú–æ–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è'"
        )

        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="‚úÖ –ú–æ–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è", callback_data="comp:my"))
        builder.row(InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="comp:menu"))

        if message_obj:
            if isinstance(message_obj, Message):
                await message_obj.answer(text, parse_mode="HTML", reply_markup=builder.as_markup())
            else:  # CallbackQuery
                await message_obj.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except Exception as e:
        logger.error(f"Error creating custom competition: {e}")
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."

        if message_obj:
            if isinstance(message_obj, Message):
                await message_obj.answer(error_text, parse_mode="HTML")
            else:
                await message_obj.edit_text(error_text, parse_mode="HTML")

        await state.clear()


@router.callback_query(F.data == "comp:skip_target", CompetitionStates.waiting_for_comp_target)
async def skip_target_time(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –∏ —Å–æ–∑–¥–∞—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ"""
    await create_competition_from_state(callback.from_user.id, state, None, callback.message)
    await callback.answer()


@router.message(CompetitionStates.waiting_for_comp_target)
async def process_comp_target_and_create(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –∏ —Å–æ–∑–¥–∞—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ"""

    target_text = message.text.strip()
    target_time = None

    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú:–°–°
        time_parts = target_text.split(':')
        if len(time_parts) == 3:
            hours, minutes, seconds = map(int, time_parts)
            if 0 <= hours <= 24 and 0 <= minutes < 60 and 0 <= seconds < 60:
                target_time = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
            else:
                raise ValueError
        elif len(time_parts) == 2:
            # –§–æ—Ä–º–∞—Ç –ú–ú:–°–°
            minutes, seconds = map(int, time_parts)
            if 0 <= minutes < 60 and 0 <= seconds < 60:
                target_time = f"00:{minutes:02d}:{seconds:02d}"
            else:
                raise ValueError
        else:
            raise ValueError
    except (ValueError, AttributeError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú:–°–° (–Ω–∞–ø—Ä–∏–º–µ—Ä: 03:30:00)\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'."
        )
        return

    # –°–æ–∑–¥–∞–µ–º —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ
    await create_competition_from_state(message.from_user.id, state, target_time, message)


# ========== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–†–ï–í–ù–û–í–ê–ù–ò–ô ==========

@router.callback_query(F.data == "comp:statistics")
async def show_competition_statistics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    from competitions.statistics_queries import get_user_competition_stats

    user_id = callback.from_user.id
    stats = await get_user_competition_stats(user_id)

    if not stats or stats['total_competitions'] == 0:
        text = (
            "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–†–ï–í–ù–û–í–ê–ù–ò–ô</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.\n\n"
            "–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö –∏ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, "
            "—á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å!"
        )
    else:
        text = "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–†–ï–í–ù–û–í–ê–ù–ò–ô</b>\n\n"

        text += f"üèÜ <b>–í—Å–µ–≥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π:</b> {stats['total_competitions']}\n"
        text += f"‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</b> {stats['total_completed']}\n\n"

        if stats['total_marathons'] > 0:
            text += f"üèÉ <b>–ú–∞—Ä–∞—Ñ–æ–Ω—ã (42.2 –∫–º):</b> {stats['total_marathons']}\n"
            if stats.get('best_marathon_time'):
                text += f"   ‚è±Ô∏è –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: {stats['best_marathon_time']}\n"
            text += "\n"

        if stats['total_half_marathons'] > 0:
            text += f"üèÉ <b>–ü–æ–ª—É–º–∞—Ä–∞—Ñ–æ–Ω—ã (21.1 –∫–º):</b> {stats['total_half_marathons']}\n"
            if stats.get('best_half_marathon_time'):
                text += f"   ‚è±Ô∏è –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: {stats['best_half_marathon_time']}\n"
            text += "\n"

        if stats['total_10k'] > 0:
            text += f"üèÉ <b>10 –∫–º:</b> {stats['total_10k']}\n"
            if stats.get('best_10k_time'):
                text += f"   ‚è±Ô∏è –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: {stats['best_10k_time']}\n"
            text += "\n"

        if stats['total_5k'] > 0:
            text += f"üèÉ <b>5 –∫–º:</b> {stats['total_5k']}\n"
            if stats.get('best_5k_time'):
                text += f"   ‚è±Ô∏è –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: {stats['best_5k_time']}\n"
            text += "\n"

        if stats.get('total_distance_km', 0) > 0:
            text += f"üìè <b>–û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è:</b> {stats['total_distance_km']:.1f} –∫–º\n"

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üèÖ –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="comp:my_results"))
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="comp:menu"))

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())
    await callback.answer()
