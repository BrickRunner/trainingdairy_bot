"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π
–§—É–Ω–∫—Ü–∏–∏:
- –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö
- –í–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞
"""

import logging
import json
from datetime import datetime, timedelta, date
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.fsm import CompetitionStates
from competitions.competitions_queries import (
    add_competition,
    register_for_competition,
    get_competition,
    add_competition_result
)

logger = logging.getLogger(__name__)
router = Router()


# ========== –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –°–û–†–ï–í–ù–û–í–ê–ù–ò–Ø ==========

@router.callback_query(F.data == "comp:create_custom")
async def start_create_custom_competition(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"""

    text = (
        "‚ûï <b>–°–û–ó–î–ê–ù–ò–ï –°–í–û–ï–ì–û –°–û–†–ï–í–ù–û–í–ê–ù–ò–Ø</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é.\n\n"
        "üìù <b>–®–∞–≥ 1 –∏–∑ 5</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è:\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–æ–≤—Å–∫–∏–π –º–∞—Ä–∞—Ñ–æ–Ω 2026</i>"
    )

    await callback.message.edit_text(text, parse_mode="HTML")
    await state.set_state(CompetitionStates.waiting_for_comp_name)
    await callback.answer()


@router.message(CompetitionStates.waiting_for_comp_name)
async def process_comp_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"""

    comp_name = message.text.strip()

    if not comp_name or len(comp_name) < 3:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∏–Ω–∏–º—É–º –∏–∑ 3 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    await state.update_data(comp_name=comp_name)

    text = (
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{comp_name}</b>\n\n"
        f"üìù <b>–®–∞–≥ 2 –∏–∑ 5</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ <b>–¥–∞—Ç—É</b> —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è:\n"
        f"<i>–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n–ù–∞–ø—Ä–∏–º–µ—Ä: 25.09.2026</i>"
    )

    await message.answer(text, parse_mode="HTML")
    await state.set_state(CompetitionStates.waiting_for_comp_date)


@router.message(CompetitionStates.waiting_for_comp_date)
async def process_comp_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞—Ç—É —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"""

    date_text = message.text.strip()

    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
    try:
        comp_date = datetime.strptime(date_text, '%d.%m.%Y').date()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
        if comp_date < date.today():
            await message.answer(
                "‚ùå –î–∞—Ç–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:"
            )
            return

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.09.2026"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
    await state.update_data(comp_date=comp_date.strftime('%Y-%m-%d'))

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üèÉ –ë–µ–≥", callback_data="comptype:running"))
    builder.row(InlineKeyboardButton(text="üèä –ü–ª–∞–≤–∞–Ω–∏–µ", callback_data="comptype:swimming"))
    builder.row(InlineKeyboardButton(text="üö¥ –í–µ–ª–æ—Å–ø–æ—Ä—Ç", callback_data="comptype:cycling"))
    builder.row(InlineKeyboardButton(text="üèä‚Äç‚ôÇÔ∏èüö¥‚Äç‚ôÇÔ∏èüèÉ –¢—Ä–∏–∞—Ç–ª–æ–Ω", callback_data="comptype:triathlon"))
    builder.row(InlineKeyboardButton(text="‚õ∞Ô∏è –¢—Ä–µ–π–ª", callback_data="comptype:trail"))

    text = (
        f"‚úÖ –î–∞—Ç–∞: <b>{comp_date.strftime('%d.%m.%Y')}</b>\n\n"
        f"üìù <b>–®–∞–≥ 3 –∏–∑ 5</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ <b>–≤–∏–¥ —Å–ø–æ—Ä—Ç–∞</b>:"
    )

    await message.answer(text, parse_mode="HTML", reply_markup=builder.as_markup())
    await state.set_state(CompetitionStates.waiting_for_comp_type)


@router.callback_query(F.data.startswith("comptype:"), CompetitionStates.waiting_for_comp_type)
async def process_comp_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∏–ø —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"""

    comp_type_map = {
        "running": "–±–µ–≥",
        "swimming": "–ø–ª–∞–≤–∞–Ω–∏–µ",
        "cycling": "–≤–µ–ª–æ—Å–ø–æ—Ä—Ç",
        "triathlon": "—Ç—Ä–∏–∞—Ç–ª–æ–Ω",
        "trail": "—Ç—Ä–µ–π–ª"
    }

    comp_type_key = callback.data.split(":")[1]
    comp_type = comp_type_map.get(comp_type_key, "–±–µ–≥")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø
    await state.update_data(comp_type=comp_type)

    text = (
        f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: <b>{comp_type}</b>\n\n"
        f"üìù <b>–®–∞–≥ 4 –∏–∑ 5</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ <b>–¥–∏—Å—Ç–∞–Ω—Ü–∏—é</b>:\n"
        f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 42.195 (–¥–ª—è –º–∞—Ä–∞—Ñ–æ–Ω–∞)\n"
        f"–ò–ª–∏: 21.1 (–¥–ª—è –ø–æ–ª—É–º–∞—Ä–∞—Ñ–æ–Ω–∞)\n"
        f"–ò–ª–∏: 10 (–¥–ª—è 10 –∫–º)</i>"
    )

    await callback.message.edit_text(text, parse_mode="HTML")
    await state.set_state(CompetitionStates.waiting_for_comp_distance)
    await callback.answer()


@router.message(CompetitionStates.waiting_for_comp_distance)
async def process_comp_distance(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü–∏—é —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"""

    distance_text = message.text.strip().replace(',', '.')

    try:
        distance = float(distance_text)

        if distance <= 0 or distance > 500:
            await message.answer(
                "‚ùå –î–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0.1 –¥–æ 500 –∫–º.\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
            )
            return

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏.\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 42.195 –∏–ª–∏ 10):"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
    await state.update_data(comp_distance=distance)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
    if distance == 42.195 or distance == 42.2:
        distance_name = "–ú–∞—Ä–∞—Ñ–æ–Ω (42.195 –∫–º)"
    elif distance == 21.1 or distance == 21.0975:
        distance_name = "–ü–æ–ª—É–º–∞—Ä–∞—Ñ–æ–Ω (21.1 –∫–º)"
    elif distance == 10:
        distance_name = "10 –∫–º"
    elif distance == 5:
        distance_name = "5 –∫–º"
    else:
        distance_name = f"{distance} –∫–º"

    text = (
        f"‚úÖ –î–∏—Å—Ç–∞–Ω—Ü–∏—è: <b>{distance_name}</b>\n\n"
        f"üìù <b>–®–∞–≥ 5 –∏–∑ 5</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ <b>—Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è</b>:\n"
        f"<i>–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú:–°–°\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: 03:30:00 (3 —á–∞—Å–∞ 30 –º–∏–Ω—É—Ç)\n"
        f"–ò–ª–∏: 00:45:00 (45 –º–∏–Ω—É—Ç)</i>\n\n"
        f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>0</b>, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ü–µ–ª—å —Å–µ–π—á–∞—Å."
    )

    await message.answer(text, parse_mode="HTML")
    await state.set_state(CompetitionStates.waiting_for_comp_target)


@router.message(CompetitionStates.waiting_for_comp_target)
async def process_comp_target_and_create(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –∏ —Å–æ–∑–¥–∞—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ"""

    target_text = message.text.strip()
    target_time = None

    if target_text != "0":
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú:–°–°
            time_parts = target_text.split(':')
            if len(time_parts) == 3:
                hours, minutes, seconds = map(int, time_parts)
                if 0 <= hours <= 24 and 0 <= minutes < 60 and 0 <= seconds < 60:
                    target_time = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
                else:
                    raise ValueError
            elif len(time_parts) == 2:
                # –§–æ—Ä–º–∞—Ç –ú–ú:–°–°
                minutes, seconds = map(int, time_parts)
                if 0 <= minutes < 60 and 0 <= seconds < 60:
                    target_time = f"00:{minutes:02d}:{seconds:02d}"
                else:
                    raise ValueError
            else:
                raise ValueError
        except (ValueError, AttributeError):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú:–°–° (–Ω–∞–ø—Ä–∏–º–µ—Ä: 03:30:00)\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
            )
            return

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    comp_name = data.get('comp_name')
    comp_date = data.get('comp_date')
    comp_type = data.get('comp_type')
    comp_distance = data.get('comp_distance')

    user_id = message.from_user.id

    # –°–æ–∑–¥–∞—ë–º —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –≤ –ë–î
    try:
        competition_data = {
            'name': comp_name,
            'date': comp_date,
            'type': comp_type,
            'distances': json.dumps([comp_distance]),
            'status': 'upcoming',
            'created_by': user_id,
            'is_official': 0,  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ
            'registration_status': 'open'
        }

        comp_id = await add_competition(competition_data)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ
        await register_for_competition(
            user_id=user_id,
            competition_id=comp_id,
            distance=comp_distance,
            target_time=target_time
        )

        logger.info(f"User {user_id} created custom competition {comp_id}: {comp_name}")

        # –°–æ–∑–¥–∞—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        from competitions.reminder_scheduler import create_reminders_for_competition
        await create_reminders_for_competition(user_id, comp_id, comp_date)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        text = (
            "‚úÖ <b>–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
            f"üèÜ <b>{comp_name}</b>\n"
            f"üìÖ –î–∞—Ç–∞: {datetime.strptime(comp_date, '%Y-%m-%d').strftime('%d.%m.%Y')}\n"
            f"üèÉ –í–∏–¥: {comp_type}\n"
            f"üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {comp_distance} –∫–º\n"
        )

        if target_time:
            text += f"üéØ –¶–µ–ª—å: {target_time}\n"

        text += (
            "\nüîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã</b>\n"
            "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
            "‚Ä¢ –ó–∞ 30 –¥–Ω–µ–π –¥–æ —Å—Ç–∞—Ä—Ç–∞\n"
            "‚Ä¢ –ó–∞ 14 –¥–Ω–µ–π –¥–æ —Å—Ç–∞—Ä—Ç–∞\n"
            "‚Ä¢ –ó–∞ 7 –¥–Ω–µ–π –¥–æ —Å—Ç–∞—Ä—Ç–∞\n"
            "‚Ä¢ –ó–∞ 3 –¥–Ω—è –¥–æ —Å—Ç–∞—Ä—Ç–∞\n"
            "‚Ä¢ –ó–∞ 1 –¥–µ–Ω—å –¥–æ —Å—Ç–∞—Ä—Ç–∞\n"
            "‚Ä¢ –ù–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ (–¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)\n\n"
            "–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª '–ú–æ–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è'"
        )

        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="‚úÖ –ú–æ–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è", callback_data="comp:my"))
        builder.row(InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="comp:menu"))

        await message.answer(text, parse_mode="HTML", reply_markup=builder.as_markup())

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except Exception as e:
        logger.error(f"Error creating custom competition: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
        await state.clear()


# ========== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–†–ï–í–ù–û–í–ê–ù–ò–ô ==========

@router.callback_query(F.data == "comp:statistics")
async def show_competition_statistics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    from competitions.statistics_queries import get_user_competition_stats

    user_id = callback.from_user.id
    stats = await get_user_competition_stats(user_id)

    if not stats or stats['total_competitions'] == 0:
        text = (
            "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–†–ï–í–ù–û–í–ê–ù–ò–ô</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.\n\n"
            "–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö –∏ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, "
            "—á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å!"
        )
    else:
        text = "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–†–ï–í–ù–û–í–ê–ù–ò–ô</b>\n\n"

        text += f"üèÜ <b>–í—Å–µ–≥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π:</b> {stats['total_competitions']}\n"
        text += f"‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</b> {stats['total_completed']}\n\n"

        if stats['total_marathons'] > 0:
            text += f"üèÉ <b>–ú–∞—Ä–∞—Ñ–æ–Ω—ã (42.2 –∫–º):</b> {stats['total_marathons']}\n"
            if stats.get('best_marathon_time'):
                text += f"   ‚è±Ô∏è –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: {stats['best_marathon_time']}\n"
            text += "\n"

        if stats['total_half_marathons'] > 0:
            text += f"üèÉ <b>–ü–æ–ª—É–º–∞—Ä–∞—Ñ–æ–Ω—ã (21.1 –∫–º):</b> {stats['total_half_marathons']}\n"
            if stats.get('best_half_marathon_time'):
                text += f"   ‚è±Ô∏è –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: {stats['best_half_marathon_time']}\n"
            text += "\n"

        if stats['total_10k'] > 0:
            text += f"üèÉ <b>10 –∫–º:</b> {stats['total_10k']}\n"
            if stats.get('best_10k_time'):
                text += f"   ‚è±Ô∏è –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: {stats['best_10k_time']}\n"
            text += "\n"

        if stats['total_5k'] > 0:
            text += f"üèÉ <b>5 –∫–º:</b> {stats['total_5k']}\n"
            if stats.get('best_5k_time'):
                text += f"   ‚è±Ô∏è –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: {stats['best_5k_time']}\n"
            text += "\n"

        if stats.get('total_distance_km', 0) > 0:
            text += f"üìè <b>–û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è:</b> {stats['total_distance_km']:.1f} –∫–º\n"

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üèÖ –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="comp:my_results"))
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="comp:menu"))

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())
    await callback.answer()
