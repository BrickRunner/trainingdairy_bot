"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π
"""

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from typing import List, Dict, Any
from datetime import datetime, date


def get_competitions_main_menu() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è", callback_data="comp:upcoming")
    )
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ú–æ–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è", callback_data="comp:my")
    )
    builder.row(
        InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å–≤–æ—ë —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ", callback_data="comp:create_custom")
    )
    builder.row(
        InlineKeyboardButton(text="üèÖ –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="comp:my_results")
    )
    builder.row(
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="comp:statistics")
    )
    builder.row(
        InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π", callback_data="comp:search")
    )
    builder.row(
        InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
    )

    return builder.as_markup()


def get_competition_card_keyboard(
    competition_id: int,
    is_registered: bool = False,
    has_multiple_distances: bool = False,
    show_back: bool = True
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è

    Args:
        competition_id: ID —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
        is_registered: –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        has_multiple_distances: –ï—Å—Ç—å –ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–∏—Å—Ç–∞–Ω—Ü–∏–π
        show_back: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    """
    builder = InlineKeyboardBuilder()

    if is_registered:
        builder.row(
            InlineKeyboardButton(
                text="‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã",
                callback_data=f"comp:view_registration:{competition_id}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="üìä –ú–æ—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
                callback_data=f"comp:preparation:{competition_id}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–∏–µ",
                callback_data=f"comp:unregister:{competition_id}"
            )
        )
    else:
        if has_multiple_distances:
            builder.row(
                InlineKeyboardButton(
                    text="‚úçÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è (–≤—ã–±—Ä–∞—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü–∏—é)",
                    callback_data=f"comp:select_distance:{competition_id}"
                )
            )
        else:
            builder.row(
                InlineKeyboardButton(
                    text="‚úçÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
                    callback_data=f"comp:register:{competition_id}"
                )
            )

    builder.row(
        InlineKeyboardButton(
            text="üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç",
            url=f"comp_url_{competition_id}"  # –ë—É–¥–µ—Ç –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL
        )
    )

    if show_back:
        builder.row(
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="comp:upcoming")
        )

    return builder.as_markup()


def get_distance_selection_keyboard(competition_id: int, distances: List[float]) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏

    Args:
        competition_id: ID —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
        distances: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å—Ç–∞–Ω—Ü–∏–π
    """
    builder = InlineKeyboardBuilder()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –∫—Ä–∞—Å–∏–≤–æ
    distance_names = {
        42.195: "üèÉ –ú–∞—Ä–∞—Ñ–æ–Ω (42.195 –∫–º)",
        21.1: "üèÉ –ü–æ–ª—É–º–∞—Ä–∞—Ñ–æ–Ω (21.1 –∫–º)",
        10.0: "üèÉ 10 –∫–º",
        5.0: "üèÉ 5 –∫–º",
        3.0: "üèÉ 3 –∫–º"
    }

    for distance in sorted(distances, reverse=True):
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –∫–º
        text = distance_names.get(distance, f"üèÉ {distance} –∫–º")
        builder.row(
            InlineKeyboardButton(
                text=text,
                callback_data=f"comp:register_dist:{competition_id}:{distance}"
            )
        )

    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"comp:view:{competition_id}")
    )

    return builder.as_markup()


def get_my_competitions_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é '–ú–æ–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è'"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ", callback_data="comp:my:upcoming")
    )
    builder.row(
        InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ", callback_data="comp:my:finished")
    )
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="comp:menu")
    )

    return builder.as_markup()


def get_my_competition_keyboard(competition_id: int, has_result: bool = False) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –º–æ–µ–≥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è

    Args:
        competition_id: ID —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
        has_result: –î–æ–±–∞–≤–ª–µ–Ω –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
    builder = InlineKeyboardBuilder()

    if not has_result:
        builder.row(
            InlineKeyboardButton(
                text="üèÜ –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                callback_data=f"comp:add_result:{competition_id}"
            )
        )
    else:
        builder.row(
            InlineKeyboardButton(
                text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                callback_data=f"comp:view_result:{competition_id}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                callback_data=f"comp:edit_result:{competition_id}"
            )
        )

    builder.row(
        InlineKeyboardButton(
            text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏",
            callback_data=f"comp:preparation:{competition_id}"
        )
    )
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="comp:my")
    )

    return builder.as_markup()


def get_search_filters_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="üìÖ –ü–æ –¥–∞—Ç–µ", callback_data="comp:filter:date")
    )
    builder.row(
        InlineKeyboardButton(text="üèôÔ∏è –ü–æ –≥–æ—Ä–æ–¥—É", callback_data="comp:filter:city")
    )
    builder.row(
        InlineKeyboardButton(text="üèÉ –ü–æ —Ç–∏–ø—É", callback_data="comp:filter:type")
    )
    builder.row(
        InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="comp:filter:name")
    )
    builder.row(
        InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="comp:filter:reset")
    )
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="comp:menu")
    )

    return builder.as_markup()


def get_competition_type_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"""
    builder = InlineKeyboardBuilder()

    types = [
        ("üèÉ –ú–∞—Ä–∞—Ñ–æ–Ω", "–º–∞—Ä–∞—Ñ–æ–Ω"),
        ("üèÉ –ü–æ–ª—É–º–∞—Ä–∞—Ñ–æ–Ω", "–ø–æ–ª—É–º–∞—Ä–∞—Ñ–æ–Ω"),
        ("üèÉ –ó–∞–±–µ–≥", "–∑–∞–±–µ–≥"),
        ("‚õ∞Ô∏è –¢—Ä–µ–π–ª", "—Ç—Ä–µ–π–ª"),
        ("üèÉ –£–ª—å—Ç—Ä–∞–º–∞—Ä–∞—Ñ–æ–Ω", "—É–ª—å—Ç—Ä–∞"),
    ]

    for text, type_value in types:
        builder.row(
            InlineKeyboardButton(text=text, callback_data=f"comp:type:{type_value}")
        )

    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="comp:search")
    )

    return builder.as_markup()


def get_pagination_keyboard(
    callback_prefix: str,
    page: int,
    total_pages: int,
    back_callback: str = "comp:menu"
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤

    Args:
        callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback (–Ω–∞–ø—Ä–∏–º–µ—Ä "comp:upcoming:page")
        page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1)
        total_pages: –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        back_callback: Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    """
    builder = InlineKeyboardBuilder()

    buttons = []

    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
    if page > 1:
        buttons.append(
            InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"{callback_prefix}:{page-1}")
        )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    buttons.append(
        InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="noop")
    )

    # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
    if page < total_pages:
        buttons.append(
            InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"{callback_prefix}:{page+1}")
        )

    if buttons:
        builder.row(*buttons)

    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback)
    )

    return builder.as_markup()


def get_cancel_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    builder = ReplyKeyboardBuilder()
    builder.row(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    return builder.as_markup(resize_keyboard=True)


def get_result_input_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"),
        KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")
    )
    return builder.as_markup(resize_keyboard=True)


def format_competition_distance(distance: float) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

    Args:
        distance: –î–∏—Å—Ç–∞–Ω—Ü–∏—è –≤ –∫–º

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if distance == 42.195:
        return "–ú–∞—Ä–∞—Ñ–æ–Ω (42.195 –∫–º)"
    elif distance == 21.1:
        return "–ü–æ–ª—É–º–∞—Ä–∞—Ñ–æ–Ω (21.1 –∫–º)"
    elif distance == int(distance):
        return f"{int(distance)} –∫–º"
    else:
        return f"{distance} –∫–º"


def format_time_until_competition(competition_date: str) -> str:
    """
    –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –¥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è

    Args:
        competition_date: –î–∞—Ç–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    try:
        comp_date = datetime.strptime(competition_date, '%Y-%m-%d').date()
        today = date.today()
        delta = (comp_date - today).days

        if delta < 0:
            return "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
        elif delta == 0:
            return "–°–µ–≥–æ–¥–Ω—è!"
        elif delta == 1:
            return "–ó–∞–≤—Ç—Ä–∞!"
        elif delta < 7:
            return f"–ß–µ—Ä–µ–∑ {delta} –¥–Ω–µ–π"
        elif delta < 30:
            weeks = delta // 7
            return f"–ß–µ—Ä–µ–∑ {weeks} –Ω–µ–¥."
        elif delta < 365:
            months = delta // 30
            return f"–ß–µ—Ä–µ–∑ {months} –º–µ—Å."
        else:
            years = delta // 365
            return f"–ß–µ—Ä–µ–∑ {years} –≥."
    except:
        return "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"


def get_month_selection_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞"""
    builder = InlineKeyboardBuilder()

    months = [
        ("–Ø–Ω–≤–∞—Ä—å", 1), ("–§–µ–≤—Ä–∞–ª—å", 2), ("–ú–∞—Ä—Ç", 3),
        ("–ê–ø—Ä–µ–ª—å", 4), ("–ú–∞–π", 5), ("–ò—é–Ω—å", 6),
        ("–ò—é–ª—å", 7), ("–ê–≤–≥—É—Å—Ç", 8), ("–°–µ–Ω—Ç—è–±—Ä—å", 9),
        ("–û–∫—Ç—è–±—Ä—å", 10), ("–ù–æ—è–±—Ä—å", 11), ("–î–µ–∫–∞–±—Ä—å", 12)
    ]

    for month_name, month_num in months:
        builder.button(
            text=month_name,
            callback_data=f"comp:month:{month_num}"
        )

    builder.adjust(3)  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥

    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="comp:search")
    )

    return builder.as_markup()
