"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥—É –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
"""

import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.fsm import CompetitionStates

logger = logging.getLogger(__name__)
router = Router()


# –°–ø–∏—Å–æ–∫ –∫—Ä—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –†–æ—Å—Å–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
CITIES = [
    "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å",
    "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–°–∞–º–∞—Ä–∞", "–û–º—Å–∫", "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É",
    "–£—Ñ–∞", "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", "–í–æ—Ä–æ–Ω–µ–∂", "–ü–µ—Ä–º—å", "–í–æ–ª–≥–æ–≥—Ä–∞–¥", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
    "–°–∞—Ä–∞—Ç–æ–≤", "–¢—é–º–µ–Ω—å", "–¢–æ–ª—å—è—Ç—Ç–∏", "–ò–∂–µ–≤—Å–∫", "–ë–∞—Ä–Ω–∞—É–ª", "–£–ª—å—è–Ω–æ–≤—Å–∫",
    "–ò—Ä–∫—É—Ç—Å–∫", "–•–∞–±–∞—Ä–æ–≤—Å–∫", "–Ø—Ä–æ—Å–ª–∞–≤–ª—å", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "–ú–∞—Ö–∞—á–∫–∞–ª–∞",
    "–¢–æ–º—Å–∫", "–û—Ä–µ–Ω–±—É—Ä–≥", "–ö–µ–º–µ—Ä–æ–≤–æ", "–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫", "–†—è–∑–∞–Ω—å", "–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å",
    "–ü–µ–Ω–∑–∞", "–õ–∏–ø–µ—Ü–∫", "–¢—É–ª–∞", "–ö–∏—Ä–æ–≤", "–ß–µ–±–æ–∫—Å–∞—Ä—ã", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥",
    "–ö—É—Ä—Å–∫", "–£–ª–∞–Ω-–£–¥—ç", "–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å", "–ú–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫", "–°–æ—á–∏"
]

MONTHS = [
    "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
    "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
]


@router.callback_query(F.data == "comp:search")
async def start_search_competitions(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π"""

    text = (
        "üîç <b>–ü–û–ò–°–ö –°–û–†–ï–í–ù–û–í–ê–ù–ò–ô</b>\n\n"
        "–ù–∞–π–¥–∏—Ç–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É –≥–æ—Ä–æ–¥—É!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:"
    )

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏
    builder = InlineKeyboardBuilder()

    # –¢–æ–ø-10 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    popular_cities = CITIES[:10]

    for i in range(0, len(popular_cities), 2):
        row_buttons = []
        row_buttons.append(
            InlineKeyboardButton(
                text=popular_cities[i],
                callback_data=f"comp:city:{popular_cities[i]}"
            )
        )
        if i + 1 < len(popular_cities):
            row_buttons.append(
                InlineKeyboardButton(
                    text=popular_cities[i + 1],
                    callback_data=f"comp:city:{popular_cities[i + 1]}"
                )
            )
        builder.row(*row_buttons)

    builder.row(
        InlineKeyboardButton(text="üìç –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="comp:city_other")
    )
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="comp:menu")
    )

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data == "comp:city_other")
async def show_all_cities(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≥–æ—Ä–æ–¥–∞"""

    text = (
        "üîç <b>–í–´–ë–û–† –ì–û–†–û–î–ê</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:"
    )

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Å–µ–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏
    builder = InlineKeyboardBuilder()

    for i in range(0, len(CITIES), 2):
        row_buttons = []
        row_buttons.append(
            InlineKeyboardButton(
                text=CITIES[i],
                callback_data=f"comp:city:{CITIES[i]}"
            )
        )
        if i + 1 < len(CITIES):
            row_buttons.append(
                InlineKeyboardButton(
                    text=CITIES[i + 1],
                    callback_data=f"comp:city:{CITIES[i + 1]}"
                )
            )
        builder.row(*row_buttons)

    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="comp:search")
    )

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("comp:city:"))
async def select_city(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞"""

    city = callback.data.split(":", 2)[2]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
    await state.update_data(search_city=city)

    text = (
        f"üìç <b>–ì–æ—Ä–æ–¥: {city}</b>\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π:"
    )

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ—Å—è—Ü–∞–º–∏
    builder = InlineKeyboardBuilder()

    current_month = datetime.now().month

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–µ 11 –º–µ—Å—è—Ü–µ–≤
    for i in range(12):
        month_index = (current_month - 1 + i) % 12
        month_number = month_index + 1
        month_name = MONTHS[month_index]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ–¥
        year = datetime.now().year
        if current_month + i > 12:
            year += 1

        builder.row(
            InlineKeyboardButton(
                text=f"{month_name} {year}",
                callback_data=f"comp:month:{city}:{year}-{month_number:02d}"
            )
        )

    builder.row(
        InlineKeyboardButton(text="üìÖ –í—Å–µ –º–µ—Å—è—Ü—ã", callback_data=f"comp:month:{city}:all")
    )
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="comp:search")
    )

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("comp:month:"))
async def search_by_city_and_month(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∏—Å–∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥—É –∏ –º–µ—Å—è—Ü—É"""

    parts = callback.data.split(":", 3)
    city = parts[2]
    period = parts[3]  # YYYY-MM –∏–ª–∏ 'all'

    await callback.answer("üîç –ò—â—É —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è...", show_alert=False)

    # –ò—â–µ–º —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    from competitions.search_queries import search_competitions_by_city_and_month

    competitions = await search_competitions_by_city_and_month(city, period)

    if not competitions:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ë–î, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Russia Running API
        from competitions.competitions_parser import load_competitions_from_api, add_competition

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API
        try:
            # –ü–∞—Ä—Å–∏–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ API
            if period != 'all':
                year, month = period.split('-')
                api_comps = await load_competitions_from_api(
                    city=city,
                    year=int(year),
                    month=int(month)
                )
            else:
                api_comps = await load_competitions_from_api(city=city)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
            added = 0
            for comp_data in api_comps:
                try:
                    await add_competition(comp_data)
                    added += 1
                except:
                    pass

            if added > 0:
                # –ò—â–µ–º —Å–Ω–æ–≤–∞
                competitions = await search_competitions_by_city_and_month(city, period)

        except Exception as e:
            logger.error(f"Error loading competitions from Russia Running API: {e}")

    if not competitions:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if period == 'all':
            period_text = "–≤—Å–µ –º–µ—Å—è—Ü—ã"
        else:
            year, month = period.split('-')
            month_name = MONTHS[int(month) - 1]
            period_text = f"{month_name} {year}"

        text = (
            f"üîç <b>–ü–û–ò–°–ö –°–û–†–ï–í–ù–û–í–ê–ù–ò–ô</b>\n\n"
            f"üìç –ì–æ—Ä–æ–¥: <b>{city}</b>\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: <b>{period_text}</b>\n\n"
            f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            f"‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –º–µ—Å—è—Ü\n"
            f"‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥\n"
            f"‚Ä¢ –ò–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—ë —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é"
        )

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üìç –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="comp:search")
        )
        builder.row(
            InlineKeyboardButton(text="üìÖ –î—Ä—É–≥–æ–π –º–µ—Å—è—Ü", callback_data=f"comp:city:{city}")
        )
        builder.row(
            InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å–≤–æ—ë", callback_data="comp:create_custom")
        )
        builder.row(
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="comp:menu")
        )

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if period == 'all':
        period_text = "–≤—Å–µ –º–µ—Å—è—Ü—ã"
    else:
        year, month = period.split('-')
        month_name = MONTHS[int(month) - 1]
        period_text = f"{month_name} {year}"

    text = (
        f"üîç <b>–ù–ê–ô–î–ï–ù–û –°–û–†–ï–í–ù–û–í–ê–ù–ò–ô: {len(competitions)}</b>\n\n"
        f"üìç –ì–æ—Ä–æ–¥: <b>{city}</b>\n"
        f"üìÖ –ü–µ—Ä–∏–æ–¥: <b>{period_text}</b>\n\n"
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π
    from competitions.competitions_keyboards import format_competition_distance, format_time_until_competition

    for i, comp in enumerate(competitions[:5], 1):
        try:
            comp_date = datetime.strptime(comp['date'], '%Y-%m-%d')
            date_str = comp_date.strftime('%d.%m.%Y')
        except:
            date_str = comp['date']

        time_until = format_time_until_competition(comp['date'])

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
        try:
            import json
            distances = comp.get('distances', [])
            if isinstance(distances, str):
                distances = json.loads(distances)

            if distances:
                distances_str = ', '.join([format_competition_distance(float(d)) for d in distances])
            else:
                distances_str = '–î–∏—Å—Ç–∞–Ω—Ü–∏–∏ —É—Ç–æ—á–Ω—è—é—Ç—Å—è'
        except:
            distances_str = '–î–∏—Å—Ç–∞–Ω—Ü–∏–∏ —É—Ç–æ—á–Ω—è—é—Ç—Å—è'

        text += (
            f"{i}. <b>{comp['name']}</b>\n"
            f"   üìÖ {date_str} ({time_until})\n"
            f"   üèÉ {distances_str}\n\n"
        )

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º–∏
    builder = InlineKeyboardBuilder()

    for i, comp in enumerate(competitions[:5], 1):
        comp_name_short = comp['name'][:40] + "..." if len(comp['name']) > 40 else comp['name']
        builder.row(
            InlineKeyboardButton(
                text=f"{i}. {comp_name_short}",
                callback_data=f"comp:view:{comp['id']}"
            )
        )

    if len(competitions) > 5:
        text += f"\n<i>–ü–æ–∫–∞–∑–∞–Ω–æ 5 –∏–∑ {len(competitions)} —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π</i>"

    builder.row(
        InlineKeyboardButton(text="üìÖ –î—Ä—É–≥–æ–π –º–µ—Å—è—Ü", callback_data=f"comp:city:{city}")
    )
    builder.row(
        InlineKeyboardButton(text="üìç –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="comp:search")
    )
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="comp:menu")
    )

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())
