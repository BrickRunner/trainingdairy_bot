"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —É—á–µ–Ω–∏–∫—É —Ç—Ä–µ–Ω–µ—Ä–æ–º
"""

import logging
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from bot.fsm import CoachStates
from bot.keyboards import get_training_types_keyboard, get_date_keyboard, get_skip_keyboard, get_fatigue_keyboard
from coach.coach_training_queries import add_training_for_student, can_coach_access_student, get_student_display_name
from database.queries import get_main_training_types

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data.startswith("coach:add_training:"))
async def start_add_training_for_student(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
    student_id = int(callback.data.split(":")[2])
    coach_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not await can_coach_access_student(coach_id, student_id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —É—á–µ–Ω–∏–∫—É", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º student_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(student_id=student_id, coach_id=coach_id)

    # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —É—á–µ–Ω–∏–∫–∞
    main_types = await get_main_training_types(student_id)
    display_name = await get_student_display_name(coach_id, student_id)

    await callback.message.edit_text(
        f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è {display_name}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
        reply_markup=get_training_types_keyboard(main_types if main_types else None),
        parse_mode="HTML"
    )
    await state.set_state(CoachStates.waiting_for_student_training_type)
    await callback.answer()


@router.callback_query(CoachStates.waiting_for_student_training_type, F.data.startswith("training_type:"))
async def process_training_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    training_type = callback.data.split(":")[1]
    await state.update_data(type=training_type)

    await callback.message.answer(
        f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø: {training_type.capitalize()}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
        reply_markup=get_date_keyboard()
    )
    await state.set_state(CoachStates.waiting_for_student_training_date)
    await callback.answer()


@router.message(CoachStates.waiting_for_student_training_date)
async def process_training_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    text = message.text.strip()
    today = datetime.now().date()

    if text == "üìÖ –°–µ–≥–æ–¥–Ω—è":
        date = today
    elif text == "üìÖ –í—á–µ—Ä–∞":
        date = today - timedelta(days=1)
    elif text == "üìù –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.01.2025):",
            reply_markup=get_skip_keyboard()
        )
        return
    else:
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥—ë–Ω–Ω—É—é –¥–∞—Ç—É
        try:
            date = datetime.strptime(text, "%d.%m.%Y").date()
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
                reply_markup=get_date_keyboard()
            )
            return

    await state.update_data(date=date.strftime("%Y-%m-%d"))

    await message.answer(
        f"–î–∞—Ç–∞: {date.strftime('%d.%m.%Y')}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–ß–ß:–ú–ú) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:",
        reply_markup=get_skip_keyboard()
    )
    await state.set_state(CoachStates.waiting_for_student_training_time)


@router.message(CoachStates.waiting_for_student_training_time)
async def process_training_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    text = message.text.strip()

    if text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(time=None)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        import re
        if not re.match(r'^\d{1,2}:\d{2}$', text):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30)",
                reply_markup=get_skip_keyboard()
            )
            return
        await state.update_data(time=text)

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö:",
        reply_markup=get_skip_keyboard()
    )
    await state.set_state(CoachStates.waiting_for_student_training_duration)


@router.message(CoachStates.waiting_for_student_training_duration)
async def process_training_duration(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    text = message.text.strip()

    if text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return

    try:
        duration = int(text)
        if duration <= 0:
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç",
            reply_markup=get_skip_keyboard()
        )
        return

    await state.update_data(duration=duration)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    data = await state.get_data()
    training_type = data.get('type')

    # –î–ª—è –∫—Ä–æ—Å—Å–∞, –ø–ª–∞–≤–∞–Ω–∏—è, –≤–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω—É–∂–Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏—è
    if training_type in ['–∫—Ä–æ—Å—Å', '–ø–ª–∞–≤–∞–Ω–∏–µ', '–≤–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞']:
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –≤ –∫–º:",
            reply_markup=get_skip_keyboard()
        )
        await state.set_state(CoachStates.waiting_for_student_training_distance)
    # –î–ª—è —Å–∏–ª–æ–≤–æ–π - —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    elif training_type == '—Å–∏–ª–æ–≤–∞—è':
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:",
            reply_markup=get_skip_keyboard()
        )
        await state.set_state(CoachStates.waiting_for_student_training_exercises)
    # –î–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π - –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    elif training_type == '–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è':
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '10x400–º') –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:",
            reply_markup=get_skip_keyboard()
        )
        await state.set_state(CoachStates.waiting_for_student_training_intervals)
    else:
        # –°—Ä–∞–∑—É –∫ –ø—É–ª—å—Å—É
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:",
            reply_markup=get_skip_keyboard()
        )
        await state.set_state(CoachStates.waiting_for_student_training_avg_pulse)


@router.message(CoachStates.waiting_for_student_training_distance)
async def process_training_distance(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    text = message.text.strip()

    if text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(distance=None, avg_pace=None)
    else:
        try:
            distance = float(text.replace(',', '.'))
            if distance <= 0:
                raise ValueError

            # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–º–ø
            data = await state.get_data()
            duration = data.get('duration')
            if duration and distance:
                avg_pace_minutes = duration / distance
                pace_min = int(avg_pace_minutes)
                pace_sec = int((avg_pace_minutes - pace_min) * 60)
                avg_pace = f"{pace_min:02d}:{pace_sec:02d}"
                await state.update_data(distance=distance, avg_pace=avg_pace, pace_unit='–º–∏–Ω/–∫–º')
            else:
                await state.update_data(distance=distance, avg_pace=None)
        except ValueError:
            await message.answer(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –∏–ª–∏ 10.5)",
                reply_markup=get_skip_keyboard()
            )
            return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:",
        reply_markup=get_skip_keyboard()
    )
    await state.set_state(CoachStates.waiting_for_student_training_avg_pulse)


@router.message(CoachStates.waiting_for_student_training_exercises)
async def process_training_exercises(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (—Å–∏–ª–æ–≤–∞—è)"""
    text = message.text.strip()

    if text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(exercises=None)
    else:
        await state.update_data(exercises=text)

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:",
        reply_markup=get_skip_keyboard()
    )
    await state.set_state(CoachStates.waiting_for_student_training_avg_pulse)


@router.message(CoachStates.waiting_for_student_training_intervals)
async def process_training_intervals(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã"""
    text = message.text.strip()

    if text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(intervals=None)
    else:
        await state.update_data(intervals=text)

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:",
        reply_markup=get_skip_keyboard()
    )
    await state.set_state(CoachStates.waiting_for_student_training_avg_pulse)


@router.message(CoachStates.waiting_for_student_training_avg_pulse)
async def process_avg_pulse(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å"""
    text = message.text.strip()

    if text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(avg_pulse=None)
    else:
        try:
            avg_pulse = int(text)
            if avg_pulse <= 0 or avg_pulse > 250:
                raise ValueError
            await state.update_data(avg_pulse=avg_pulse)
        except ValueError:
            await message.answer(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É–ª—å—Å–∞ (40-250)",
                reply_markup=get_skip_keyboard()
            )
            return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:",
        reply_markup=get_skip_keyboard()
    )
    await state.set_state(CoachStates.waiting_for_student_training_max_pulse)


@router.message(CoachStates.waiting_for_student_training_max_pulse)
async def process_max_pulse(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å"""
    text = message.text.strip()

    if text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(max_pulse=None)
    else:
        try:
            max_pulse = int(text)
            if max_pulse <= 0 or max_pulse > 250:
                raise ValueError
            await state.update_data(max_pulse=max_pulse)
        except ValueError:
            await message.answer(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É–ª—å—Å–∞ (40-250)",
                reply_markup=get_skip_keyboard()
            )
            return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:",
        reply_markup=get_skip_keyboard()
    )
    await state.set_state(CoachStates.waiting_for_student_training_comment)


@router.message(CoachStates.waiting_for_student_training_comment)
async def process_training_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
    text = message.text.strip()

    if text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(comment=None)
    else:
        await state.update_data(comment=text)

    await message.answer(
        "–û—Ü–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å —É—Å–∏–ª–∏–π (1-10):",
        reply_markup=get_fatigue_keyboard()
    )
    await state.set_state(CoachStates.waiting_for_student_training_fatigue)


@router.callback_query(CoachStates.waiting_for_student_training_fatigue, F.data.startswith("fatigue:"))
async def process_training_fatigue(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —É—Å–∏–ª–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
    fatigue = int(callback.data.split(":")[1])
    await state.update_data(fatigue_level=fatigue)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    student_id = data.get('student_id')
    coach_id = data.get('coach_id')

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    training_data = {
        'type': data.get('type'),
        'date': data.get('date'),
        'time': data.get('time'),
        'duration': data.get('duration'),
        'distance': data.get('distance'),
        'avg_pace': data.get('avg_pace'),
        'pace_unit': data.get('pace_unit'),
        'avg_pulse': data.get('avg_pulse'),
        'max_pulse': data.get('max_pulse'),
        'exercises': data.get('exercises'),
        'intervals': data.get('intervals'),
        'calculated_volume': None,  # –í—ã—á–∏—Å–ª–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        'description': None,
        'results': None,
        'comment': data.get('comment'),
        'fatigue_level': fatigue,
        'is_planned': 1 if datetime.strptime(data.get('date'), "%Y-%m-%d").date() > datetime.now().date() else 0
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    training_id = await add_training_for_student(coach_id, student_id, training_data)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–µ–Ω–∏–∫–∞
    display_name = await get_student_display_name(coach_id, student_id)
    try:
        training_date = datetime.strptime(data.get('date'), "%Y-%m-%d").strftime("%d.%m.%Y")
        await callback.bot.send_message(
            student_id,
            f"üë®‚Äçüè´ <b>–ù–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞</b>\n\n"
            f"–¢–∏–ø: {data.get('type').capitalize()}\n"
            f"–î–∞—Ç–∞: {training_date}\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data.get('duration')} –º–∏–Ω\n"
            + (f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {data.get('distance')} –∫–º\n" if data.get('distance') else "")
            + (f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ç—Ä–µ–Ω–µ—Ä–∞:\n{data.get('comment')}" if data.get('comment') else ""),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Failed to notify student: {e}")

    await callback.message.edit_text(
        f"‚úÖ <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
        f"–£—á–µ–Ω–∏–∫ {display_name} –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
        parse_mode="HTML"
    )
    await state.clear()
    await callback.answer()
