"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞ —É—á–µ–Ω–∏–∫—É
"""

import logging
import json
from datetime import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.fsm import CompetitionStates
from coach.coach_training_queries import can_coach_access_student, get_student_display_name
from competitions.competitions_queries import add_competition, get_competition
from database.queries import get_user

logger = logging.getLogger(__name__)
router = Router()


# ========== –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –°–û–†–ï–í–ù–û–í–ê–ù–ò–Ø –£–ß–ï–ù–ò–ö–£ ==========

@router.callback_query(F.data.startswith("coach:propose_comp:"))
async def start_propose_competition(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è —É—á–µ–Ω–∏–∫—É"""

    student_id = int(callback.data.split(":")[2])
    coach_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not await can_coach_access_student(coach_id, student_id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    display_name = await get_student_display_name(coach_id, student_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º student_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(propose_student_id=student_id)

    text = (
        f"üèÜ <b>–ü–†–ï–î–õ–û–ñ–ò–¢–¨ –°–û–†–ï–í–ù–û–í–ê–ù–ò–ï</b>\n\n"
        f"–£—á–µ–Ω–∏–∫: <b>{display_name}</b>\n\n"
        f"üìù <b>–®–∞–≥ 1 –∏–∑ 5</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è:\n"
        f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–æ–≤—Å–∫–∏–π –º–∞—Ä–∞—Ñ–æ–Ω 2026</i>"
    )

    await callback.message.edit_text(text, parse_mode="HTML")
    await state.set_state(CompetitionStates.waiting_for_comp_name)
    await callback.answer()


@router.message(CompetitionStates.waiting_for_comp_name)
async def process_proposed_comp_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ flow –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞ (–µ—Å—Ç—å propose_student_id)
    data = await state.get_data()
    if 'propose_student_id' not in data:
        # –≠—Ç–æ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π flow, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        return

    comp_name = message.text.strip()

    if not comp_name or len(comp_name) < 3:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∏–Ω–∏–º—É–º –∏–∑ 3 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    await state.update_data(comp_name=comp_name)

    text = (
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{comp_name}</b>\n\n"
        f"üìù <b>–®–∞–≥ 2 –∏–∑ 5</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ <b>–¥–∞—Ç—É</b> —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è:\n"
        f"<i>–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n–ù–∞–ø—Ä–∏–º–µ—Ä: 25.09.2026</i>"
    )

    await message.answer(text, parse_mode="HTML")
    await state.set_state(CompetitionStates.waiting_for_comp_date)


@router.message(CompetitionStates.waiting_for_comp_date)
async def process_proposed_comp_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞—Ç—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ flow –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞
    data = await state.get_data()
    if 'propose_student_id' not in data:
        return

    from datetime import date
    date_text = message.text.strip()

    try:
        comp_date = datetime.strptime(date_text, '%d.%m.%Y').date()

        if comp_date < date.today():
            await message.answer(
                "‚ùå –î–∞—Ç–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:"
            )
            return

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.09.2026"
        )
        return

    await state.update_data(comp_date=comp_date.strftime('%Y-%m-%d'))

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üèÉ –ë–µ–≥", callback_data="comptype:running"))
    builder.row(InlineKeyboardButton(text="üèä –ü–ª–∞–≤–∞–Ω–∏–µ", callback_data="comptype:swimming"))
    builder.row(InlineKeyboardButton(text="üö¥ –í–µ–ª–æ—Å–ø–æ—Ä—Ç", callback_data="comptype:cycling"))
    builder.row(InlineKeyboardButton(text="üèä‚Äç‚ôÇÔ∏èüö¥‚Äç‚ôÇÔ∏èüèÉ –¢—Ä–∏–∞—Ç–ª–æ–Ω", callback_data="comptype:triathlon"))
    builder.row(InlineKeyboardButton(text="‚õ∞Ô∏è –¢—Ä–µ–π–ª", callback_data="comptype:trail"))

    text = (
        f"‚úÖ –î–∞—Ç–∞: <b>{comp_date.strftime('%d.%m.%Y')}</b>\n\n"
        f"üìù <b>–®–∞–≥ 3 –∏–∑ 5</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ <b>–≤–∏–¥ —Å–ø–æ—Ä—Ç–∞</b>:"
    )

    await message.answer(text, parse_mode="HTML", reply_markup=builder.as_markup())
    await state.set_state(CompetitionStates.waiting_for_comp_type)


@router.callback_query(F.data.startswith("comptype:"), CompetitionStates.waiting_for_comp_type)
async def process_proposed_comp_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ flow –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞
    data = await state.get_data()
    if 'propose_student_id' not in data:
        return

    comp_type_map = {
        "running": "–±–µ–≥",
        "swimming": "–ø–ª–∞–≤–∞–Ω–∏–µ",
        "cycling": "–≤–µ–ª–æ—Å–ø–æ—Ä—Ç",
        "triathlon": "—Ç—Ä–∏–∞—Ç–ª–æ–Ω",
        "trail": "—Ç—Ä–µ–π–ª"
    }

    comp_type_key = callback.data.split(":")[1]
    comp_type = comp_type_map.get(comp_type_key, "–±–µ–≥")

    await state.update_data(comp_type=comp_type)

    text = (
        f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: <b>{comp_type}</b>\n\n"
        f"üìù <b>–®–∞–≥ 4 –∏–∑ 5</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ <b>–¥–∏—Å—Ç–∞–Ω—Ü–∏—é</b>:\n"
        f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 42.195 (–¥–ª—è –º–∞—Ä–∞—Ñ–æ–Ω–∞)\n"
        f"–ò–ª–∏: 21.1 (–¥–ª—è –ø–æ–ª—É–º–∞—Ä–∞—Ñ–æ–Ω–∞)\n"
        f"–ò–ª–∏: 10 (–¥–ª—è 10 –∫–º)</i>"
    )

    await callback.message.edit_text(text, parse_mode="HTML")
    await state.set_state(CompetitionStates.waiting_for_comp_distance)
    await callback.answer()


@router.message(CompetitionStates.waiting_for_comp_distance)
async def process_proposed_comp_distance(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ flow –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞
    data = await state.get_data()
    if 'propose_student_id' not in data:
        return

    distance_text = message.text.strip().replace(',', '.')

    try:
        distance = float(distance_text)

        if distance <= 0 or distance > 500:
            await message.answer(
                "‚ùå –î–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0.1 –¥–æ 500 –∫–º.\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
            )
            return

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏.\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 42.195 –∏–ª–∏ 10):"
        )
        return

    await state.update_data(comp_distance=distance)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
    if distance == 42.195 or distance == 42.2:
        distance_name = "–ú–∞—Ä–∞—Ñ–æ–Ω (42.195 –∫–º)"
    elif distance == 21.1 or distance == 21.0975:
        distance_name = "–ü–æ–ª—É–º–∞—Ä–∞—Ñ–æ–Ω (21.1 –∫–º)"
    elif distance == 10:
        distance_name = "10 –∫–º"
    elif distance == 5:
        distance_name = "5 –∫–º"
    else:
        distance_name = f"{distance} –∫–º"

    text = (
        f"‚úÖ –î–∏—Å—Ç–∞–Ω—Ü–∏—è: <b>{distance_name}</b>\n\n"
        f"üìù <b>–®–∞–≥ 5 –∏–∑ 5</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ <b>—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è</b> –¥–ª—è —É—á–µ–Ω–∏–∫–∞:\n"
        f"<i>–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú:–°–°\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: 03:30:00 (3 —á–∞—Å–∞ 30 –º–∏–Ω—É—Ç)\n"
        f"–ò–ª–∏: 00:45:00 (45 –º–∏–Ω—É—Ç)</i>\n\n"
        f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>0</b>, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ü–µ–ª—å."
    )

    await message.answer(text, parse_mode="HTML")
    await state.set_state(CompetitionStates.waiting_for_comp_target)


@router.message(CompetitionStates.waiting_for_comp_target)
async def process_proposed_comp_target_and_send(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ flow –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞
    data = await state.get_data()
    if 'propose_student_id' not in data:
        return

    target_text = message.text.strip()
    target_time = None

    if target_text != "0":
        try:
            time_parts = target_text.split(':')
            if len(time_parts) == 3:
                hours, minutes, seconds = map(int, time_parts)
                if 0 <= hours <= 24 and 0 <= minutes < 60 and 0 <= seconds < 60:
                    target_time = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
                else:
                    raise ValueError
            elif len(time_parts) == 2:
                minutes, seconds = map(int, time_parts)
                if 0 <= minutes < 60 and 0 <= seconds < 60:
                    target_time = f"00:{minutes:02d}:{seconds:02d}"
                else:
                    raise ValueError
            else:
                raise ValueError
        except (ValueError, AttributeError):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú:–°–° (–Ω–∞–ø—Ä–∏–º–µ—Ä: 03:30:00)\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
            )
            return

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    student_id = data.get('propose_student_id')
    comp_name = data.get('comp_name')
    comp_date = data.get('comp_date')
    comp_type = data.get('comp_type')
    comp_distance = data.get('comp_distance')

    coach_id = message.from_user.id

    try:
        # –°–æ–∑–¥–∞—ë–º —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –≤ –ë–î
        competition_data = {
            'name': comp_name,
            'date': comp_date,
            'type': comp_type,
            'distances': json.dumps([comp_distance]),
            'status': 'upcoming',
            'created_by': coach_id,
            'is_official': 0,
            'registration_status': 'open'
        }

        comp_id = await add_competition(competition_data)

        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å —É—á–∞—Å—Ç–∏—è —Å —Ñ–ª–∞–≥–æ–º "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ —Ç—Ä–µ–Ω–µ—Ä–æ–º"
        import aiosqlite
        import os
        DB_PATH = os.getenv('DB_PATH', 'database.sqlite')

        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute(
                """
                INSERT INTO competition_participants
                (participant_id, competition_id, distance, target_time,
                 proposed_by_coach, proposed_by_coach_id, proposal_status, reminders_enabled)
                VALUES (?, ?, ?, ?, 1, ?, 'pending', 0)
                """,
                (student_id, comp_id, comp_distance, target_time, coach_id)
            )
            await db.commit()

        logger.info(f"Coach {coach_id} proposed competition {comp_id} to student {student_id}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç—Ä–µ–Ω–µ—Ä–∞
        coach = await get_user(coach_id)
        coach_name = coach.get('name') or coach.get('username') or '–í–∞—à —Ç—Ä–µ–Ω–µ—Ä'

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É
        student_display_name = await get_student_display_name(coach_id, student_id)

        notification_text = (
            f"üèÜ <b>–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –û–¢ –¢–†–ï–ù–ï–†–ê</b>\n\n"
            f"<b>{coach_name}</b> –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏:\n\n"
            f"üìå <b>{comp_name}</b>\n"
            f"üìÖ –î–∞—Ç–∞: {datetime.strptime(comp_date, '%Y-%m-%d').strftime('%d.%m.%Y')}\n"
            f"üèÉ –í–∏–¥: {comp_type}\n"
            f"üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {comp_distance} –∫–º\n"
        )

        if target_time:
            notification_text += f"üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–ª—å: {target_time}\n"

        notification_text += "\n–ß—Ç–æ –≤—ã —Ä–µ—à–∏—Ç–µ?"

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                callback_data=f"student:accept_comp:{comp_id}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data=f"student:reject_comp:{comp_id}"
            )
        )

        await message.bot.send_message(
            student_id,
            notification_text,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä—É
        text = (
            "‚úÖ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
            f"–£—á–µ–Ω–∏–∫ <b>{student_display_name}</b> –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏:\n\n"
            f"üèÜ <b>{comp_name}</b>\n"
            f"üìÖ {datetime.strptime(comp_date, '%Y-%m-%d').strftime('%d.%m.%Y')}\n"
            f"üìè {comp_distance} –∫–º\n\n"
            f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —É—á–µ–Ω–∏–∫ –ø—Ä–∏–º–µ—Ç —Ä–µ—à–µ–Ω–∏–µ."
        )

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text=f"¬´ –ö —É—á–µ–Ω–∏–∫—É {student_display_name}",
                callback_data=f"coach:student:{student_id}"
            )
        )

        await message.answer(text, parse_mode="HTML", reply_markup=builder.as_markup())

        await state.clear()

    except Exception as e:
        logger.error(f"Error proposing competition: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."
        )
        await state.clear()


# ========== –û–¢–í–ï–¢ –£–ß–ï–ù–ò–ö–ê –ù–ê –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï ==========

@router.callback_query(F.data.startswith("student:accept_comp:"))
async def student_accept_competition(callback: CallbackQuery):
    """–£—á–µ–Ω–∏–∫ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"""

    comp_id = int(callback.data.split(":")[2])
    student_id = callback.from_user.id

    import aiosqlite
    import os
    DB_PATH = os.getenv('DB_PATH', 'database.sqlite')

    try:
        async with aiosqlite.connect(DB_PATH) as db:
            db.row_factory = aiosqlite.Row

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
            async with db.execute(
                """
                SELECT cp.*, c.name, c.date, c.type, coach_id
                FROM competition_participants cp
                JOIN competitions c ON cp.competition_id = c.id
                WHERE cp.competition_id = ? AND cp.participant_id = ? AND cp.proposal_status = 'pending'
                """,
                (comp_id, student_id)
            ) as cursor:
                row = await cursor.fetchone()

            if not row:
                await callback.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return

            proposal = dict(row)
            coach_id = proposal.get('proposed_by_coach_id')

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤–∫–ª—é—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            await db.execute(
                """
                UPDATE competition_participants
                SET proposal_status = 'accepted', reminders_enabled = 1
                WHERE competition_id = ? AND participant_id = ?
                """,
                (comp_id, student_id)
            )
            await db.commit()

        # –°–æ–∑–¥–∞—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        from competitions.reminder_scheduler import create_reminders_for_competition
        await create_reminders_for_competition(student_id, comp_id, proposal['date'])

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞
        coach = await get_user(coach_id)
        student = await get_user(student_id)
        student_name = student.get('name') or student.get('username') or '–£—á–µ–Ω–∏–∫'

        await callback.bot.send_message(
            coach_id,
            f"‚úÖ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!</b>\n\n"
            f"–£—á–µ–Ω–∏–∫ <b>{student_name}</b> –ø—Ä–∏–Ω—è–ª —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏:\n"
            f"üèÜ {proposal['name']}",
            parse_mode="HTML"
        )

        # –û—Ç–≤–µ—á–∞–µ–º —É—á–µ–Ω–∏–∫—É
        text = (
            f"‚úÖ <b>–í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ!</b>\n\n"
            f"üèÜ <b>{proposal['name']}</b>\n"
            f"üìÖ –î–∞—Ç–∞: {datetime.strptime(proposal['date'], '%Y-%m-%d').strftime('%d.%m.%Y')}\n\n"
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ–º.\n\n"
            f"–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª '–ú–æ–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è'."
        )

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚úÖ –ú–æ–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è", callback_data="comp:my")
        )

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())
        await callback.answer("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ!")

    except Exception as e:
        logger.error(f"Error accepting competition proposal: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", show_alert=True)


@router.callback_query(F.data.startswith("student:reject_comp:"))
async def student_reject_competition(callback: CallbackQuery):
    """–£—á–µ–Ω–∏–∫ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"""

    comp_id = int(callback.data.split(":")[2])
    student_id = callback.from_user.id

    import aiosqlite
    import os
    DB_PATH = os.getenv('DB_PATH', 'database.sqlite')

    try:
        async with aiosqlite.connect(DB_PATH) as db:
            db.row_factory = aiosqlite.Row

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
            async with db.execute(
                """
                SELECT cp.*, c.name, coach_id
                FROM competition_participants cp
                JOIN competitions c ON cp.competition_id = c.id
                WHERE cp.competition_id = ? AND cp.participant_id = ? AND cp.proposal_status = 'pending'
                """,
                (comp_id, student_id)
            ) as cursor:
                row = await cursor.fetchone()

            if not row:
                await callback.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return

            proposal = dict(row)
            coach_id = proposal.get('proposed_by_coach_id')

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await db.execute(
                """
                UPDATE competition_participants
                SET proposal_status = 'rejected'
                WHERE competition_id = ? AND participant_id = ?
                """,
                (comp_id, student_id)
            )
            await db.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞
        student = await get_user(student_id)
        student_name = student.get('name') or student.get('username') or '–£—á–µ–Ω–∏–∫'

        await callback.bot.send_message(
            coach_id,
            f"‚ùå <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\n\n"
            f"–£—á–µ–Ω–∏–∫ <b>{student_name}</b> –æ—Ç–∫–ª–æ–Ω–∏–ª —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏:\n"
            f"üèÜ {proposal['name']}",
            parse_mode="HTML"
        )

        # –û—Ç–≤–µ—á–∞–µ–º —É—á–µ–Ω–∏–∫—É
        await callback.message.edit_text(
            f"‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏:\n"
            f"üèÜ <b>{proposal['name']}</b>",
            parse_mode="HTML"
        )
        await callback.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")

    except Exception as e:
        logger.error(f"Error rejecting competition proposal: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", show_alert=True)
