"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–Ω–µ—Ä—Å–∫–∏–º —Ä–∞–∑–¥–µ–ª–æ–º
"""

import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from coach.coach_keyboards import (
    get_coach_main_menu,
    get_students_list_keyboard,
    get_student_detail_keyboard,
    get_confirm_remove_student_keyboard,
    get_add_coach_keyboard,
    get_student_coach_info_keyboard,
    get_confirm_remove_coach_keyboard
)
from coach.coach_queries import (
    is_user_coach,
    get_coach_link_code,
    get_coach_students,
    remove_student_from_coach,
    find_coach_by_code,
    add_student_to_coach,
    get_student_coach,
    remove_coach_from_student
)
from bot.fsm import CoachStates
from database.queries import get_user

logger = logging.getLogger(__name__)
router = Router()


# ========== –¢–†–ï–ù–ï–†–°–ö–ê–Ø –°–¢–û–†–û–ù–ê ==========

@router.callback_query(F.data == "coach:menu")
async def show_coach_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—Ä–µ–Ω–µ—Ä–∞"""
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç—Ä–µ–Ω–µ—Ä
    if not await is_user_coach(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É", show_alert=True)
        return

    await callback.message.edit_text(
        "üë®‚Äçüè´ <b>–†–∞–∑–¥–µ–ª —Ç—Ä–µ–Ω–µ—Ä–∞</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —É—á–µ–Ω–∏–∫–∞–º–∏, "
        "–ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å.",
        reply_markup=get_coach_main_menu()
    )
    await callback.answer()


@router.callback_query(F.data == "coach:students")
async def show_students_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤"""
    user_id = callback.from_user.id

    students = await get_coach_students(user_id)

    if not students:
        await callback.message.edit_text(
            "üë• <b>–ú–æ–∏ —É—á–µ–Ω–∏–∫–∏</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.\n\n"
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Å–≤–æ—é —Å—Å—ã–ª–∫—É:\n"
            "üëâ –¢—Ä–µ–Ω–µ—Ä ‚Üí –°—Å—ã–ª–∫–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤",
            reply_markup=get_students_list_keyboard([])
        )
    else:
        text = f"üë• <b>–ú–æ–∏ —É—á–µ–Ω–∏–∫–∏</b> ({len(students)})\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n"

        await callback.message.edit_text(
            text,
            reply_markup=get_students_list_keyboard(students)
        )

    await callback.answer()


@router.callback_query(F.data.startswith("coach:student:"))
async def show_student_detail(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —É—á–µ–Ω–∏–∫–∞"""
    from coach.coach_training_queries import get_student_display_name

    student_id = int(callback.data.split(":")[2])
    coach_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —É—á–µ–Ω–∏–∫ –¥–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
    students = await get_coach_students(coach_id)
    student = next((s for s in students if s['id'] == student_id), None)

    if not student:
        await callback.answer("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è (—Å —É—á—ë—Ç–æ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞)
    display_name = await get_student_display_name(coach_id, student_id)

    user_info = await get_user(student_id)

    text = f"üë§ <b>{display_name}</b>\n\n"
    text += f"üì± Telegram: @{student['username']}\n"
    text += f"üìÖ –ü–æ–¥–∫–ª—é—á—ë–Ω: {student['connected_at'][:10]}\n"

    await callback.message.edit_text(
        text,
        reply_markup=get_student_detail_keyboard(student_id),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("coach:student_trainings:"))
async def show_student_trainings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —É—á–µ–Ω–∏–∫–∞"""
    from coach.coach_training_queries import get_student_trainings, can_coach_access_student, get_student_display_name
    from coach.coach_keyboards import get_student_trainings_keyboard

    student_id = int(callback.data.split(":")[2])
    coach_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not await can_coach_access_student(coach_id, student_id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —É—á–µ–Ω–∏–∫—É", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    trainings = await get_student_trainings(student_id, limit=30)
    display_name = await get_student_display_name(coach_id, student_id)

    if not trainings:
        await callback.message.edit_text(
            f"üìä <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {display_name}</b>\n\n"
            "–£ —É—á–µ–Ω–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.",
            reply_markup=get_student_trainings_keyboard(student_id, []),
            parse_mode="HTML"
        )
    else:
        text = f"üìä <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {display_name}</b>\n\n"
        text += f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(trainings)} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n\n"

        await callback.message.edit_text(
            text,
            reply_markup=get_student_trainings_keyboard(student_id, trainings),
            parse_mode="HTML"
        )

    await callback.answer()


@router.callback_query(F.data.startswith("coach:student_stats:"))
async def show_student_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–µ–Ω–∏–∫–∞"""
    student_id = int(callback.data.split(":")[2])

    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—á–µ–Ω–∏–∫–∞
    await callback.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)


@router.callback_query(F.data.startswith("coach:student_health:"))
async def show_student_health(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–¥–æ—Ä–æ–≤—å–µ —É—á–µ–Ω–∏–∫–∞"""
    student_id = int(callback.data.split(":")[2])

    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–¥–æ—Ä–æ–≤—å—è —É—á–µ–Ω–∏–∫–∞
    await callback.answer("–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–¥–æ—Ä–æ–≤—å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)


@router.callback_query(F.data.startswith("coach:remove_student:"))
async def confirm_remove_student(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞"""
    student_id = int(callback.data.split(":")[2])
    coach_id = callback.from_user.id

    students = await get_coach_students(coach_id)
    student = next((s for s in students if s['id'] == student_id), None)

    if not student:
        await callback.answer("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ <b>{student['name']}</b>?\n\n"
        f"–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫ –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å –≤–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
        reply_markup=get_confirm_remove_student_keyboard(student_id)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("coach:confirm_remove:"))
async def remove_student(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞"""
    student_id = int(callback.data.split(":")[2])
    coach_id = callback.from_user.id

    await remove_student_from_coach(coach_id, student_id)

    await callback.message.edit_text(
        "‚úÖ –£—á–µ–Ω–∏–∫ —É–¥–∞–ª—ë–Ω",
        reply_markup=get_students_list_keyboard([])
    )
    await callback.answer()


@router.callback_query(F.data == "coach:link")
async def show_coach_link(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–≤"""
    user_id = callback.from_user.id

    link_code = await get_coach_link_code(user_id)

    if not link_code:
        await callback.answer("–û—à–∏–±–∫–∞: –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    bot_username = (await callback.bot.me()).username

    text = "üîó <b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤</b>\n\n"
    text += f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —Å–≤–æ–∏–º —É—á–µ–Ω–∏–∫–∞–º:\n\n"
    text += f"<code>https://t.me/{bot_username}?start=coach_{link_code}</code>\n\n"
    text += f"–ò–ª–∏ –∫–æ–¥ –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä—É—á–Ω—É—é:\n"
    text += f"<code>{link_code}</code>\n\n"
    text += "–ü–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ —É—á–µ–Ω–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –≤–∞–º."

    await callback.message.edit_text(
        text,
        reply_markup=get_coach_main_menu()
    )
    await callback.answer()


# ========== –£–ß–ï–ù–ò–ß–ï–°–ö–ê–Ø –°–¢–û–†–û–ù–ê ==========

@router.callback_query(F.data == "student:my_coach")
async def show_my_coach(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–µ—Ä–µ"""
    user_id = callback.from_user.id

    coach = await get_student_coach(user_id)

    if not coach:
        text = "üë®‚Äçüè´ <b>–ú–æ–π —Ç—Ä–µ–Ω–µ—Ä</b>\n\n"
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞.\n\n"
        text += "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ —É –Ω–µ–≥–æ –∫–æ–¥ "
        text += "–∏–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."

        await callback.message.edit_text(
            text,
            reply_markup=get_add_coach_keyboard()
        )
    else:
        text = f"üë®‚Äçüè´ <b>–ú–æ–π —Ç—Ä–µ–Ω–µ—Ä</b>\n\n"
        text += f"üë§ –ò–º—è: {coach['name']}\n"
        text += f"üì± Telegram: @{coach['username']}\n\n"
        text += "–í–∞—à —Ç—Ä–µ–Ω–µ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."

        await callback.message.edit_text(
            text,
            reply_markup=get_student_coach_info_keyboard()
        )

    await callback.answer()


@router.callback_query(F.data == "student:add_coach")
async def add_coach_prompt(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥ —Ç—Ä–µ–Ω–µ—Ä–∞"""
    await callback.message.edit_text(
        "‚úèÔ∏è <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç—Ä–µ–Ω–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª:",
    )
    await state.set_state(CoachStates.waiting_for_coach_code)
    await callback.answer()


@router.message(CoachStates.waiting_for_coach_code)
async def process_coach_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∫–æ–¥ —Ç—Ä–µ–Ω–µ—Ä–∞"""
    code = message.text.strip().upper()

    # –ò—â–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ –∫–æ–¥—É
    coach_id = await find_coach_by_code(code)

    if not coach_id:
        await message.answer(
            "‚ùå –ö–æ–¥ —Ç—Ä–µ–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å
    student_id = message.from_user.id
    success = await add_student_to_coach(coach_id, student_id)

    if success:
        coach = await get_user(coach_id)
        await message.answer(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —Ç—Ä–µ–Ω–µ—Ä—É!\n\n"
            f"–í–∞—à —Ç—Ä–µ–Ω–µ—Ä: {coach.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            f"–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–Ω–µ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞
        try:
            student_name = message.from_user.full_name
            await message.bot.send_message(
                coach_id,
                f"üéâ –ù–æ–≤—ã–π —É—á–µ–Ω–∏–∫!\n\n"
                f"–ö –≤–∞–º –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: {student_name}"
            )
        except Exception as e:
            logger.error(f"Failed to notify coach: {e}")
    else:
        await message.answer(
            "‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —ç—Ç–æ–º—É —Ç—Ä–µ–Ω–µ—Ä—É."
        )

    await state.clear()


@router.callback_query(F.data == "student:remove_coach")
async def confirm_remove_coach(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞"""
    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞?\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.",
        reply_markup=get_confirm_remove_coach_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "student:confirm_remove_coach")
async def remove_coach(callback: CallbackQuery):
    """–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞"""
    user_id = callback.from_user.id

    await remove_coach_from_student(user_id)

    await callback.message.edit_text(
        "‚úÖ –í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞",
        reply_markup=get_add_coach_keyboard()
    )
    await callback.answer()


# ========== –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò: –ü–°–ï–í–î–û–ù–ò–ú, –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò, –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–†–ï–ù–ò–†–û–í–û–ö ==========

@router.callback_query(F.data.startswith("coach:edit_nickname:"))
async def edit_nickname_prompt(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
    from coach.coach_training_queries import get_student_display_name

    student_id = int(callback.data.split(":")[2])
    coach_id = callback.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º student_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(student_id=student_id)

    display_name = await get_student_display_name(coach_id, student_id)

    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è: {display_name}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è —É—á–µ–Ω–∏–∫–∞:\n"
        f"(–ü—Å–µ–≤–¥–æ–Ω–∏–º –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ –≤–∞–º)",
        parse_mode="HTML"
    )
    await state.set_state(CoachStates.waiting_for_nickname)
    await callback.answer()


@router.message(CoachStates.waiting_for_nickname)
async def process_nickname(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º"""
    from coach.coach_training_queries import set_student_nickname

    data = await state.get_data()
    student_id = data.get('student_id')
    coach_id = message.from_user.id
    nickname = message.text.strip()

    await set_student_nickname(coach_id, student_id, nickname)

    await message.answer(
        f"‚úÖ –ü—Å–µ–≤–¥–æ–Ω–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {nickname}\n\n"
        f"–¢–µ–ø–µ—Ä—å —É—á–µ–Ω–∏–∫ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–¥ —ç—Ç–∏–º –∏–º–µ–Ω–µ–º."
    )

    await state.clear()


@router.callback_query(F.data.startswith("coach:training_detail:"))
async def show_training_detail(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —É—á–µ–Ω–∏–∫–∞"""
    from coach.coach_training_queries import get_training_with_comments, can_coach_access_student
    from coach.coach_keyboards import get_training_detail_keyboard

    parts = callback.data.split(":")
    training_id = int(parts[2])
    student_id = int(parts[3])
    coach_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not await can_coach_access_student(coach_id, student_id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    training = await get_training_with_comments(training_id)
    if not training:
        await callback.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
    text = f"üìä <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {training['type'].capitalize()}</b>\n\n"
    text += f"üìÖ –î–∞—Ç–∞: {training['date']}\n"
    text += f"‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {training['duration']} –º–∏–Ω\n"

    if training.get('distance'):
        text += f"üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {training['distance']} –∫–º\n"

    if training.get('avg_pace'):
        text += f"‚ö° –°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø: {training['avg_pace']} –º–∏–Ω/–∫–º\n"

    if training.get('avg_pulse'):
        text += f"üíì –°—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å: {training['avg_pulse']} bpm\n"

    if training.get('max_pulse'):
        text += f"üíó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å: {training['max_pulse']} bpm\n"

    if training.get('added_by_coach_id'):
        text += f"\nüë®‚Äçüè´ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç—Ä–µ–Ω–µ—Ä–æ–º: {training.get('coach_username', '–≤–∞–º–∏')}\n"

    if training.get('comment'):
        text += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—á–µ–Ω–∏–∫–∞:\n{training['comment']}\n"

    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç—Ä–µ–Ω–µ—Ä–∞
    comments = training.get('comments', [])
    if comments:
        text += f"\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ({len(comments)}):</b>\n"
        for comment in comments:
            author_name = comment.get('author_name') or comment.get('author_username')
            text += f"\n<i>{author_name}:</i> {comment['comment']}\n"

    await callback.message.edit_text(
        text,
        reply_markup=get_training_detail_keyboard(training_id, student_id, len(comments)),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("coach:add_comment:"))
async def add_comment_prompt(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"""
    parts = callback.data.split(":")
    training_id = int(parts[2])
    student_id = int(parts[3])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(training_id=training_id, student_id=student_id)

    await callback.message.edit_text(
        "üí¨ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ:",
        parse_mode="HTML"
    )
    await state.set_state(CoachStates.waiting_for_comment)
    await callback.answer()


@router.message(CoachStates.waiting_for_comment)
async def process_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
    from coach.coach_training_queries import add_comment_to_training

    data = await state.get_data()
    training_id = data.get('training_id')
    student_id = data.get('student_id')
    coach_id = message.from_user.id
    comment_text = message.text.strip()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    await add_comment_to_training(training_id, coach_id, comment_text)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–µ–Ω–∏–∫–∞
    try:
        await message.bot.send_message(
            student_id,
            f"üí¨ <b>–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞</b>\n\n"
            f"–ö –≤–∞—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n\n"
            f"<i>{comment_text}</i>",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Failed to notify student: {e}")

    await message.answer("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω! –£—á–µ–Ω–∏–∫ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")

    await state.clear()


@router.callback_query(F.data.startswith("coach:student_stats:"))
async def show_student_stats_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—á–µ–Ω–∏–∫–∞"""
    from coach.coach_training_queries import can_coach_access_student, get_student_display_name
    from coach.coach_keyboards import get_student_stats_period_keyboard

    student_id = int(callback.data.split(":")[2])
    coach_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not await can_coach_access_student(coach_id, student_id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    display_name = await get_student_display_name(coach_id, student_id)

    await callback.message.edit_text(
        f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–µ–Ω–∏–∫–∞ {display_name}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        parse_mode="HTML",
        reply_markup=get_student_stats_period_keyboard(student_id)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("coach:stats_period:"))
async def show_student_statistics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–µ–Ω–∏–∫–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    from coach.coach_training_queries import can_coach_access_student, get_student_display_name
    from database.queries import get_training_statistics, get_user_settings
    from utils.unit_converter import format_distance
    from datetime import datetime, timedelta

    parts = callback.data.split(":")
    student_id = int(parts[2])
    period = parts[3]
    coach_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not await can_coach_access_student(coach_id, student_id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    display_name = await get_student_display_name(coach_id, student_id)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
    settings = await get_user_settings(student_id)
    distance_unit = settings.get('distance_unit', '–∫–º') if settings else '–∫–º'

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await get_training_statistics(student_id, period)

    period_names = {"week": "–Ω–µ–¥–µ–ª—é", "2weeks": "2 –Ω–µ–¥–µ–ª–∏", "month": "–º–µ—Å—è—Ü"}
    period_name = period_names.get(period, "–ø–µ—Ä–∏–æ–¥")

    if stats['total_count'] == 0:
        await callback.message.edit_text(
            f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {display_name}</b>\n\n"
            f"–ó–∞ {period_name} –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.",
            parse_mode="HTML",
            reply_markup=get_student_stats_period_keyboard(student_id)
        )
        await callback.answer()
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    today = datetime.now().date()

    if period == 'week':
        start_date = today - timedelta(days=today.weekday())
        period_display = f"–Ω–µ–¥–µ–ª—é (—Å {start_date.strftime('%d.%m')} –ø–æ —Å–µ–≥–æ–¥–Ω—è)"
    elif period == '2weeks':
        start_date = today - timedelta(days=today.weekday() + 7)
        period_display = f"2 –Ω–µ–¥–µ–ª–∏ (—Å {start_date.strftime('%d.%m')} –ø–æ —Å–µ–≥–æ–¥–Ω—è)"
    elif period == 'month':
        start_date = today.replace(day=1)
        period_display = f"–º–µ—Å—è—Ü (—Å {start_date.strftime('%d.%m')} –ø–æ —Å–µ–≥–æ–¥–Ω—è)"
    else:
        period_display = period_name

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    message_text = f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {display_name}</b>\n"
    message_text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_display}\n\n"
    message_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    message_text += "üìä <b>–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n"
    message_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"

    # 1. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    message_text += f"üèÉ –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: <b>{stats['total_count']}</b>\n"

    # 2. –û–±—â–∏–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂
    if stats['total_distance'] > 0:
        message_text += f"üìè –û–±—â–∏–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂: <b>{format_distance(stats['total_distance'], distance_unit)}</b>\n"

        # –î–ª—è –ø–µ—Ä–∏–æ–¥–æ–≤ –±–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –∫–º –∑–∞ –Ω–µ–¥–µ–ª—é
        if period in ['2weeks', 'month']:
            days_in_period = (today - start_date).days + 1
            weeks_count = days_in_period / 7

            if weeks_count > 0:
                avg_per_week = stats['total_distance'] / weeks_count
                message_text += f"   <i>(–°—Ä–µ–¥–Ω–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: {format_distance(avg_per_week, distance_unit)})</i>\n"

    # 3. –¢–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
    if stats['types_count']:
        message_text += f"\nüìã <b>–¢–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b>\n"

        type_emoji = {
            '–∫—Ä–æ—Å—Å': 'üèÉ',
            '–ø–ª–∞–≤–∞–Ω–∏–µ': 'üèä',
            '–≤–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞': 'üö¥',
            '—Å–∏–ª–æ–≤–∞—è': 'üí™',
            '–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è': '‚ö°'
        }

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
        sorted_types = sorted(stats['types_count'].items(), key=lambda x: x[1], reverse=True)

        for t_type, count in sorted_types:
            emoji = type_emoji.get(t_type, 'üìù')
            percentage = (count / stats['total_count']) * 100
            message_text += f"  {emoji} {t_type.capitalize()}: {count} ({percentage:.1f}%)\n"

    # 4. –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —É—Å–∏–ª–∏–π
    if stats['avg_fatigue'] > 0:
        message_text += f"\nüí™ –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —É—Å–∏–ª–∏–π: <b>{stats['avg_fatigue']}/10</b>\n"

    from coach.coach_keyboards import get_student_stats_period_keyboard
    await callback.message.edit_text(
        message_text,
        parse_mode="HTML",
        reply_markup=get_student_stats_period_keyboard(student_id)
    )
    await callback.answer()
