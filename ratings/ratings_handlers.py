"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
import logging

from database.rating_queries import (
    get_user_rating,
    get_global_rankings,
    get_weekly_rankings,
    get_monthly_rankings,
    get_seasonal_rankings,
    get_user_rank
)
from database.level_queries import (
    get_user_level,
    get_user_training_stats_for_level
)
from ratings.rating_calculator import get_season_name
from ratings.user_levels import (
    get_level_emoji,
    get_level_info,
    get_next_level_info,
    get_all_levels_info
)
from ratings.ratings_keyboards import (
    get_achievements_menu_keyboard,
    get_periods_keyboard,
    get_back_to_achievements_keyboard,
    get_back_to_periods_keyboard
)
from bot.keyboards import get_main_menu_keyboard

logger = logging.getLogger(__name__)
router = Router()


def escape_markdown(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown

    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

    Returns:
        –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not text:
        return text
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text


@router.message(F.text == "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
async def show_achievements_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    await message.answer(
        "üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏**\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.\n\n"
        "–†–µ–π—Ç–∏–Ω–≥ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ:\n"
        "‚Ä¢ –¢–∏–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–±–µ–≥, –ø–ª–∞–≤–∞–Ω–∏–µ –∏ —Ç.–¥.)\n"
        "‚Ä¢ –û–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π",
        reply_markup=get_achievements_menu_keyboard(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "achievements:menu")
async def show_achievements_menu_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (—á–µ—Ä–µ–∑ callback)"""
    await callback.message.edit_text(
        "üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏**\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.\n\n"
        "–†–µ–π—Ç–∏–Ω–≥ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ:\n"
        "‚Ä¢ –¢–∏–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–±–µ–≥, –ø–ª–∞–≤–∞–Ω–∏–µ –∏ —Ç.–¥.)\n"
        "‚Ä¢ –û–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π",
        reply_markup=get_achievements_menu_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "achievements:my_rating")
async def show_my_rating(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_level = await get_user_level(user_id) or '–Ω–æ–≤–∏—á–æ–∫'
    level_emoji = get_level_emoji(user_level)
    level_data = get_level_info(user_level)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    stats = await get_user_training_stats_for_level(user_id)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–≤–Ω–µ
    next_level = get_next_level_info(user_level, stats['avg_per_week'])

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    rating = await get_user_rating(user_id)

    text = f"{level_emoji} **–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {user_level.capitalize()}**\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º
    if stats['total_trainings'] > 0:
        text += (
            f"üìÖ **–≠—Ç–∞ –Ω–µ–¥–µ–ª—è:** {stats['current_week_trainings']} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
            f"üí™ –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {stats['total_trainings']}\n"
        )

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–≤–Ω–µ
        if next_level['has_next']:
            trainings_needed = int(next_level['trainings_needed'])
            if trainings_needed > 0:
                text += (
                    f"\nüéØ –î–æ —É—Ä–æ–≤–Ω—è **{next_level['next_level']}** {next_level['next_level_emoji']}: "
                    f"–µ—â–µ {trainings_needed} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ\n"
                )
            else:
                text += f"\nüéâ –í—ã –≥–æ—Ç–æ–≤—ã –∫ —É—Ä–æ–≤–Ω—é **{next_level['next_level']}** {next_level['next_level_emoji']}!\n"
        else:
            text += "\n‚≠ê –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!\n"
    else:
        text += "–î–æ–±–∞–≤—å—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å!\n"

    # –†–µ–π—Ç–∏–Ω–≥–æ–≤—ã–µ –æ—á–∫–∏
    text += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüìä **–†–µ–π—Ç–∏–Ω–≥**\n\n"

    if not rating or rating['points'] == 0:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã—Ö –æ—á–∫–æ–≤.\n"
    else:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–∞ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö
        global_rank = await get_user_rank(user_id, 'global')
        week_rank = await get_user_rank(user_id, 'week')
        month_rank = await get_user_rank(user_id, 'month')
        season_rank = await get_user_rank(user_id, 'season')

        season_name = get_season_name()
        text += f"üåç **–ì–ª–æ–±–∞–ª—å–Ω—ã–π:** {rating['points']:.1f} –æ—á–∫–æ–≤"

        if global_rank:
            text += f" (#{global_rank})"

        text += f"\nüìÖ **–ó–∞ –Ω–µ–¥–µ–ª—é:** {rating['week_points']:.1f} –æ—á–∫–æ–≤"
        if week_rank:
            text += f" (#{week_rank})"

        text += f"\nüìÜ **–ó–∞ –º–µ—Å—è—Ü:** {rating['month_points']:.1f} –æ—á–∫–æ–≤"
        if month_rank:
            text += f" (#{month_rank})"

        text += f"\nüå∏ **–ó–∞ —Å–µ–∑–æ–Ω ({season_name}):** {rating['season_points']:.1f} –æ—á–∫–æ–≤"
        if season_rank:
            text += f" (#{season_rank})"

    await callback.message.edit_text(
        text,
        reply_markup=get_back_to_achievements_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "achievements:top10")
async def show_top10(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-10 –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    rankings = await get_global_rankings(limit=10)

    if not rankings:
        await callback.message.edit_text(
            "üèÜ **–¢–æ–ø-10**\n\n"
            "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.",
            reply_markup=get_back_to_achievements_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
        return

    text = "üèÜ **–¢–æ–ø-10 (–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥)**\n\n"

    medals = ["ü•á", "ü•à", "ü•â"]

    for i, user in enumerate(rankings, 1):
        medal = medals[i-1] if i <= 3 else f"{i}."
        name = user.get('name') or user.get('username') or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        name = escape_markdown(name)  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è
        points = user.get('points', 0)
        trainings = user.get('total_trainings', 0)

        text += f"{medal} **{name}** ‚Äî {points:.1f} –æ—á–∫–æ–≤ ({trainings} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫)\n"

    await callback.message.edit_text(
        text,
        reply_markup=get_back_to_achievements_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "achievements:periods")
async def show_periods_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞"""
    await callback.message.edit_text(
        "üìà **–†–µ–π—Ç–∏–Ω–≥–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:",
        reply_markup=get_periods_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("achievements:period:"))
async def show_period_ranking(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    period = callback.data.split(":")[-1]

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞
    if period == "week":
        rankings = await get_weekly_rankings(limit=10)
        title = "üìÖ –†–µ–π—Ç–∏–Ω–≥ –∑–∞ –Ω–µ–¥–µ–ª—é"
    elif period == "month":
        rankings = await get_monthly_rankings(limit=10)
        title = "üìÜ –†–µ–π—Ç–∏–Ω–≥ –∑–∞ –º–µ—Å—è—Ü"
    elif period == "season":
        rankings = await get_seasonal_rankings(limit=10)
        season_name = get_season_name()
        title = f"üå∏ –†–µ–π—Ç–∏–Ω–≥ –∑–∞ —Å–µ–∑–æ–Ω ({season_name})"
    else:  # global
        rankings = await get_global_rankings(limit=10)
        title = "üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥"

    if not rankings:
        await callback.message.edit_text(
            f"{title}\n\n"
            "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.",
            reply_markup=get_back_to_periods_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
        return

    text = f"{title}\n\n"
    medals = ["ü•á", "ü•à", "ü•â"]

    for i, user in enumerate(rankings, 1):
        medal = medals[i-1] if i <= 3 else f"{i}."
        name = user.get('name') or user.get('username') or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        name = escape_markdown(name)  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è
        points = user.get('points', 0)

        text += f"{medal} **{name}** ‚Äî {points:.1f} –æ—á–∫–æ–≤\n"

    await callback.message.edit_text(
        text,
        reply_markup=get_back_to_periods_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "achievements:back")
async def back_to_main(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.message.delete()
    await callback.answer()
