"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—Ä–æ–≤–Ω—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

from typing import Dict, Tuple
from datetime import datetime, timedelta


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
LEVELS = {
    '–Ω–æ–≤–∏—á–æ–∫': {'min': 0, 'max': 2, 'emoji': 'üå±'},
    '–ª—é–±–∏—Ç–µ–ª—å': {'min': 3, 'max': 4, 'emoji': 'üí™'},
    '–ø—Ä–æ—Ñ–∏': {'min': 5, 'max': 5, 'emoji': 'üèÉ'},
    '—ç–ª–∏—Ç–Ω—ã–π': {'min': 6, 'max': 100, 'emoji': '‚≠ê'}  # 6-7+ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é
}

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –±–µ–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
LEVEL_RETENTION_WEEKS = 3


def get_level_by_avg_trainings(trainings_this_week: float) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é

    Args:
        trainings_this_week: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é

    Returns:
        –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    """
    for level_name, level_data in LEVELS.items():
        if level_data['min'] <= trainings_this_week <= level_data['max']:
            return level_name

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–æ–≤–∏—á–æ–∫
    return '–Ω–æ–≤–∏—á–æ–∫'


def get_level_emoji(level_name: str) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è

    Args:
        level_name: –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è

    Returns:
        –≠–º–æ–¥–∑–∏ —É—Ä–æ–≤–Ω—è
    """
    return LEVELS.get(level_name, {}).get('emoji', 'üå±')


def get_level_info(level_name: str) -> Dict[str, any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ

    Args:
        level_name: –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Ä–æ–≤–Ω–µ
    """
    level_data = LEVELS.get(level_name, LEVELS['–Ω–æ–≤–∏—á–æ–∫'])

    if level_name == '—ç–ª–∏—Ç–Ω—ã–π':
        trainings_range = "6-7+ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫/–Ω–µ–¥–µ–ª—é"
    elif level_data['min'] == level_data['max']:
        trainings_range = f"{level_data['min']} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫/–Ω–µ–¥–µ–ª—é"
    else:
        trainings_range = f"{level_data['min']}-{level_data['max']} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫/–Ω–µ–¥–µ–ª—é"

    return {
        'name': level_name,
        'emoji': level_data['emoji'],
        'trainings_range': trainings_range,
        'min': level_data['min'],
        'max': level_data['max']
    }


def calculate_avg_trainings_per_week(total_trainings: int, total_weeks: int) -> float:
    """
    –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é

    Args:
        total_trainings: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        total_weeks: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å

    Returns:
        –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é
    """
    if total_weeks <= 0:
        return 0.0
    return round(total_trainings / total_weeks, 2)


def should_downgrade_level(last_training_date: datetime, current_level: str) -> Tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–Ω–∏–∑–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

    Args:
        last_training_date: –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        current_level: –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        –ö–æ—Ä—Ç–µ–∂ (–Ω—É–∂–Ω–æ_–ø–æ–Ω–∏–∑–∏—Ç—å, –Ω–æ–≤—ã–π_—É—Ä–æ–≤–µ–Ω—å)
    """
    if current_level == '–Ω–æ–≤–∏—á–æ–∫':
        # –ù–æ–≤–∏—á–∫–∞ –Ω–µ–ª—å–∑—è –ø–æ–Ω–∏–∑–∏—Ç—å –Ω–∏–∂–µ
        return False, current_level

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –±–æ–ª—å—à–µ LEVEL_RETENTION_WEEKS –Ω–µ–¥–µ–ª—å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    weeks_since_last = (datetime.now() - last_training_date).days / 7

    if weeks_since_last > LEVEL_RETENTION_WEEKS:
        # –ü–æ–Ω–∏–∂–∞–µ–º –Ω–∞ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å
        levels_list = ['–Ω–æ–≤–∏—á–æ–∫', '–ª—é–±–∏—Ç–µ–ª—å', '–ø—Ä–æ—Ñ–∏', '—ç–ª–∏—Ç–Ω—ã–π']
        current_index = levels_list.index(current_level)

        if current_index > 0:
            new_level = levels_list[current_index - 1]
            return True, new_level

    return False, current_level


def get_next_level_info(current_level: str, current_avg: float) -> Dict[str, any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–≤–Ω–µ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ

    Args:
        current_level: –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        current_avg: –¢–µ–∫—É—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–≤–Ω–µ
    """
    levels_list = ['–Ω–æ–≤–∏—á–æ–∫', '–ª—é–±–∏—Ç–µ–ª—å', '–ø—Ä–æ—Ñ–∏', '—ç–ª–∏—Ç–Ω—ã–π']

    try:
        current_index = levels_list.index(current_level)
    except ValueError:
        current_index = 0

    if current_index >= len(levels_list) - 1:
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
        return {
            'has_next': False,
            'next_level': None,
            'trainings_needed': 0
        }

    next_level_name = levels_list[current_index + 1]
    next_level_data = LEVELS[next_level_name]
    trainings_needed = next_level_data['min'] - current_avg

    return {
        'has_next': True,
        'next_level': next_level_name,
        'next_level_emoji': next_level_data['emoji'],
        'trainings_needed': max(0, trainings_needed)
    }


def get_all_levels_info() -> list:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö

    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö
    """
    levels_list = ['–Ω–æ–≤–∏—á–æ–∫', '–ª—é–±–∏—Ç–µ–ª—å', '–ø—Ä–æ—Ñ–∏', '—ç–ª–∏—Ç–Ω—ã–π']
    return [get_level_info(level) for level in levels_list]
