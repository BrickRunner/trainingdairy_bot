"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import json
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from aiogram import Bot

from database.queries import (
    get_user_settings,
    get_training_statistics,
    get_training_type_goals,
    get_trainings_by_period,
    update_user_setting
)


async def check_weekly_goals(user_id: int, bot: Bot) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫–∞–∂–¥–æ–π —Ü–µ–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –Ω–µ–¥–µ–ª—é
    –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    settings = await get_user_settings(user_id)
    if not settings:
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
    stats = await get_training_statistics(user_id, 'week')
    distance_unit = settings.get('distance_unit', '–∫–º')

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    today = datetime.now().date()
    current_week = today.strftime('%Y-%W')

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã—Ö —Ü–µ–ª—è—Ö –∏–∑ JSON
    goal_notifications_json = settings.get('goal_notifications', '{}')
    try:
        goal_notifications = json.loads(goal_notifications_json) if goal_notifications_json else {}
    except:
        goal_notifications = {}

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    week_goals = goal_notifications.get(current_week, {})

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–∏ –ø–æ –Ω–µ–¥–µ–ª—å–Ω–æ–º—É –æ–±—ä–µ–º—É
    weekly_volume_goal = settings.get('weekly_volume_goal')
    if weekly_volume_goal:
        total_distance = stats['total_distance']
        progress_percent = (total_distance / weekly_volume_goal) * 100 if weekly_volume_goal > 0 else 0

        # –ï—Å–ª–∏ —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å
        if progress_percent >= 100 and not week_goals.get('volume'):
            await bot.send_message(
                user_id,
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏ –ø–æ –Ω–µ–¥–µ–ª—å–Ω–æ–º—É –æ–±—ä–µ–º—É!</b>\n\n"
                f"üìä –ù–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º: {total_distance:.1f} {distance_unit}\n"
                f"üéØ –¶–µ–ª—å: {weekly_volume_goal} {distance_unit}\n\n"
                f"üí™ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
                parse_mode="HTML"
            )
            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            week_goals['volume'] = True
        # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ü–µ–ª—å –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞)
        elif not week_goals.get('volume'):
            remaining = weekly_volume_goal - total_distance

            if 80 <= progress_percent < 100:
                # –û—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ - –º–æ—Ç–∏–≤–∏—Ä—É–µ–º
                await bot.send_message(
                    user_id,
                    f"üî• <b>–ü–æ—á—Ç–∏ —É —Ü–µ–ª–∏!</b>\n\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ <b>{remaining:.1f} {distance_unit}</b> –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–π —Ü–µ–ª–∏ –ø–æ –æ–±—ä—ë–º—É!\n\n"
                    f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {total_distance:.1f}/{weekly_volume_goal} {distance_unit} ({progress_percent:.0f}%)\n\n"
                    f"üí™ –ú–æ–ª–æ–¥–µ—Ü! –ï—â—ë –Ω–µ–º–Ω–æ–≥–æ!",
                    parse_mode="HTML"
                )
            elif 50 <= progress_percent < 80:
                # –ü–æ–ª–æ–≤–∏–Ω–∞ –ø—É—Ç–∏ - –ø–æ–¥–¥–µ—Ä–∂–∫–∞
                await bot.send_message(
                    user_id,
                    f"üí™ <b>–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å!</b>\n\n"
                    f"–í—ã –ø—Ä–æ—à–ª–∏ –±–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã –ø—É—Ç–∏ –∫ —Ü–µ–ª–∏ –ø–æ –æ–±—ä—ë–º—É!\n\n"
                    f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {total_distance:.1f}/{weekly_volume_goal} {distance_unit} ({progress_percent:.0f}%)\n"
                    f"üìâ –û—Å—Ç–∞–ª–æ—Å—å: {remaining:.1f} {distance_unit}\n\n"
                    f"üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
                    parse_mode="HTML"
                )

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    weekly_count_goal = settings.get('weekly_trainings_goal')
    if weekly_count_goal and stats['total_count'] >= weekly_count_goal and not week_goals.get('count'):
        await bot.send_message(
            user_id,
            f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!</b>\n\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {stats['total_count']}\n"
            f"üéØ –¶–µ–ª—å: {weekly_count_goal}\n\n"
            f"üí™ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
            parse_mode="HTML"
        )
        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        week_goals['count'] = True

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–π –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    type_goals = await get_training_type_goals(user_id)
    if type_goals:
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ —Ç–∏–ø–∞–º
        trainings = await get_trainings_by_period(user_id, 'week')

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º/–≤—Ä–µ–º—è –ø–æ —Ç–∏–ø–∞–º
        type_stats = {}
        for training in trainings:
            t_type = training['type']

            if t_type not in type_stats:
                type_stats[t_type] = 0

            # –î–ª—è —Å–∏–ª–æ–≤—ã—Ö - —Å—á–∏—Ç–∞–µ–º –º–∏–Ω—É—Ç—ã, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
            if t_type == '—Å–∏–ª–æ–≤–∞—è':
                # duration —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –º–∏–Ω—É—Ç–∞—Ö
                type_stats[t_type] += training.get('duration', 0)
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º calculated_volume –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö, distance –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
                if training.get('calculated_volume'):
                    type_stats[t_type] += training['calculated_volume']
                elif training.get('distance'):
                    type_stats[t_type] += training['distance']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π –ø–æ —Ç–∏–ø–∞–º
        for t_type, goal in type_goals.items():
            current = type_stats.get(t_type, 0)
            goal_key = f'type_{t_type}'

            if current >= goal and not week_goals.get(goal_key):
                if t_type == '—Å–∏–ª–æ–≤–∞—è':
                    await bot.send_message(
                        user_id,
                        f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏ –ø–æ —Ç–∏–ø—É '{t_type}'!</b>\n\n"
                        f"üèÉ {t_type.capitalize()}: {current:.0f} –º–∏–Ω\n"
                        f"üéØ –¶–µ–ª—å: {goal:.0f} –º–∏–Ω\n\n"
                        f"üí™ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
                        parse_mode="HTML"
                    )
                else:
                    await bot.send_message(
                        user_id,
                        f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏ –ø–æ —Ç–∏–ø—É '{t_type}'!</b>\n\n"
                        f"üèÉ {t_type.capitalize()}: {current:.1f} {distance_unit}\n"
                        f"üéØ –¶–µ–ª—å: {goal} {distance_unit}\n\n"
                        f"üí™ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
                        parse_mode="HTML"
                    )
                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                week_goals[goal_key] = True

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã—Ö —Ü–µ–ª—è—Ö
    goal_notifications[current_week] = week_goals

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ–¥–µ–ª–∏ (—Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –Ω–µ–¥–µ–ª–∏)
    weeks_to_keep = sorted(goal_notifications.keys(), reverse=True)[:4]
    goal_notifications = {week: goal_notifications[week] for week in weeks_to_keep}

    await update_user_setting(user_id, 'goal_notifications', json.dumps(goal_notifications))


async def check_weight_goal(user_id: int, current_weight: float, bot: Bot) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –≤–µ—Å–∞

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_weight: –¢–µ–∫—É—â–∏–π –≤–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    settings = await get_user_settings(user_id)
    if not settings:
        return

    weight_goal = settings.get('weight_goal')
    if not weight_goal:
        return

    weight_unit = settings.get('weight_unit', '–∫–≥')

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ (–Ω–∞–±–æ—Ä –∏–ª–∏ —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞)
    current_saved_weight = settings.get('weight')

    if not current_saved_weight:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏ (—Å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é 0.5 –∫–≥)
    if abs(current_weight - weight_goal) <= 0.5:
        message = (
            f"üéØ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –≤–µ—Å–∞!**\n\n"
            f"‚öñÔ∏è –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {weight_goal} {weight_unit}\n"
            f"‚öñÔ∏è –¢–µ–∫—É—â–∏–π –≤–µ—Å: {current_weight} {weight_unit}\n\n"
            f"üí™ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –¢–µ–ø–µ—Ä—å –≥–ª–∞–≤–Ω–æ–µ - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É!"
        )

        await bot.send_message(
            chat_id=user_id,
            text=message,
            parse_mode="Markdown"
        )
