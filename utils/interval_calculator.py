"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –æ–±—ä—ë–º–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—É–Ω–∫—Ç–∞–º
"""

import re
from typing import Optional


def calculate_interval_volume(description: str) -> Optional[float]:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π –æ–±—ä—ë–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
    
    –°—á–∏—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã (1. 2. 3. –∏ —Ç.–¥.)
    –ù–µ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è
    
    Args:
        description: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        
    Returns:
        –û–±—â–∏–π –æ–±—ä—ë–º –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        
    Example:
        >>> description = '''
        ... 1. –†–∞–∑–º–∏–Ω–∫–∞ - 3000–º
        ... 2. –û–†–£ + –°–ë–£ + 2 —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ ~80–º
        ...     –†–∞–±–æ—Ç–∞:
        ... 1. 7 —Ö 500–º / 300–º - ()
        ... 2. –¢—Ä—É—Å—Ü–∞ - 600–º
        ... 3. 7 —Ö 60–º - –º–Ω–æ–≥–æ—Å–∫–æ–∫–∏
        ... 4. –ó–∞–º–∏–Ω–∫–∞ - 600–º
        ... '''
        >>> calculate_interval_volume(description)
        10.36  # 3000 + 2√ó80 + 7√ó(500+300) + 600 + 7√ó60 + 600
    """
    
    if not description:
        return None
    
    total_meters = 0
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    lines = description.split('\n')
    
    for line in lines:
        line = line.strip()
        if not line:
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–∞ (1. –∏–ª–∏ 2. –∏ —Ç.–¥.)
        # –ù—É–º–µ—Ä–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å –û–ü–¶–ò–û–ù–ê–õ–¨–ù–ê
        line_without_number = line
        if re.match(r'^\d+\.', line):
            # –ï—Å—Ç—å –Ω–æ–º–µ—Ä - —É–¥–∞–ª—è–µ–º –µ–≥–æ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            line_without_number = re.sub(r'^\d+\.\s*', '', line)
        
        line_without_number = line_without_number.lower()
        
        # –í–ê–ñ–ù–û: –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –º–Ω–æ–≥–æ—Å–∫–æ–∫–∞–º–∏ –∏ –ø—Ä—ã–∂–∫–æ–≤—ã–º–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¢–û–õ–¨–ö–û —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–±–µ–∑ –±–µ–≥–æ–≤—ã—Ö –æ—Ç—Ä–µ–∑–∫–æ–≤) - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        exclude_only_keywords = [
            '–º–Ω–æ–≥–æ—Å–∫–æ–∫', '–ø—Ä—ã–∂', '–≤—ã–ø—Ä—ã–≥', '–∑–∞–ø—Ä—ã–≥', '–ø–æ–¥—Å–∫–æ–∫'
        ]
        
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–∫–ª—é—á–∞—é—â–µ–µ —Å–ª–æ–≤–æ –ò –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç—Ä—ã/–∫–º - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        has_exclude = any(keyword in line_without_number for keyword in exclude_only_keywords)
        has_distance = bool(re.search(r'\d+\s*[–º–∫]', line_without_number))
        
        if has_exclude and not has_distance:
            # –≠—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –±–µ–∑ –º–µ—Ç—Ä–∞–∂–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue
        
        if has_exclude and has_distance:
            # –ï—Å—Ç—å –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏ –º–µ—Ç—Ä—ã - —ç—Ç–æ –ø—Ä—ã–∂–∫–∏ —Å –¥–∏—Å—Ç–∞–Ω—Ü–∏–µ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
            continue
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω 1: "–†–∞–∑–º–∏–Ω–∫–∞ - 3000–º" –∏–ª–∏ "–ó–∞–º–∏–Ω–∫–∞ - 600–º" –∏–ª–∏ "–¢—Ä—É—Å—Ü–∞ - 400–º"
        # –ò—â–µ–º: —Ç–∏—Ä–µ –∏ —á–∏—Å–ª–æ —Å "–º" (–Ω–µ –ø–µ—Ä–µ–¥ "/" —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏)
        pattern_dash = r'[-‚Äì‚Äî]\s*(\d+)\s*–º(?!\s*[/])'
        matches_dash = re.findall(pattern_dash, line_without_number)
        if matches_dash:
            for match in matches_dash:
                meters = int(match)
                total_meters += meters
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É –¥–∞–ª—å—à–µ, –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â—ë —á—Ç–æ-—Ç–æ
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω 2: "7 —Ö 500–º / 300–º" - –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —Ä–∞–±–æ—Ç–∞/–æ—Ç–¥—ã—Ö
        # –ò—â–µ–º: —á–∏—Å–ª–æ √ó —á–∏—Å–ª–æ –º / —á–∏—Å–ª–æ –º
        pattern_intervals = r'(\d+)\s*[—Öx—Ö√ó]\s*(\d+)\s*–º\s*[/]\s*(\d+)\s*–º'
        matches_intervals = re.findall(pattern_intervals, line_without_number)
        if matches_intervals:
            for match in matches_intervals:
                repeats = int(match[0])
                work_meters = int(match[1])
                rest_meters = int(match[2])
                total_meters += repeats * (work_meters + rest_meters)
            continue
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω 3: "2 —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ ~80–º" –∏–ª–∏ "6 —Ö 200–º" - —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞ –±–µ–∑ –æ—Ç–¥—ã—Ö–∞
        # –ò—â–µ–º: —á–∏—Å–ª–æ √ó —á–∏—Å–ª–æ –º (–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥ "/")
        pattern_work_only = r'(\d+)\s*(?:—É—Å–∫–æ—Ä–µ–Ω–∏[—è–π]|—Ö|x|—Ö|√ó)\s*(?:–ø–æ\s*~?)?(\d+)\s*–º(?!\s*/)'
        matches_work = re.findall(pattern_work_only, line_without_number)
        if matches_work:
            for match in matches_work:
                repeats = int(match[0])
                work_meters = int(match[1])
                total_meters += repeats * work_meters
            continue
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω 4: –ø—Ä–æ—Å—Ç–æ "3000–º" –≤ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –¥—Ä—É–≥–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        # –ù–ï —Å—á–∏—Ç–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∏–ø–∞ "–°–ë–£ –ø–æ 40–º:" –∏–ª–∏ "—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ 50–º"
        if not (matches_dash or matches_intervals or matches_work):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å "–ø–æ X–º"
            if not re.search(r'\b–ø–æ\s+~?\d+\s*–º', line_without_number):
                pattern_simple = r'(\d+)\s*–º'
                matches_simple = re.findall(pattern_simple, line_without_number)
                if matches_simple:
                    for match in matches_simple:
                        meters = int(match)
                        total_meters += meters
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–∏–ª–æ–º–µ—Ç—Ä—ã
    if total_meters > 0:
        total_km = total_meters / 1000
        return round(total_km, 2)
    
    return None


def format_volume_message(volume: Optional[float]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—ä—ë–º–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    
    Args:
        volume: –û–±—ä—ë–º –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    if volume is None:
        return ""
    
    if volume >= 1:
        return f"üìä –û–±—â–∏–π –æ–±—ä—ë–º: {volume} –∫–º ({int(volume * 1000)} –º)"
    else:
        return f"üìä –û–±—â–∏–π –æ–±—ä—ë–º: {int(volume * 1000)} –º"


def calculate_average_interval_pace(description: str) -> Optional[str]:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤ —Å–∫–æ–±–∫–∞—Ö
    
    –°—á–∏—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ç—Ä–µ–∑–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    - (MM:SS) - –º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä (3:12)
    - (SS,S) - —Å–µ–∫—É–Ω–¥—ã —Å –¥–µ—Å—è—Ç—ã–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä (50,2; 51,0)
    
    –ù–∞–ø—Ä–∏–º–µ—Ä: "6 —Ö 300–º / 300–º - (50,2; 51,0; 51,0; 49,8; 48,9; 45,2)"
    
    Args:
        description: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        
    Returns:
        –°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø –≤ —Ñ–æ—Ä–º–∞—Ç–µ "MM:SS –º–∏–Ω/–∫–º" –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    if not description:
        return None
    
    total_seconds = 0
    total_distance_meters = 0
    count = 0
    
    lines = description.split('\n')
    
    for line in lines:
        line = line.strip()
        if not line:
            continue
        
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–∫–æ–±–∫–∞—Ö (–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)
        # –§–æ—Ä–º–∞—Ç—ã: (50,2; 51,0) –∏–ª–∏ (28.0-29.0-28.4) –∏–ª–∏ (1:15; 1:14)
        match_intervals = re.search(r'(\d+)\s*[—Öx—Ö√ó]\s*(\d+)\s*–º.*?\(([\d:;,.\s\-‚Äì‚Äî]+)\)', line)
        if match_intervals:
            distance = int(match_intervals.group(2))
            results_str = match_intervals.group(3)
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Å–∫–æ–±–æ–∫
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏: ":", ".", ",", "-", "‚Äì", "‚Äî" –∏–ª–∏ ";"
            # –§–æ—Ä–º–∞—Ç: –ª–∏–±–æ MM:SS, –ª–∏–±–æ SS.S (—Å–µ–∫—É–Ω–¥—ã —Å –¥–µ—Å—è—Ç—ã–º–∏)
            results = re.findall(r'(\d+)[:\.,\-‚Äì‚Äî](\d+)', results_str)
            
            for result in results:
                num1 = int(result[0])
                num2 = int(result[1])
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç: –µ—Å–ª–∏ num1 < 20 –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ":", —Ç–æ —ç—Ç–æ MM:SS
                # –ò–Ω–∞—á–µ —ç—Ç–æ SS.S (—Å–µ–∫—É–Ω–¥—ã —Å –¥–µ—Å—è—Ç—ã–º–∏)
                if ':' in results_str and num1 < 20:
                    # –§–æ—Ä–º–∞—Ç MM:SS
                    time_seconds = num1 * 60 + num2
                else:
                    # –§–æ—Ä–º–∞—Ç SS.S (—Å–µ–∫—É–Ω–¥—ã —Å –¥–µ—Å—è—Ç—ã–º–∏)
                    # num2 - —ç—Ç–æ –¥–µ—Å—è—Ç—ã–µ –¥–æ–ª–∏ —Å–µ–∫—É–Ω–¥—ã
                    time_seconds = num1 + (num2 / 10)
                
                total_seconds += time_seconds
                total_distance_meters += distance
                count += 1
        
        # –í–∞—Ä–∏–∞–Ω—Ç 2: –û–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ —Ç–∏—Ä–µ
        # "2000–º - 6:46" –∏–ª–∏ "1000–º - 3:12"
        match_single = re.search(r'(\d+)\s*–º.*?[-‚Äì‚Äî]\s*(\d+)[:\.,](\d+)', line)
        if match_single and not match_intervals:  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
            distance = int(match_single.group(1))
            num1 = int(match_single.group(2))
            num2 = int(match_single.group(3))
            
            # –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Å–µ–≥–¥–∞ —Ñ–æ—Ä–º–∞—Ç MM:SS
            time_seconds = num1 * 60 + num2
            
            total_seconds += time_seconds
            total_distance_meters += distance
            count += 1
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø
    if count > 0 and total_distance_meters > 0:
        # –°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø = –æ–±—â–µ–µ –≤—Ä–µ–º—è / –æ–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è (–≤ –∫–º)
        total_distance_km = total_distance_meters / 1000
        avg_pace_seconds_per_km = total_seconds / total_distance_km
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–Ω:—Å–µ–∫
        pace_min = int(avg_pace_seconds_per_km // 60)
        pace_sec = int(avg_pace_seconds_per_km % 60)
        
        return f"{pace_min}:{pace_sec:02d} –º–∏–Ω/–∫–º"
    
    return None

