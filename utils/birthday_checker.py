"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import asyncio
from datetime import datetime, time
import logging
from aiogram import Bot

from database.queries import get_all_users_with_birthdays
from utils.birthday_greetings import get_birthday_greeting_for_user

logger = logging.getLogger(__name__)


async def check_and_send_birthday_greetings(bot: Bot):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    try:
        today = datetime.now()
        current_day = today.day
        current_month = today.month

        logger.info(f"Checking birthdays for {current_day:02d}.{current_month:02d}")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
        users_with_birthdays = await get_all_users_with_birthdays()

        if not users_with_birthdays:
            logger.info("No users with birthdays found in database")
            return

        birthday_count = 0

        for user in users_with_birthdays:
            user_id = user['user_id']
            birth_date = user['birth_date']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü —Ä–æ–∂–¥–µ–Ω–∏—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω—ë–º
            if birth_date.day == current_day and birth_date.month == current_month:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    greeting = get_birthday_greeting_for_user(user_id)

                    # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
                    age = today.year - birth_date.year
                    if (today.month, today.day) < (birth_date.month, birth_date.day):
                        age -= 1

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º
                    full_message = f"{greeting}\n\nüéÇ –¢–µ–±–µ –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å {age} –ª–µ—Ç!"

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
                    await bot.send_message(
                        chat_id=user_id,
                        text=full_message
                    )

                    birthday_count += 1
                    logger.info(f"Birthday greeting sent to user {user_id} (age: {age})")

                except Exception as e:
                    logger.error(f"Failed to send birthday greeting to user {user_id}: {e}")

        if birthday_count > 0:
            logger.info(f"Successfully sent {birthday_count} birthday greetings")
        else:
            logger.info("No birthdays today")

    except Exception as e:
        logger.error(f"Error in check_and_send_birthday_greetings: {e}")


async def schedule_birthday_check(bot: Bot):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –≤ 9:10

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    logger.info("Birthday checker scheduler started")

    while True:
        try:
            now = datetime.now()
            target_time = time(9, 32)  # 9:10 —É—Ç—Ä–∞

            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            from datetime import timedelta
            target_datetime = datetime.combine(now.date(), target_time)

            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ 9:10, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
            if now.time() >= target_time:
                target_datetime = datetime.combine(now.date() + timedelta(days=1), target_time)

            # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            delay = (target_datetime - now).total_seconds()

            logger.info(f"Next birthday check scheduled at {target_datetime.strftime('%Y-%m-%d %H:%M:%S')} (in {delay:.0f} seconds)")

            # –ñ–¥—ë–º –¥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            await asyncio.sleep(delay)

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
            logger.info("Running scheduled birthday check")
            await check_and_send_birthday_greetings(bot)

        except Exception as e:
            logger.error(f"Error in schedule_birthday_check: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∂–¥—ë–º 1 —á–∞—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await asyncio.sleep(3600)
