"""
–ü–æ–ª–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—Å–µ–º–∏ 14 –ø—É–Ω–∫—Ç–∞–º–∏
"""

from aiogram import Router, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import datetime
import re
import json

from bot.fsm import SettingsStates
from settings.settings_keyboards import (
    get_settings_menu_keyboard,
    get_profile_settings_keyboard,
    get_pulse_zones_menu_keyboard,
    get_goals_settings_keyboard,
    get_units_settings_keyboard,
    get_notifications_settings_keyboard,
    get_gender_keyboard,
    get_training_types_selection_keyboard,
    get_distance_unit_keyboard,
    get_weight_unit_keyboard,
    get_date_format_keyboard,
    get_timezone_keyboard,
    get_weekday_keyboard,
    get_training_type_goals_keyboard,
    get_simple_cancel_keyboard
)
from database.queries import (
    init_user_settings,
    get_user_settings,
    update_user_setting,
    set_pulse_zones_auto,
    set_pulse_zones_manual,
    get_pulse_zone_for_value,
    get_main_training_types,
    set_main_training_types,
    get_training_type_goals,
    set_training_type_goal,
    format_date_by_setting,
    recalculate_all_weights
)
from utils.goals_checker import check_weight_goal

router = Router()


# ============== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø ==============

async def format_birth_date(birth_date_str: str, user_id: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –ë–î (–ì–ì–ì–ì-–ú–ú-–î–î) –≤ —Ñ–æ—Ä–º–∞—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        birth_date_str: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'
    """
    if not birth_date_str:
        return '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'
    
    from utils.date_formatter import DateFormatter, get_user_date_format
    
    try:
        date_format = await get_user_date_format(user_id)
        return DateFormatter.format_date(birth_date_str, date_format)
    except:
        return birth_date_str


# ============== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –ú–ï–ù–Æ ==============

async def send_profile_menu(message: Message, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è"""
    settings = await get_user_settings(user_id)
    
    info_text = "üë§ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
    
    if settings:
        info_text += f"‚úèÔ∏è –ò–º—è: {settings.get('name') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        birth_date_formatted = await format_birth_date(settings.get('birth_date'), user_id)
        info_text += f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date_formatted}\n"
        info_text += f"‚ößÔ∏è –ü–æ–ª: {settings.get('gender') or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        weight_unit = settings.get('weight_unit', '–∫–≥')
        weight_value = settings.get('weight')
        weight_display = f"{weight_value:.2f}" if weight_value else '–Ω–µ —É–∫–∞–∑–∞–Ω'
        info_text += f"‚öñÔ∏è –í–µ—Å: {weight_display} {weight_unit}\n"
        info_text += f"üìè –†–æ—Å—Ç: {settings.get('height') or '–Ω–µ —É–∫–∞–∑–∞–Ω'} —Å–º\n"

        types = await get_main_training_types(user_id)
        info_text += f"üèÉ –¢–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {', '.join(types)}\n"
    
    info_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    
    await message.answer(
        info_text,
        reply_markup=get_profile_settings_keyboard(),
        parse_mode="Markdown"
    )


async def send_goals_menu(message: Message, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—é —Ü–µ–ª–µ–π"""
    settings = await get_user_settings(user_id)

    info_text = "üéØ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–ª–µ–π**\n\n"

    if settings:
        distance_unit = settings.get('distance_unit', '–∫–º')
        weight_unit = settings.get('weight_unit', '–∫–≥')

        weekly_volume = settings.get('weekly_volume_goal')
        weekly_count = settings.get('weekly_trainings_goal')
        weight_goal = settings.get('weight_goal')

        info_text += f"üìä –ù–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º: {weekly_volume or '–Ω–µ –∑–∞–¥–∞–Ω'} {distance_unit}\n"
        info_text += f"üî¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é: {weekly_count or '–Ω–µ –∑–∞–¥–∞–Ω–æ'}\n"
        weight_goal_display = f"{weight_goal:.1f}" if weight_goal else '–Ω–µ –∑–∞–¥–∞–Ω'
        info_text += f"‚öñÔ∏è –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {weight_goal_display} {weight_unit}\n\n"

        type_goals = await get_training_type_goals(user_id)
        if type_goals:
            info_text += "üèÉ –¶–µ–ª–∏ –ø–æ —Ç–∏–ø–∞–º:\n"
            for t_type, goal in type_goals.items():
                # –î–ª—è —Å–∏–ª–æ–≤—ã—Ö - –º–∏–Ω—É—Ç—ã, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –∫–º
                unit = "–º–∏–Ω/–Ω–µ–¥–µ–ª—é" if t_type == '—Å–∏–ª–æ–≤–∞—è' else f"{distance_unit}/–Ω–µ–¥–µ–ª—é"
                info_text += f"  ‚Ä¢ {t_type}: {goal} {unit}\n"
    else:
        info_text += "üìä –ù–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º: –Ω–µ –∑–∞–¥–∞–Ω –∫–º\n"
        info_text += "üî¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é: –Ω–µ –∑–∞–¥–∞–Ω–æ\n"
        info_text += "‚öñÔ∏è –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: –Ω–µ –∑–∞–¥–∞–Ω –∫–≥\n"

    info_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"

    await message.answer(
        info_text,
        reply_markup=get_goals_settings_keyboard(),
        parse_mode="Markdown"
    )


async def send_units_menu(message: Message, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—é –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
    settings = await get_user_settings(user_id)
    
    info_text = "üìè **–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è**\n\n"
    
    if settings:
        info_text += f"üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {settings.get('distance_unit', '–∫–º')}\n"
        info_text += f"‚öñÔ∏è –í–µ—Å: {settings.get('weight_unit', '–∫–≥')}\n"
        info_text += f"üìÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {settings.get('date_format', '–î–î.–ú–ú.–ì–ì–ì–ì')}\n"
    
    info_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    
    await message.answer(
        info_text,
        reply_markup=get_units_settings_keyboard(),
        parse_mode="Markdown"
    )


async def send_notifications_menu(message: Message, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    settings = await get_user_settings(user_id)
    
    info_text = "üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n"
    
    if settings:
        daily_time = settings.get('daily_pulse_weight_time')
        report_day = settings.get('weekly_report_day', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
        report_time = settings.get('weekly_report_time', '09:00')
        
        info_text += f"‚è∞ –í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞: {daily_time or '–Ω–µ –∑–∞–¥–∞–Ω–æ'}\n"
        info_text += f"üìä –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: {report_day}, {report_time}\n"
    
    info_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    
    await message.answer(
        info_text,
        reply_markup=get_notifications_settings_keyboard(),
        parse_mode="Markdown"
    )


# ============== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ù–ê–°–¢–†–û–ï–ö ==============

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
@router.message(Command("settings"))
async def settings_menu(message: Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await state.clear()
    user_id = message.from_user.id
    await init_user_settings(user_id)
    
    settings = await get_user_settings(user_id)
    
    info_text = "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
    
    if settings:
        info_text += f"üë§ –ò–º—è: {settings.get('name') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        birth_date_formatted = await format_birth_date(settings.get('birth_date'), user_id)
        info_text += f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date_formatted}\n"
        info_text += f"‚ößÔ∏è –ü–æ–ª: {settings.get('gender') or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        weight_value = settings.get('weight')
        weight_unit = settings.get('weight_unit', '–∫–≥')
        weight_display = f"{weight_value:.1f}" if weight_value else '–Ω–µ —É–∫–∞–∑–∞–Ω'
        info_text += f"‚öñÔ∏è –í–µ—Å: {weight_display} {weight_unit}\n"
        info_text += f"üìè –†–æ—Å—Ç: {settings.get('height') or '–Ω–µ —É–∫–∞–∑–∞–Ω'} —Å–º\n"
    
    info_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    
    await message.answer(
        info_text,
        reply_markup=get_settings_menu_keyboard(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "settings:menu")
async def callback_settings_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await state.clear()
    user_id = callback.from_user.id
    settings = await get_user_settings(user_id)
    
    info_text = "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
    
    if settings:
        info_text += f"üë§ –ò–º—è: {settings.get('name') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        birth_date_formatted = await format_birth_date(settings.get('birth_date'), user_id)
        info_text += f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date_formatted}\n"
        info_text += f"‚ößÔ∏è –ü–æ–ª: {settings.get('gender') or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        weight_value = settings.get('weight')
        weight_unit = settings.get('weight_unit', '–∫–≥')
        weight_display = f"{weight_value:.1f}" if weight_value else '–Ω–µ —É–∫–∞–∑–∞–Ω'
        info_text += f"‚öñÔ∏è –í–µ—Å: {weight_display} {weight_unit}\n"
        info_text += f"üìè –†–æ—Å—Ç: {settings.get('height') or '–Ω–µ —É–∫–∞–∑–∞–Ω'} —Å–º\n"
    
    info_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    
    await callback.message.edit_text(
        info_text,
        reply_markup=get_settings_menu_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


# ============== –†–ê–ó–î–ï–õ: –ü–†–û–§–ò–õ–¨ ==============

@router.callback_query(F.data == "settings:profile")
async def callback_profile_settings(callback: CallbackQuery):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = callback.from_user.id
    settings = await get_user_settings(user_id)
    
    info_text = "üë§ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
    
    if settings:
        info_text += f"‚úèÔ∏è –ò–º—è: {settings.get('name') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        birth_date_formatted = await format_birth_date(settings.get('birth_date'), user_id)
        info_text += f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date_formatted}\n"
        info_text += f"‚ößÔ∏è –ü–æ–ª: {settings.get('gender') or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        weight_value = settings.get('weight')
        weight_unit = settings.get('weight_unit', '–∫–≥')
        weight_display = f"{weight_value:.1f}" if weight_value else '–Ω–µ —É–∫–∞–∑–∞–Ω'
        info_text += f"‚öñÔ∏è –í–µ—Å: {weight_display} {weight_unit}\n"
        info_text += f"üìè –†–æ—Å—Ç: {settings.get('height') or '–Ω–µ —É–∫–∞–∑–∞–Ω'} —Å–º\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        types = await get_main_training_types(user_id)
        info_text += f"üèÉ –¢–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {', '.join(types)}\n"
    
    info_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    
    await callback.message.edit_text(
        info_text,
        reply_markup=get_profile_settings_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


# 1. –ò–ú–Ø
@router.callback_query(F.data == "settings:profile:name")
async def callback_set_name(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–º–µ–Ω–∏"""
    await callback.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞, –º–∞–∫—Å–∏–º—É–º 50):",
        reply_markup=get_simple_cancel_keyboard()
    )
    await state.set_state(SettingsStates.waiting_for_name)
    await callback.answer()


@router.message(SettingsStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup={"remove_keyboard": True})
        return
    
    name = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    if len(name) < 2:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    if len(name) > 50:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    user_id = message.from_user.id
    await update_user_setting(user_id, 'name', name)
    
    await message.answer(
        f"‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {name}",
        reply_markup={"remove_keyboard": True}
    )
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
    settings = await get_user_settings(user_id)
    info_text = "üë§ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
    
    if settings:
        info_text += f"‚úèÔ∏è –ò–º—è: {settings.get('name') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        birth_date_formatted = await format_birth_date(settings.get('birth_date'), user_id)
        info_text += f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date_formatted}\n"
        info_text += f"‚ößÔ∏è –ü–æ–ª: {settings.get('gender') or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        weight_value = settings.get('weight')
        weight_unit = settings.get('weight_unit', '–∫–≥')
        weight_display = f"{weight_value:.1f}" if weight_value else '–Ω–µ —É–∫–∞–∑–∞–Ω'
        info_text += f"‚öñÔ∏è –í–µ—Å: {weight_display} {weight_unit}\n"
        info_text += f"üìè –†–æ—Å—Ç: {settings.get('height') or '–Ω–µ —É–∫–∞–∑–∞–Ω'} —Å–º\n"
        
        types = await get_main_training_types(user_id)
        info_text += f"üèÉ –¢–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {', '.join(types)}\n"
    
    info_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    
    await message.answer(
        info_text,
        reply_markup=get_profile_settings_keyboard(),
        parse_mode="Markdown"
    )


# 2. –î–ê–¢–ê –†–û–ñ–î–ï–ù–ò–Ø
@router.callback_query(F.data == "settings:profile:birth_date")
async def callback_set_birth_date(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    from bot.calendar_keyboard import CalendarKeyboard
    from datetime import datetime

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    calendar = CalendarKeyboard.create_calendar(1, datetime.now(), "cal_birth")
    await callback.message.answer(
        "üéÇ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:\n\n"
        "üìå –ö–∞–∂–¥—ã–π –≥–æ–¥ –≤ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
        reply_markup=calendar
    )
    await state.set_state(SettingsStates.waiting_for_birth_date)
    await callback.answer()


@router.message(SettingsStates.waiting_for_birth_date)
async def process_birth_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup={"remove_keyboard": True})
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    date_pattern = r'(\d{2})\.(\d{2})\.(\d{4})'
    match = re.match(date_pattern, message.text.strip())
    
    if not match:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990)"
        )
        return
    
    day, month, year = match.groups()
    
    try:
        birth_date = datetime(int(year), int(month), int(day))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
        if birth_date > datetime.now():
            await message.answer("‚ùå –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–∞ (–æ—Ç 5 –¥–æ 120 –ª–µ—Ç)
        age = (datetime.now() - birth_date).days // 365
        if age < 5 or age > 120:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.")
            return
        
        user_id = message.from_user.id
        birth_date_str = birth_date.strftime('%Y-%m-%d')
        await update_user_setting(user_id, 'birth_date', birth_date_str)
        
        await message.answer(
            f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {day}.{month}.{year}\n"
            f"üéâ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç",
            reply_markup={"remove_keyboard": True}
        )
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
        await send_profile_menu(message, user_id)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")


# 3. –ü–û–õ
@router.callback_query(F.data == "settings:profile:gender")
async def callback_set_gender(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –ø–æ–ª–∞"""
    await callback.message.edit_text(
        "‚ößÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=get_gender_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("gender:"))
async def callback_save_gender(callback: CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–∞"""
    gender_map = {
        "gender:male": "–º—É–∂—Å–∫–æ–π",
        "gender:female": "–∂–µ–Ω—Å–∫–∏–π"
    }

    gender = gender_map.get(callback.data)
    if gender:
        user_id = callback.from_user.id
        await update_user_setting(user_id, 'gender', gender)

        # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        settings = await get_user_settings(user_id)

        info_text = "üë§ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"

        if settings:
            info_text += f"‚úèÔ∏è –ò–º—è: {settings.get('name') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            birth_date_formatted = await format_birth_date(settings.get('birth_date'), user_id)
            info_text += f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date_formatted}\n"
            info_text += f"‚ößÔ∏è –ü–æ–ª: {settings.get('gender') or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            weight_unit = settings.get('weight_unit', '–∫–≥')
            info_text += f"‚öñÔ∏è –í–µ—Å: {settings.get('weight') or '–Ω–µ —É–∫–∞–∑–∞–Ω'} {weight_unit}\n"
            info_text += f"üìè –†–æ—Å—Ç: {settings.get('height') or '–Ω–µ —É–∫–∞–∑–∞–Ω'} —Å–º\n"

            types = await get_main_training_types(user_id)
            info_text += f"üèÉ –¢–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {', '.join(types)}\n"

        info_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"

        await callback.message.edit_text(
            info_text,
            reply_markup=get_profile_settings_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    else:
        await callback.answer("–û—à–∏–±–∫–∞!")


# 4. –í–ï–°
@router.callback_query(F.data == "settings:profile:weight")
async def callback_set_weight(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ—Å–∞"""
    settings = await get_user_settings(callback.from_user.id)
    weight_unit = settings.get('weight_unit', '–∫–≥') if settings else '–∫–≥'
    
    await callback.message.answer(
        f"‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ {weight_unit} (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70.5):",
        reply_markup=get_simple_cancel_keyboard()
    )
    await state.set_state(SettingsStates.waiting_for_weight)
    await callback.answer()


@router.message(SettingsStates.waiting_for_weight)
async def process_weight(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–µ—Å–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –ø–æ–¥–º–µ–Ω—é
        await send_profile_menu(message, message.from_user.id)
        return
    
    try:
        weight = float(message.text.strip().replace(',', '.'))
        
        if weight <= 0 or weight > 500:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞ (0-500).")
            return
        
        user_id = message.from_user.id
        await update_user_setting(user_id, 'weight', weight)

        settings = await get_user_settings(user_id)
        weight_unit = settings.get('weight_unit', '–∫–≥')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –≤–µ—Å–∞
        try:
            await check_weight_goal(user_id, weight, message.bot)
        except Exception as e:
            import logging
            logger = logging.getLogger(__name__)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–µ–≤–æ–≥–æ –≤–µ—Å–∞: {str(e)}")

        await message.answer(
            f"‚úÖ –í–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {weight} {weight_unit}",
            reply_markup={"remove_keyboard": True}
        )
        await state.clear()

        # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
        await send_profile_menu(message, user_id)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70.5)")


# 5. –†–û–°–¢
@router.callback_query(F.data == "settings:profile:height")
async def callback_set_height(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ—Å—Ç–∞"""
    await callback.message.answer(
        "üìè –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175):",
        reply_markup=get_simple_cancel_keyboard()
    )
    await state.set_state(SettingsStates.waiting_for_height)
    await callback.answer()


@router.message(SettingsStates.waiting_for_height)
async def process_height(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –ø–æ–¥–º–µ–Ω—é
        await send_profile_menu(message, message.from_user.id)
        return
    
    try:
        height = float(message.text.strip().replace(',', '.'))
        
        if height <= 50 or height > 300:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ (50-300 —Å–º).")
            return
        
        user_id = message.from_user.id
        await update_user_setting(user_id, 'height', height)
        
        await message.answer(
            f"‚úÖ –†–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {height} —Å–º",
            reply_markup={"remove_keyboard": True}
        )
        await state.clear()
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –ø–æ–¥–º–µ–Ω—é
        await send_profile_menu(message, message.from_user.id)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175)")


# 6. –û–°–ù–û–í–ù–´–ï –¢–ò–ü–´ –¢–†–ï–ù–ò–†–û–í–û–ö
@router.callback_query(F.data == "settings:profile:main_types")
async def callback_set_main_types(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    user_id = callback.from_user.id
    selected_types = await get_main_training_types(user_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(selected_types=selected_types)
    
    await callback.message.edit_text(
        "üèÉ **–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫**\n\n"
        "–≠—Ç–∏ —Ç–∏–ø—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤.",
        reply_markup=get_training_types_selection_keyboard(selected_types),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("toggle_type:"))
async def callback_toggle_type(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    training_type = callback.data.split(":")[1]
    
    data = await state.get_data()
    selected_types = data.get('selected_types', [])
    
    if training_type in selected_types:
        selected_types.remove(training_type)
    else:
        selected_types.append(training_type)
    
    await state.update_data(selected_types=selected_types)
    
    await callback.message.edit_reply_markup(
        reply_markup=get_training_types_selection_keyboard(selected_types)
    )
    await callback.answer()


@router.callback_query(F.data == "save_training_types")
async def callback_save_training_types(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    data = await state.get_data()
    selected_types = data.get('selected_types', ['–∫—Ä–æ—Å—Å'])

    if not selected_types:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!", show_alert=True)
        return

    user_id = callback.from_user.id
    await set_main_training_types(user_id, selected_types)
    await state.clear()

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    settings = await get_user_settings(user_id)

    info_text = "üë§ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"

    if settings:
        info_text += f"‚úèÔ∏è –ò–º—è: {settings.get('name') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        birth_date_formatted = await format_birth_date(settings.get('birth_date'), user_id)
        info_text += f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date_formatted}\n"
        info_text += f"‚ößÔ∏è –ü–æ–ª: {settings.get('gender') or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        weight_value = settings.get('weight')
        weight_unit = settings.get('weight_unit', '–∫–≥')
        weight_display = f"{weight_value:.1f}" if weight_value else '–Ω–µ —É–∫–∞–∑–∞–Ω'
        info_text += f"‚öñÔ∏è –í–µ—Å: {weight_display} {weight_unit}\n"
        info_text += f"üìè –†–æ—Å—Ç: {settings.get('height') or '–Ω–µ —É–∫–∞–∑–∞–Ω'} —Å–º\n"

        types = await get_main_training_types(user_id)
        info_text += f"üèÉ –¢–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {', '.join(types)}\n"

    info_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"

    await callback.message.edit_text(
        info_text,
        reply_markup=get_profile_settings_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")


# ============== –†–ê–ó–î–ï–õ: –ü–£–õ–¨–°–û–í–´–ï –ó–û–ù–´ (7) ==============

@router.callback_query(F.data == "settings:pulse_zones")
async def callback_pulse_zones_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª—å—Å–æ–≤—ã—Ö –∑–æ–Ω"""
    user_id = callback.from_user.id
    settings = await get_user_settings(user_id)
    
    info_text = "üíì **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É–ª—å—Å–æ–≤—ã—Ö –∑–æ–Ω**\n\n"
    
    if settings and settings.get('max_pulse'):
        info_text += f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å: {settings['max_pulse']} —É–¥/–º–∏–Ω\n\n"
        info_text += "–í–∞—à–∏ –∑–æ–Ω—ã:\n"
        info_text += f"üü¢ –ó–æ–Ω–∞ 1: {settings['zone1_min']}-{settings['zone1_max']} (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ)\n"
        info_text += f"üîµ –ó–æ–Ω–∞ 2: {settings['zone2_min']}-{settings['zone2_max']} (–∞—ç—Ä–æ–±–Ω–∞—è)\n"
        info_text += f"üü° –ó–æ–Ω–∞ 3: {settings['zone3_min']}-{settings['zone3_max']} (—Ç–µ–º–ø–æ–≤–∞—è)\n"
        info_text += f"üü† –ó–æ–Ω–∞ 4: {settings['zone4_min']}-{settings['zone4_max']} (–∞–Ω–∞—ç—Ä–æ–±–Ω–∞—è)\n"
        info_text += f"üî¥ –ó–æ–Ω–∞ 5: {settings['zone5_min']}-{settings['zone5_max']} (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è)\n"
    else:
        info_text += "–ü—É–ª—å—Å–æ–≤—ã–µ –∑–æ–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.\n"
        info_text += "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∑–æ–Ω—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫."
    
    await callback.message.edit_text(
        info_text,
        reply_markup=get_pulse_zones_menu_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


# TODO: –í–µ—Ä–Ω—É—Ç—å –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è AI
# @router.callback_query(F.data == "settings:pulse:auto")
# async def callback_pulse_auto(callback: CallbackQuery, state: FSMContext):
#     """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –ø—É–ª—å—Å–æ–≤—ã—Ö –∑–æ–Ω"""
#     user_id = callback.from_user.id
#     settings = await get_user_settings(user_id)
#
#     if settings and settings.get('birth_date'):
#         birth_date = datetime.strptime(settings['birth_date'], '%Y-%m-%d')
#         age = (datetime.now() - birth_date).days // 365
#
#         await set_pulse_zones_auto(user_id, age)
#
#         settings = await get_user_settings(user_id)
#
#         await callback.message.edit_text(
#             f"‚úÖ –ü—É–ª—å—Å–æ–≤—ã–µ –∑–æ–Ω—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n\n"
#             f"–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n"
#             f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å: {settings['max_pulse']} —É–¥/–º–∏–Ω\n\n"
#             f"üü¢ –ó–æ–Ω–∞ 1: {settings['zone1_min']}-{settings['zone1_max']}\n"
#             f"üîµ –ó–æ–Ω–∞ 2: {settings['zone2_min']}-{settings['zone2_max']}\n"
#             f"üü° –ó–æ–Ω–∞ 3: {settings['zone3_min']}-{settings['zone3_max']}\n"
#             f"üü† –ó–æ–Ω–∞ 4: {settings['zone4_min']}-{settings['zone4_max']}\n"
#             f"üî¥ –ó–æ–Ω–∞ 5: {settings['zone5_min']}-{settings['zone5_max']}\n"
#         )
#         await callback.answer("–ó–æ–Ω—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã!")
#
#         # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø—É–ª—å—Å–æ–≤—ã—Ö –∑–æ–Ω
#         await callback_pulse_zones_menu(callback)
#     else:
#         await callback.answer(
#             "‚ùå –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è!",
#             show_alert=True
#         )


@router.callback_query(F.data == "settings:pulse:manual")
async def callback_pulse_manual(callback: CallbackQuery, state: FSMContext):
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—É–ª—å—Å–∞"""
    await callback.message.answer(
        "üíì –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å (—É–¥/–º–∏–Ω):\n\n"
        "–ü—É–ª—å—Å–æ–≤—ã–µ –∑–æ–Ω—ã –±—É–¥—É—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        reply_markup=get_simple_cancel_keyboard()
    )
    await state.set_state(SettingsStates.waiting_for_max_pulse)
    await callback.answer()


@router.message(SettingsStates.waiting_for_max_pulse)
async def process_max_pulse(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—É–ª—å—Å–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await settings_menu(message, state)
        return
    
    try:
        max_pulse = int(message.text.strip())

        if max_pulse < 80 or max_pulse > 220:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (80-220 —É–¥/–º–∏–Ω).")
            return
        
        user_id = message.from_user.id
        await set_pulse_zones_manual(user_id, max_pulse)
        
        settings = await get_user_settings(user_id)
        
        await message.answer(
            f"‚úÖ –ü—É–ª—å—Å–æ–≤—ã–µ –∑–æ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!\n\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å: {max_pulse} —É–¥/–º–∏–Ω\n\n"
            f"üü¢ –ó–æ–Ω–∞ 1: {settings['zone1_min']}-{settings['zone1_max']}\n"
            f"üîµ –ó–æ–Ω–∞ 2: {settings['zone2_min']}-{settings['zone2_max']}\n"
            f"üü° –ó–æ–Ω–∞ 3: {settings['zone3_min']}-{settings['zone3_max']}\n"
            f"üü† –ó–æ–Ω–∞ 4: {settings['zone4_min']}-{settings['zone4_max']}\n"
            f"üî¥ –ó–æ–Ω–∞ 5: {settings['zone5_min']}-{settings['zone5_max']}\n",
            reply_markup={"remove_keyboard": True}
        )
        await state.clear()
        await settings_menu(message, state)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")


# –£–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–æ–Ω—ã" - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ç–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –º–µ–Ω—é
# @router.callback_query(F.data == "settings:pulse:show")
# async def callback_show_pulse_zones(callback: CallbackQuery):
#     """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—É–ª—å—Å–æ–≤—ã–µ –∑–æ–Ω—ã"""
#     await callback_pulse_zones_menu(callback)


# ============== –†–ê–ó–î–ï–õ: –¶–ï–õ–ò (8-11) ==============

@router.callback_query(F.data == "settings:goals")
async def callback_goals_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–ª–µ–π"""
    user_id = callback.from_user.id
    settings = await get_user_settings(user_id)

    info_text = "üéØ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–ª–µ–π**\n\n"

    if settings:
        distance_unit = settings.get('distance_unit', '–∫–º')
        weight_unit = settings.get('weight_unit', '–∫–≥')

        weekly_volume = settings.get('weekly_volume_goal')
        weekly_count = settings.get('weekly_trainings_goal')
        weight_goal = settings.get('weight_goal')

        info_text += f"üìä –ù–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º: {weekly_volume or '–Ω–µ –∑–∞–¥–∞–Ω'} {distance_unit}\n"
        info_text += f"üî¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é: {weekly_count or '–Ω–µ –∑–∞–¥–∞–Ω–æ'}\n"
        weight_goal_display = f"{weight_goal:.1f}" if weight_goal else '–Ω–µ –∑–∞–¥–∞–Ω'
        info_text += f"‚öñÔ∏è –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {weight_goal_display} {weight_unit}\n\n"

        # –¶–µ–ª–∏ –ø–æ —Ç–∏–ø–∞–º
        type_goals = await get_training_type_goals(user_id)
        if type_goals:
            info_text += "üèÉ –¶–µ–ª–∏ –ø–æ —Ç–∏–ø–∞–º:\n"
            for t_type, goal in type_goals.items():
                # –î–ª—è —Å–∏–ª–æ–≤—ã—Ö - –º–∏–Ω—É—Ç—ã, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –∫–º
                unit = "–º–∏–Ω/–Ω–µ–¥–µ–ª—é" if t_type == '—Å–∏–ª–æ–≤–∞—è' else f"{distance_unit}/–Ω–µ–¥–µ–ª—é"
                info_text += f"  ‚Ä¢ {t_type}: {goal} {unit}\n"
    else:
        info_text += "üìä –ù–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º: –Ω–µ –∑–∞–¥–∞–Ω –∫–º\n"
        info_text += "üî¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é: –Ω–µ –∑–∞–¥–∞–Ω–æ\n"
        info_text += "‚öñÔ∏è –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: –Ω–µ –∑–∞–¥–∞–Ω –∫–≥\n"

    info_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"

    await callback.message.edit_text(
        info_text,
        reply_markup=get_goals_settings_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


# 8. –¶–ï–õ–ï–í–û–ô –û–ë–™–ï–ú
@router.callback_query(F.data == "settings:goals:volume")
async def callback_set_weekly_volume(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞"""
    settings = await get_user_settings(callback.from_user.id)
    distance_unit = settings.get('distance_unit', '–∫–º') if settings else '–∫–º'
    
    await callback.message.answer(
        f"üìä –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –æ–±—ä–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é ({distance_unit}):\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 30",
        reply_markup=get_simple_cancel_keyboard()
    )
    await state.set_state(SettingsStates.waiting_for_weekly_volume)
    await callback.answer()


@router.message(SettingsStates.waiting_for_weekly_volume)
async def process_weekly_volume(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –ø–æ–¥–º–µ–Ω—é
        await send_goals_menu(message, message.from_user.id)
        return
    
    try:
        volume = float(message.text.strip().replace(',', '.'))
        
        if volume <= 0 or volume > 1000:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (0-1000).")
            return
        
        user_id = message.from_user.id
        await update_user_setting(user_id, 'weekly_volume_goal', volume)
        
        settings = await get_user_settings(user_id)
        distance_unit = settings.get('distance_unit', '–∫–º')
        
        await message.answer(
            f"‚úÖ –¶–µ–ª–µ–≤–æ–π –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {volume} {distance_unit}",
            reply_markup={"remove_keyboard": True}
        )
        await state.clear()
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –ø–æ–¥–º–µ–Ω—é
        await send_goals_menu(message, message.from_user.id)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30)")


# 9. –ö–û–õ–ò–ß–ï–°–¢–í–û –¢–†–ï–ù–ò–†–û–í–û–ö –í –ù–ï–î–ï–õ–Æ
@router.callback_query(F.data == "settings:goals:count")
async def callback_set_weekly_count(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    await callback.message.answer(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 5",
        reply_markup=get_simple_cancel_keyboard()
    )
    await state.set_state(SettingsStates.waiting_for_weekly_count)
    await callback.answer()


@router.message(SettingsStates.waiting_for_weekly_count)
async def process_weekly_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –ø–æ–¥–º–µ–Ω—é
        await send_goals_menu(message, message.from_user.id)
        return
    
    try:
        count = int(message.text.strip())
        
        if count <= 0 or count > 30:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (1-30).")
            return
        
        user_id = message.from_user.id
        await update_user_setting(user_id, 'weekly_trainings_goal', count)
        
        await message.answer(
            f"‚úÖ –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {count} –≤ –Ω–µ–¥–µ–ª—é",
            reply_markup={"remove_keyboard": True}
        )
        await state.clear()
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –ø–æ–¥–º–µ–Ω—é
        await send_goals_menu(message, message.from_user.id)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")


# 10. –¶–ï–õ–ò –ü–û –¢–ò–ü–ê–ú –¢–†–ï–ù–ò–†–û–í–û–ö
@router.callback_query(F.data == "settings:goals:by_type")
async def callback_set_type_goals(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–∏"""
    await callback.message.edit_text(
        "üèÉ **–¶–µ–ª–∏ –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–∏:",
        reply_markup=get_training_type_goals_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("type_goal:"))
async def callback_type_goal_input(callback: CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ —Ü–µ–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞"""
    training_type = callback.data.split(":")[1]

    await state.update_data(current_type_goal=training_type)

    settings = await get_user_settings(callback.from_user.id)
    distance_unit = settings.get('distance_unit', '–∫–º') if settings else '–∫–º'

    # –î–ª—è —Å–∏–ª–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∏–Ω—É—Ç—ã, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –∫–º
    if training_type == '—Å–∏–ª–æ–≤–∞—è':
        await callback.message.answer(
            f"üéØ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è —Ç–∏–ø–∞ '{training_type}' –≤ –º–∏–Ω—É—Ç–∞—Ö/–Ω–µ–¥–µ–ª—é:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 120 (2 —á–∞—Å–∞ –≤ –Ω–µ–¥–µ–ª—é)",
            reply_markup=get_simple_cancel_keyboard()
        )
    else:
        await callback.message.answer(
            f"üéØ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è —Ç–∏–ø–∞ '{training_type}' –≤ {distance_unit}/–Ω–µ–¥–µ–ª—é:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 20",
            reply_markup=get_simple_cancel_keyboard()
        )

    await state.set_state(SettingsStates.waiting_for_type_goal)
    await callback.answer()


@router.message(SettingsStates.waiting_for_type_goal)
async def process_type_goal(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–ª–∏ –ø–æ —Ç–∏–ø—É"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        await message.answer(
            "üèÉ **–¶–µ–ª–∏ –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–∏:",
            reply_markup=get_training_type_goals_keyboard(),
            parse_mode="Markdown"
        )
        return

    try:
        goal = float(message.text.strip().replace(',', '.'))

        if goal <= 0 or goal > 500:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (0-500).")
            return

        data = await state.get_data()
        training_type = data.get('current_type_goal')

        user_id = message.from_user.id

        # –î–ª—è —Å–∏–ª–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ goal - —ç—Ç–æ –º–∏–Ω—É—Ç—ã, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –∫–º
        await set_training_type_goal(user_id, training_type, goal)

        settings = await get_user_settings(user_id)
        distance_unit = settings.get('distance_unit', '–∫–º')

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if training_type == '—Å–∏–ª–æ–≤–∞—è':
            unit_text = "–º–∏–Ω/–Ω–µ–¥–µ–ª—é"
        else:
            unit_text = f"{distance_unit}/–Ω–µ–¥–µ–ª—é"

        await state.clear()

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        await message.answer(
            f"‚úÖ –¶–µ–ª—å –¥–ª—è '{training_type}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {goal} {unit_text}",
            reply_markup={"remove_keyboard": True}
        )

        await message.answer(
            "üèÉ **–¶–µ–ª–∏ –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–∏:",
            reply_markup=get_training_type_goals_keyboard(),
            parse_mode="Markdown"
        )

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


# 11. –¶–ï–õ–ï–í–û–ô –í–ï–°
@router.callback_query(F.data == "settings:goals:weight")
async def callback_set_weight_goal(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –≤–µ—Å–∞"""
    settings = await get_user_settings(callback.from_user.id)
    weight_unit = settings.get('weight_unit', '–∫–≥') if settings else '–∫–≥'
    
    await callback.message.answer(
        f"‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å –≤ {weight_unit}:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 75",
        reply_markup=get_simple_cancel_keyboard()
    )
    await state.set_state(SettingsStates.waiting_for_weight_goal)
    await callback.answer()


@router.message(SettingsStates.waiting_for_weight_goal)
async def process_weight_goal(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –≤–µ—Å–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –ø–æ–¥–º–µ–Ω—é
        await send_goals_menu(message, message.from_user.id)
        return
    
    try:
        weight_goal = float(message.text.strip().replace(',', '.'))
        
        if weight_goal <= 0 or weight_goal > 500:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (0-500).")
            return
        
        user_id = message.from_user.id
        await update_user_setting(user_id, 'weight_goal', weight_goal)
        
        settings = await get_user_settings(user_id)
        weight_unit = settings.get('weight_unit', '–∫–≥')
        
        await message.answer(
            f"‚úÖ –¶–µ–ª–µ–≤–æ–π –≤–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {weight_goal} {weight_unit}",
            reply_markup={"remove_keyboard": True}
        )
        await state.clear()
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –ø–æ–¥–º–µ–Ω—é
        await send_goals_menu(message, message.from_user.id)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


# ============== –†–ê–ó–î–ï–õ: –ï–î–ò–ù–ò–¶–´ –ò–ó–ú–ï–†–ï–ù–ò–Ø (12) ==============

@router.callback_query(F.data == "settings:units")
async def callback_units_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    settings = await get_user_settings(user_id)

    info_text = "üìè **–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è**\n\n"

    if settings:
        info_text += f"üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {settings.get('distance_unit', '–∫–º')}\n"
        info_text += f"‚öñÔ∏è –í–µ—Å: {settings.get('weight_unit', '–∫–≥')}\n"
        info_text += f"üìÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {settings.get('date_format', '–î–î.–ú–ú.–ì–ì–ì–ì')}\n"
        info_text += f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {settings.get('timezone', 'Europe/Moscow')}\n"

    info_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"

    await callback.message.edit_text(
        info_text,
        reply_markup=get_units_settings_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "settings:units:distance")
async def callback_set_distance_unit(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –µ–¥–∏–Ω–∏—Ü—ã –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏"""
    await callback.message.edit_text(
        "üìè –í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏:",
        reply_markup=get_distance_unit_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("distance_unit:"))
async def callback_save_distance_unit(callback: CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏"""
    unit = callback.data.split(":")[1]

    user_id = callback.from_user.id
    await update_user_setting(user_id, 'distance_unit', unit)

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –µ–¥–∏–Ω–∏—Ü —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    settings = await get_user_settings(user_id)

    info_text = "üìè **–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è**\n\n"

    if settings:
        info_text += f"üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {settings.get('distance_unit', '–∫–º')}\n"
        info_text += f"‚öñÔ∏è –í–µ—Å: {settings.get('weight_unit', '–∫–≥')}\n"
        info_text += f"üìÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {settings.get('date_format', '–î–î.–ú–ú.–ì–ì–ì–ì')}\n"

    info_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"

    await callback.message.edit_text(
        info_text,
        reply_markup=get_units_settings_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")


@router.callback_query(F.data == "settings:units:weight")
async def callback_set_weight_unit(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –µ–¥–∏–Ω–∏—Ü—ã –≤–µ—Å–∞"""
    await callback.message.edit_text(
        "‚öñÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤–µ—Å–∞:",
        reply_markup=get_weight_unit_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("weight_unit:"))
async def callback_save_weight_unit(callback: CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –≤–µ—Å–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º"""
    new_unit = callback.data.split(":")[1]

    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—É—é –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
    settings = await get_user_settings(user_id)
    old_unit = settings.get('weight_unit', '–∫–≥') if settings else '–∫–≥'

    # –ï—Å–ª–∏ –µ–¥–∏–Ω–∏—Ü–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
    if old_unit == new_unit:
        info_text = "üìè **–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è**\n\n"

        if settings:
            info_text += f"üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {settings.get('distance_unit', '–∫–º')}\n"
            info_text += f"‚öñÔ∏è –í–µ—Å: {settings.get('weight_unit', '–∫–≥')}\n"
            info_text += f"üìÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {settings.get('date_format', '–î–î.–ú–ú.–ì–ì–ì–ì')}\n"

        info_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"

        await callback.message.edit_text(
            info_text,
            reply_markup=get_units_settings_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer("–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞")
        return

    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–µ—Å–∞
    await recalculate_all_weights(user_id, old_unit, new_unit)

    # –û–±–Ω–æ–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    await update_user_setting(user_id, 'weight_unit', new_unit)

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –µ–¥–∏–Ω–∏—Ü —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    settings = await get_user_settings(user_id)

    info_text = "üìè **–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è**\n\n"

    if settings:
        info_text += f"üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {settings.get('distance_unit', '–∫–º')}\n"
        info_text += f"‚öñÔ∏è –í–µ—Å: {settings.get('weight_unit', '–∫–≥')}\n"
        info_text += f"üìÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {settings.get('date_format', '–î–î.–ú–ú.–ì–ì–ì–ì')}\n"

    info_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"

    await callback.message.edit_text(
        info_text,
        reply_markup=get_units_settings_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")


@router.callback_query(F.data == "settings:units:date")
async def callback_set_date_format(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã"""
    await callback.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã:",
        reply_markup=get_date_format_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("date_format:"))
async def callback_save_date_format(callback: CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã"""
    date_format = callback.data.split(":")[1]

    user_id = callback.from_user.id
    await update_user_setting(user_id, 'date_format', date_format)

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –µ–¥–∏–Ω–∏—Ü —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    settings = await get_user_settings(user_id)

    info_text = "üìè **–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è**\n\n"

    if settings:
        info_text += f"üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {settings.get('distance_unit', '–∫–º')}\n"
        info_text += f"‚öñÔ∏è –í–µ—Å: {settings.get('weight_unit', '–∫–≥')}\n"
        info_text += f"üìÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {settings.get('date_format', '–î–î.–ú–ú.–ì–ì–ì–ì')}\n"

    info_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"

    await callback.message.edit_text(
        info_text,
        reply_markup=get_units_settings_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")


# ============== –†–ê–ó–î–ï–õ: –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø (13-14) ==============

@router.callback_query(F.data == "settings:notifications")
async def callback_notifications_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = callback.from_user.id
    settings = await get_user_settings(user_id)
    
    info_text = "üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n"
    
    if settings:
        daily_time = settings.get('daily_pulse_weight_time')
        report_day = settings.get('weekly_report_day', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
        report_time = settings.get('weekly_report_time', '09:00')
        
        info_text += f"‚è∞ –í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞: {daily_time or '–Ω–µ –∑–∞–¥–∞–Ω–æ'}\n"
        info_text += f"üìä –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: {report_day}, {report_time}\n"
    
    info_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    
    await callback.message.edit_text(
        info_text,
        reply_markup=get_notifications_settings_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


# 13. –í–†–ï–ú–Ø –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø
@router.callback_query(F.data == "settings:notif:daily_time")
async def callback_set_daily_time(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await callback.message.answer(
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–≤–æ–¥–µ –ø—É–ª—å—Å–∞ –∏ –≤–µ—Å–∞\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –≤ –ª—é–±–æ–º —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "‚Ä¢ 8:0 –∏–ª–∏ 8:00\n"
        "‚Ä¢ 09:00\n"
        "‚Ä¢ 9 (–±—É–¥–µ—Ç 09:00)\n"
        "‚Ä¢ 23:30\n\n"
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.",
        reply_markup=get_simple_cancel_keyboard()
    )
    await state.set_state(SettingsStates.waiting_for_daily_time)
    await callback.answer()


@router.message(SettingsStates.waiting_for_daily_time)
async def process_daily_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –ø–æ–¥–º–µ–Ω—é
        await send_notifications_menu(message, message.from_user.id)
        return

    from utils.time_normalizer import validate_and_normalize_time

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è
    success, normalized_time, error_msg = validate_and_normalize_time(message.text)

    if not success:
        await message.answer(error_msg)
        return

    user_id = message.from_user.id
    await update_user_setting(user_id, 'daily_pulse_weight_time', normalized_time)

    await message.answer(
        f"‚úÖ –í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {normalized_time}",
        reply_markup={"remove_keyboard": True}
    )
    await state.clear()
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –ø–æ–¥–º–µ–Ω—é
    await send_notifications_menu(message, message.from_user.id)


# 14. –í–†–ï–ú–Ø –ù–ï–î–ï–õ–¨–ù–û–ì–û –û–¢–ß–ï–¢–ê
@router.callback_query(F.data == "settings:notif:weekly_report")
async def callback_set_weekly_report(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
    await callback.message.edit_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:",
        reply_markup=get_weekday_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("weekday:"))
async def callback_save_weekday(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏"""
    weekday = callback.data.split(":")[1]
    
    await state.update_data(report_weekday=weekday)
    
    await callback.message.answer(
        f"üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤—ã–±—Ä–∞–Ω: {weekday}\n\n"
        "‚è∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –≤ –ª—é–±–æ–º —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "‚Ä¢ 8:0 –∏–ª–∏ 8:00\n"
        "‚Ä¢ 09:00\n"
        "‚Ä¢ 9 (–±—É–¥–µ—Ç 09:00)\n"
        "‚Ä¢ 23:30",
        reply_markup=get_simple_cancel_keyboard()
    )
    await state.set_state(SettingsStates.waiting_for_report_time)
    await callback.answer()


@router.message(SettingsStates.waiting_for_report_time)
async def process_report_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –ø–æ–¥–º–µ–Ω—é
        await send_notifications_menu(message, message.from_user.id)
        return

    from utils.time_normalizer import validate_and_normalize_time

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è
    success, normalized_time, error_msg = validate_and_normalize_time(message.text)

    if not success:
        await message.answer(error_msg)
        return

    data = await state.get_data()
    weekday = data.get('report_weekday')

    user_id = message.from_user.id

    await update_user_setting(user_id, 'weekly_report_day', weekday)
    await update_user_setting(user_id, 'weekly_report_time', normalized_time)

    await message.answer(
        f"‚úÖ –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
        f"üìÖ –î–µ–Ω—å: {weekday}\n"
        f"‚è∞ –í—Ä–µ–º—è: {normalized_time}",
        reply_markup={"remove_keyboard": True}
    )
    await state.clear()
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –ø–æ–¥–º–µ–Ω—é
    await send_notifications_menu(message, message.from_user.id)


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ê–õ–ï–ù–î–ê–†–Ø –î–õ–Ø –î–ê–¢–´ –†–û–ñ–î–ï–ù–ò–Ø ====================
from settings.calendar_handlers_birth import register_calendar_birth_handlers

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
register_calendar_birth_handlers(router)


# ============== –†–ê–ó–î–ï–õ: –ß–ê–°–û–í–û–ô –ü–û–Ø–° ==============

@router.callback_query(F.data == "settings:units:timezone")
async def callback_set_timezone(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    await callback.message.edit_text(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        reply_markup=get_timezone_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("timezone:"))
async def callback_save_timezone(callback: CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    timezone = callback.data.split(":")[1]
    user_id = callback.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await update_user_setting(user_id, 'timezone', timezone)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
    settings = await get_user_settings(user_id)
    
    info_text = "üìè **–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è**\n\n"
    
    if settings:
        info_text += f"üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {settings.get('distance_unit', '–∫–º')}\n"
        info_text += f"‚öñÔ∏è –í–µ—Å: {settings.get('weight_unit', '–∫–≥')}\n"
        info_text += f"üìÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {settings.get('date_format', '–î–î.–ú–ú.–ì–ì–ì–ì')}\n"
        info_text += f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {settings.get('timezone', 'Europe/Moscow')}\n"
    
    info_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    
    await callback.message.edit_text(
        info_text,
        reply_markup=get_units_settings_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
