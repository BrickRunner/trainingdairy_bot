"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
"""

from aiogram import F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import datetime
import logging

logger = logging.getLogger(__name__)


async def handle_calendar_birth_date_selection(callback: CallbackQuery, state: FSMContext, router):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    from bot.calendar_keyboard import CalendarKeyboard
    from database.queries import update_user_setting
    from utils.date_formatter import DateFormatter, get_user_date_format
    from settings.settings_handlers_full import send_profile_menu

    logger.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ cal_birth_1_select_: {callback.data}")

    # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    parsed = CalendarKeyboard.parse_callback_data(callback.data.replace("cal_birth_", "cal_"))
    selected_date = parsed.get("date")

    if not selected_date:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –∏–∑ –±—É–¥—É—â–µ–≥–æ
    from datetime import timedelta
    utc_now = datetime.utcnow()
    moscow_now = utc_now + timedelta(hours=3)
    today = moscow_now.date()

    if selected_date.date() > today:
        await callback.answer("‚ùå –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–∞ (–æ—Ç 5 –¥–æ 120 –ª–µ—Ç)
    birth_date = selected_date.date()
    age = (today - birth_date).days // 365

    if age < 5 or age > 120:
        await callback.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 5 –¥–æ 120 –ª–µ—Ç).", show_alert=True)
        return

    user_id = callback.from_user.id
    birth_date_str = birth_date.strftime('%Y-%m-%d')
    await update_user_setting(user_id, 'birth_date', birth_date_str)

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    date_format = await get_user_date_format(user_id)
    date_str = DateFormatter.format_date(birth_date, date_format)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º
    try:
        await callback.message.delete()
    except Exception:
        pass

    await callback.message.answer(
        f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {date_str}\n"
        f"üéâ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç"
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
    await send_profile_menu(callback.message, user_id)

    await callback.answer()


async def handle_calendar_birth_date_navigation(callback: CallbackQuery, state: FSMContext, router):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é –¥–ª—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    from bot.calendar_keyboard import CalendarKeyboard
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    logger.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ cal_birth_ –Ω–∞–≤–∏–≥–∞—Ü–∏—è: {callback.data}")

    # –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã (–æ–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ handle_calendar_birth_date_selection)
    if callback.data.startswith("cal_birth_1_select_"):
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏
    if callback.data == "cal_birth_empty":
        await callback.answer()
        return

    # –≠—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
    callback_data_normalized = callback.data.replace("cal_birth_", "cal_")
    new_keyboard = CalendarKeyboard.handle_navigation(callback_data_normalized, prefix="cal")

    if new_keyboard:
        # –ú–µ–Ω—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ cal_birth –¥–ª—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
        new_keyboard_json = new_keyboard.model_dump()
        for row in new_keyboard_json.get('inline_keyboard', []):
            for button in row:
                if 'callback_data' in button and button['callback_data'].startswith('cal_'):
                    button['callback_data'] = button['callback_data'].replace('cal_', 'cal_birth_', 1)

        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º–∏ callback_data
        new_rows = []
        for row in new_keyboard_json['inline_keyboard']:
            new_row = []
            for btn in row:
                new_row.append(InlineKeyboardButton(
                    text=btn['text'],
                    callback_data=btn['callback_data']
                ))
            new_rows.append(new_row)

        final_keyboard = InlineKeyboardMarkup(inline_keyboard=new_rows)

        try:
            await callback.message.edit_reply_markup(reply_markup=final_keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è: {str(e)}")

    await callback.answer()


def register_calendar_birth_handlers(router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""

    @router.callback_query(F.data.startswith("cal_birth_1_select_"))
    async def _handle_selection(callback: CallbackQuery, state: FSMContext):
        await handle_calendar_birth_date_selection(callback, state, router)

    @router.callback_query(F.data.startswith("cal_birth_"))
    async def _handle_navigation(callback: CallbackQuery, state: FSMContext):
        await handle_calendar_birth_date_navigation(callback, state, router)
