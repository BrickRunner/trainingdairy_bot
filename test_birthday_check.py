"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è
"""

import asyncio
from datetime import datetime
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from database.queries import get_all_users_with_birthdays


async def test_birthday_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è"""

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows –∫–æ–Ω—Å–æ–ª–∏
    import sys
    if sys.platform == 'win32':
        import io
        sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

    print("=" * 60)
    print("–¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ü–û–ó–î–†–ê–í–õ–ï–ù–ò–ô –° –î–ù–Å–ú –†–û–ñ–î–ï–ù–ò–Ø")
    print("=" * 60)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today = datetime.now()
    print(f"\n–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {today.strftime('%d.%m.%Y')}")
    print(f"–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: {today.day}")
    print(f"–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {today.month}")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
    print("\n" + "-" * 60)
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    print("-" * 60)

    users = await get_all_users_with_birthdays()

    if not users:
        print("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ù–ï–¢ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è!")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è")
        print("2. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
        print("3. –ü–æ–ª–µ birth_date –≤ —Ç–∞–±–ª–∏—Ü–µ user_settings –ø—É—Å—Ç–æ–µ")
        return

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è: {len(users)}")
    print("\n–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")

    birthdays_today = []

    for user in users:
        user_id = user['user_id']
        birth_date = user['birth_date']

        # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        age = today.year - birth_date.year
        if (today.month, today.day) < (birth_date.month, birth_date.day):
            age -= 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω—ë–º
        is_birthday_today = (birth_date.day == today.day and birth_date.month == today.month)

        status = "üéâ –°–ï–ì–û–î–ù–Ø –î–ï–ù–¨ –†–û–ñ–î–ï–ù–ò–Ø!" if is_birthday_today else ""

        print(f"\n  User ID: {user_id}")
        print(f"  –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date.strftime('%d.%m.%Y')}")
        print(f"  –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç")
        print(f"  {status}")

        if is_birthday_today:
            birthdays_today.append(user)

    print("\n" + "=" * 60)

    if birthdays_today:
        print(f"\n‚úÖ –°–ï–ì–û–î–ù–Ø –î–ï–ù–¨ –†–û–ñ–î–ï–ù–ò–Ø –£ {len(birthdays_today)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        print("–ò–º –î–û–õ–ñ–ù–´ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –≤ 9:10 —É—Ç—Ä–∞")
    else:
        print("\n‚ùå –°–µ–≥–æ–¥–Ω—è –ù–ï–¢ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è")
        print("–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –ù–ï –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

    print("\n" + "=" * 60)
    print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("=" * 60)

    if not birthdays_today and users:
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
        from datetime import timedelta
        min_days = float('inf')
        next_birthday_user = None

        for user in users:
            birth_date = user['birth_date']
            # –°–æ–∑–¥–∞—ë–º –¥–∞—Ç—É –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —ç—Ç–æ–º –≥–æ–¥—É
            this_year_birthday = datetime(today.year, birth_date.month, birth_date.day)

            # –ï—Å–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É–∂–µ –ø—Ä–æ—à—ë–ª –≤ —ç—Ç–æ–º –≥–æ–¥—É, –±–µ—Ä—ë–º —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
            if this_year_birthday < today:
                this_year_birthday = datetime(today.year + 1, birth_date.month, birth_date.day)

            days_until = (this_year_birthday - today).days

            if days_until < min_days:
                min_days = days_until
                next_birthday_user = user

        if next_birthday_user:
            next_date = next_birthday_user['birth_date']
            print(f"\n–ë–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {next_date.strftime('%d.%m')} (—á–µ—Ä–µ–∑ {min_days} –¥–Ω–µ–π)")
            print(f"User ID: {next_birthday_user['user_id']}")

    if not users:
        print("\n1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —É–∫–∞–∑–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:")
        print("   –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")
        print("\n2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é:")
        print("   SELECT id, birth_date FROM user_settings WHERE birth_date IS NOT NULL;")


if __name__ == "__main__":
    asyncio.run(test_birthday_check())
