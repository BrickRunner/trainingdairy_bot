"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import json
import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.fsm import RegistrationStates
from database.queries import get_user_settings, update_user_setting, init_user_settings, set_pulse_zones_auto
from registration.registration_keyboards import (
    get_gender_keyboard,
    get_training_types_keyboard
)
from bot.keyboards import get_main_menu_keyboard

router = Router()
logger = logging.getLogger(__name__)


async def start_registration(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await state.set_state(RegistrationStates.waiting_for_name)

    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞.\n\n"
        "üìù <b>–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?</b>\n\n"
        "–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:"
    )

    await message.answer(welcome_text, parse_mode="HTML")


@router.message(RegistrationStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    name = message.text.strip()

    if len(name) < 2 or len(name) > 50:
        await message.answer(
            "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ FSM
    await state.update_data(name=name)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    user_id = message.from_user.id
    await init_user_settings(user_id)
    await update_user_setting(user_id, 'name', name)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è
    await state.set_state(RegistrationStates.waiting_for_birth_date)

    await message.answer(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! üòä\n\n"
        "üìÖ <b>–£–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è</b>\n\n"
        "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.1990)\n"
        "–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—É–ª—å—Å–æ–≤—ã—Ö –∑–æ–Ω.",
        parse_mode="HTML"
    )


@router.message(RegistrationStates.waiting_for_birth_date)
async def process_birth_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    user_id = message.from_user.id
    date_str = message.text.strip()

    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
    try:
        birth_date = datetime.strptime(date_str, "%d.%m.%Y")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
        today = datetime.now()
        age = (today - birth_date).days // 365

        if age < 10 or age > 100:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.\n"
                "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.1990)"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
        await state.update_data(birth_date=birth_date.strftime("%Y-%m-%d"), age=age)
        await update_user_setting(user_id, 'birth_date', birth_date.strftime("%Y-%m-%d"))

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞
        await state.set_state(RegistrationStates.waiting_for_gender)

        await message.answer(
            "üë§ <b>–í—ã–±–µ—Ä–∏ –ø–æ–ª:</b>\n\n"
            "–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—É–ª—å—Å–∞.",
            reply_markup=get_gender_keyboard(),
            parse_mode="HTML"
        )

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.1990)"
        )


@router.callback_query(RegistrationStates.waiting_for_gender, F.data.startswith("reg_gender:"))
async def process_gender(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    user_id = callback.from_user.id
    gender = callback.data.split(":")[1]  # male –∏–ª–∏ female

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª
    await state.update_data(gender=gender)
    await update_user_setting(user_id, 'gender', gender)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—É–ª—å—Å–æ–≤—ã–µ –∑–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –ø–æ–ª–∞
    data = await state.get_data()
    age = data.get('age')
    if age:
        await set_pulse_zones_auto(user_id, age)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–æ—Å—Ç—É
    await state.set_state(RegistrationStates.waiting_for_height)

    gender_text = "–ú—É–∂—Å–∫–æ–π" if gender == "male" else "–ñ–µ–Ω—Å–∫–∏–π"
    await callback.message.edit_text(
        f"‚úÖ –ü–æ–ª: {gender_text}\n\n"
        "üìè <b>–£–∫–∞–∂–∏ —Ä–æ—Å—Ç –≤ —Å–º</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 175",
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(RegistrationStates.waiting_for_height)
async def process_height(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞"""
    user_id = message.from_user.id

    try:
        height = float(message.text.strip())

        if height < 100 or height > 250:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (–æ—Ç 100 –¥–æ 250 —Å–º):"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ—Å—Ç
        await state.update_data(height=height)
        await update_user_setting(user_id, 'height', height)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–µ—Å—É
        await state.set_state(RegistrationStates.waiting_for_weight)

        await message.answer(
            f"‚úÖ –†–æ—Å—Ç: {height} —Å–º\n\n"
            "‚öñÔ∏è <b>–£–∫–∞–∂–∏ –≤–µ—Å –≤ –∫–≥</b>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 70",
            parse_mode="HTML"
        )

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175):"
        )


@router.message(RegistrationStates.waiting_for_weight)
async def process_weight(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞"""
    user_id = message.from_user.id

    try:
        weight = float(message.text.strip())

        if weight < 30 or weight > 300:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–æ—Ç 30 –¥–æ 300 –∫–≥):"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å
        await state.update_data(weight=weight)
        await update_user_setting(user_id, 'weight', weight)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        await state.set_state(RegistrationStates.selecting_main_types)
        await state.update_data(selected_types=[])

        await message.answer(
            f"‚úÖ –í–µ—Å: {weight} –∫–≥\n\n"
            "üèÉ <b>–í—ã–±–µ—Ä–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>\n\n"
            "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –¢–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è "
            "–ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n\n"
            "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤:",
            reply_markup=get_training_types_keyboard([]),
            parse_mode="HTML"
        )

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏ –≤–µ—Å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70):"
        )


@router.callback_query(RegistrationStates.selecting_main_types, F.data.startswith("reg_toggle_type:"))
async def toggle_training_type(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    training_type = callback.data.split(":")[1]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
    data = await state.get_data()
    selected_types = data.get('selected_types', [])

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–∏–ø
    if training_type in selected_types:
        selected_types.remove(training_type)
    else:
        selected_types.append(training_type)

    await state.update_data(selected_types=selected_types)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(
        reply_markup=get_training_types_keyboard(selected_types)
    )
    await callback.answer()


@router.callback_query(RegistrationStates.selecting_main_types, F.data == "reg_confirm_types")
async def confirm_training_types(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    user_id = callback.from_user.id
    data = await state.get_data()
    selected_types = data.get('selected_types', [])

    if not selected_types:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –ë–î
    await update_user_setting(user_id, 'main_training_types', json.dumps(selected_types))

    # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫–æ–≤–æ–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        language_code = callback.from_user.language_code or 'ru'

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ —è–∑—ã–∫–æ–≤–æ–º—É –∫–æ–¥—É
        timezone_map = {
            'ru': 'Europe/Moscow',
            'en': 'Europe/London',
            'de': 'Europe/Berlin',
            'fr': 'Europe/Paris',
            'es': 'Europe/Madrid',
            'it': 'Europe/Rome',
            'pt': 'Europe/Lisbon',
            'uk': 'Europe/Kiev',
            'be': 'Europe/Minsk',
            'kk': 'Asia/Almaty',
            'uz': 'Asia/Tashkent'
        }

        timezone = timezone_map.get(language_code, 'Europe/Moscow')
        logger.info(f"–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å {timezone} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (—è–∑—ã–∫: {language_code})")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")
        timezone = 'Europe/Moscow'

    await update_user_setting(user_id, 'timezone', timezone)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await state.clear()

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    name = data.get('name', '–¥—Ä—É–≥')

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    type_names = {
        '–∫—Ä–æ—Å—Å': 'üèÉ –ö—Ä–æ—Å—Å',
        '–ø–ª–∞–≤–∞–Ω–∏–µ': 'üèä –ü–ª–∞–≤–∞–Ω–∏–µ',
        '–≤–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞': 'üö¥ –í–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
        '—Å–∏–ª–æ–≤–∞—è': 'üí™ –°–∏–ª–æ–≤–∞—è',
        '–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è': '‚ö° –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è',
        '–¥—Ä—É–≥–æ–µ': 'üßò –î—Ä—É–≥–æ–µ'
    }
    selected_names = [type_names.get(t, t) for t in selected_types]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
    birth_date_str = data.get('birth_date', '')
    if birth_date_str:
        birth_date_formatted = datetime.strptime(birth_date_str, "%Y-%m-%d").strftime("%d.%m.%Y")
    else:
        birth_date_formatted = '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª
    gender_text = '–ú—É–∂—Å–∫–æ–π' if data.get('gender') == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'

    completion_text = (
        f"üéâ <b>–û—Ç–ª–∏—á–Ω–æ, {name}! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        "üìã <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
        f"üë§ –ò–º—è: {name}\n"
        f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date_formatted}\n"
        f"‚ößÔ∏è –ü–æ–ª: {gender_text}\n"
        f"üìè –†–æ—Å—Ç: {data.get('height')} —Å–º\n"
        f"‚öñÔ∏è –í–µ—Å: {data.get('weight')} –∫–≥\n"
        f"üèÉ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {', '.join(selected_names)}\n"
        f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –¢–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!\n"
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏."
    )

    await callback.message.edit_text(
        completion_text,
        parse_mode="HTML"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )

    await callback.answer()
