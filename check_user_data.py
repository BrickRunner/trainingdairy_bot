"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import aiosqlite
import asyncio
import os
import json

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = os.getenv('DB_PATH', 'bot_data.db')


async def check_user_data(user_id: int):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        async with db.execute(
            "SELECT * FROM user_settings WHERE user_id = ?",
            (user_id,)
        ) as cursor:
            row = await cursor.fetchone()

            if row:
                data = dict(row)
                print("=" * 60)
                print(f"–î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id}")
                print("=" * 60)
                print()

                # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
                print("üìã –ü–†–û–§–ò–õ–¨:")
                print(f"  üë§ –ò–º—è: {data.get('name') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}")
                print(f"  üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data.get('birth_date') or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}")

                # –ü–æ–ª —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                gender = data.get('gender')
                if gender == 'male':
                    gender_text = 'üë® –ú—É–∂—Å–∫–æ–π'
                elif gender == 'female':
                    gender_text = 'üë© –ñ–µ–Ω—Å–∫–∏–π'
                else:
                    gender_text = '–Ω–µ —É–∫–∞–∑–∞–Ω'
                print(f"  ‚ößÔ∏è –ü–æ–ª: {gender_text}")

                print(f"  üìè –†–æ—Å—Ç: {data.get('height') or '–Ω–µ —É–∫–∞–∑–∞–Ω'} —Å–º")
                print(f"  ‚öñÔ∏è –í–µ—Å: {data.get('weight') or '–Ω–µ —É–∫–∞–∑–∞–Ω'} {data.get('weight_unit', '–∫–≥')}")

                # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                try:
                    main_types = json.loads(data.get('main_training_types', '[]'))
                    print(f"  üèÉ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {', '.join(main_types) if main_types else '–Ω–µ –≤—ã–±—Ä–∞–Ω—ã'}")
                except:
                    print(f"  üèÉ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")

                print()

                # –ü—É–ª—å—Å–æ–≤—ã–µ –∑–æ–Ω—ã
                print("üíì –ü–£–õ–¨–°–û–í–´–ï –ó–û–ù–´:")
                print(f"  –ú–∞–∫—Å. –ø—É–ª—å—Å: {data.get('max_pulse') or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
                if data.get('max_pulse'):
                    print(f"  –ó–æ–Ω–∞ 1: {data.get('zone1_min')}-{data.get('zone1_max')} —É–¥/–º–∏–Ω")
                    print(f"  –ó–æ–Ω–∞ 2: {data.get('zone2_min')}-{data.get('zone2_max')} —É–¥/–º–∏–Ω")
                    print(f"  –ó–æ–Ω–∞ 3: {data.get('zone3_min')}-{data.get('zone3_max')} —É–¥/–º–∏–Ω")
                    print(f"  –ó–æ–Ω–∞ 4: {data.get('zone4_min')}-{data.get('zone4_max')} —É–¥/–º–∏–Ω")
                    print(f"  –ó–æ–Ω–∞ 5: {data.get('zone5_min')}-{data.get('zone5_max')} —É–¥/–º–∏–Ω")
                print()

                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                print("‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò:")
                print(f"  üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {data.get('timezone', 'Europe/Moscow')}")
                print(f"  üìè –ï–¥–∏–Ω–∏—Ü–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏: {data.get('distance_unit', '–∫–º')}")
                print(f"  ‚öñÔ∏è –ï–¥–∏–Ω–∏—Ü–∞ –≤–µ—Å–∞: {data.get('weight_unit', '–∫–≥')}")
                print(f"  üìÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {data.get('date_format', '–î–î.–ú–ú.–ì–ì–ì–ì')}")
                print()

                # –¶–µ–ª–∏
                print("üéØ –¶–ï–õ–ò:")
                print(f"  üìä –ù–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä—ë–º: {data.get('weekly_volume_goal') or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'} –∫–º")
                print(f"  üî¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é: {data.get('weekly_trainings_goal') or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}")
                print(f"  ‚öñÔ∏è –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {data.get('weight_goal') or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'} {data.get('weight_unit', '–∫–≥')}")

                # –¶–µ–ª–∏ –ø–æ —Ç–∏–ø–∞–º
                try:
                    type_goals = json.loads(data.get('training_type_goals', '{}'))
                    if type_goals:
                        print(f"  üèÉ –¶–µ–ª–∏ –ø–æ —Ç–∏–ø–∞–º:")
                        for t_type, goal in type_goals.items():
                            print(f"    - {t_type}: {goal} –∫–º")
                except:
                    pass

                print()
                print("=" * 60)
            else:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print()
    try:
        user_id = int(input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram User ID: "))
        print()
        await check_user_data(user_id)
    except ValueError:
        print("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID")


if __name__ == "__main__":
    asyncio.run(main())
