# notification_scheduler.py (–¥–æ–±–∞–≤–∏–ª —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ; –Ω–æ –∑–¥–µ—Å—å –¥–∞—Ç—ã –≤ –æ—Ç—á—ë—Ç–∞—Ö –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —è–≤–Ω–æ, —Ç–∞–∫ —á—Ç–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
"""
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, 
–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
"""

import asyncio
from datetime import datetime, timedelta
import pytz
from aiogram import Bot
from database.queries import (
    get_user_settings,
    get_trainings_by_period,
    get_training_statistics
)


async def check_birthdays(bot: Bot):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
    –î–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
    """
    import aiosqlite
    import os
    
    DB_PATH = os.getenv('DB_PATH', 'database.sqlite')
    
    today = datetime.now()
    today_str = today.strftime('%m-%d')  # –§–æ—Ä–º–∞—Ç –ú–ú-–î–î
    
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
        async with db.execute(
            """
            SELECT user_id, name, birth_date 
            FROM user_settings 
            WHERE strftime('%m-%d', birth_date) = ?
            """,
            (today_str,)
        ) as cursor:
            rows = await cursor.fetchall()
            
            for row in rows:
                user_id = row['user_id']
                name = row['name'] or "–¥—Ä—É–≥"
                birth_date = datetime.strptime(row['birth_date'], '%Y-%m-%d')
                age = today.year - birth_date.year
                
                birthday_message = (
                    f"üéâüéÇ **–° –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è, {name}!** üéÇüéâ\n\n"
                    f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å {age}-–ª–µ—Ç–∏–µ–º! üéà\n\n"
                    "–ñ–µ–ª–∞–µ–º —Ç–µ–±–µ:\n"
                    "üí™ –ù–æ–≤—ã—Ö —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n"
                    "üèÜ –õ–∏—á–Ω—ã—Ö —Ä–µ–∫–æ—Ä–¥–æ–≤\n"
                    "‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å—è –∏ —ç–Ω–µ—Ä–≥–∏–∏\n"
                    "üöÄ –ü–æ–∫–æ—Ä–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—à–∏–Ω\n\n"
                    "–ü—É—Å—Ç—å –∫–∞–∂–¥–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–∞–¥–æ—Å—Ç—å! üèÉ‚Äç‚ôÇÔ∏è"
                )
                
                try:
                    await bot.send_message(user_id, birthday_message, parse_mode="Markdown")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def send_daily_reminders(bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≤–≤–æ–¥–µ –ø—É–ª—å—Å–∞ –∏ –≤–µ—Å–∞
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç timezone-aware datetime –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
    """
    import aiosqlite
    import os
    from health.health_keyboards import get_daily_reminder_keyboard

    DB_PATH = os.getenv('DB_PATH', 'database.sqlite')

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ UTC –≤—Ä–µ–º—è
    utc_now = datetime.now(pytz.UTC)

    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        async with db.execute(
            """
            SELECT user_id, name, daily_pulse_weight_time, timezone
            FROM user_settings
            WHERE daily_pulse_weight_time IS NOT NULL
            """
        ) as cursor:
            rows = await cursor.fetchall()

            for row in rows:
                user_id = row['user_id']
                name = row['name'] or "–¥—Ä—É–≥"
                reminder_time = row['daily_pulse_weight_time']
                user_timezone_str = row['timezone'] or 'Europe/Moscow'

                try:
                    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_tz = pytz.timezone(user_timezone_str)

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UTC –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_now = utc_now.astimezone(user_tz)
                    current_time = user_now.strftime('%H:%M')
                    today = user_now.date()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    if current_time != reminder_time:
                        continue

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è
                async with db.execute(
                    """
                    SELECT morning_pulse, weight, sleep_duration
                    FROM health_metrics
                    WHERE user_id = ? AND date = ?
                    """,
                    (user_id, today)
                ) as metrics_cursor:
                    metrics = await metrics_cursor.fetchone()

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏
                missing_metrics = []
                if not metrics or not metrics['morning_pulse']:
                    missing_metrics.append("üíó –£—Ç—Ä–µ–Ω–Ω–∏–π –ø—É–ª—å—Å")
                if not metrics or not metrics['weight']:
                    missing_metrics.append("‚öñÔ∏è –í–µ—Å")
                if not metrics or not metrics['sleep_duration']:
                    missing_metrics.append("üò¥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                if missing_metrics:
                    reminder_message = (
                        f"‚è∞ <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {name}!</b> üëã\n\n"
                        "–í—Ä–µ–º—è –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –∑–¥–æ—Ä–æ–≤—å–µ:\n" +
                        "\n".join(missing_metrics) +
                        "\n\n‚ùì –•–æ—á–µ—à—å –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å–µ–π—á–∞—Å?"
                    )

                    try:
                        await bot.send_message(
                            user_id,
                            reminder_message,
                            reply_markup=get_daily_reminder_keyboard(),
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def send_weekly_reports(bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏ –∑–¥–æ—Ä–æ–≤—å–µ –≤ –≤–∏–¥–µ PDF —Ñ–∞–π–ª–∞
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç timezone-aware datetime –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
    """
    import aiosqlite
    import os
    from aiogram.types import BufferedInputFile
    from reports.weekly_report_pdf import generate_weekly_report_pdf

    DB_PATH = os.getenv('DB_PATH', 'database.sqlite')

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ UTC –≤—Ä–µ–º—è
    utc_now = datetime.now(pytz.UTC)

    # –ú–∞–ø–ø–∏–Ω–≥ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    weekday_map = {
        'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
        'Wednesday': '–°—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
        'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
        'Saturday': '–°—É–±–±–æ—Ç–∞',
        'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }

    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –Ω–µ–¥–µ–ª—å–Ω—ã–º–∏ –æ—Ç—á—ë—Ç–∞–º–∏
        async with db.execute(
            """
            SELECT user_id, name, weekly_report_day, weekly_report_time, timezone
            FROM user_settings
            WHERE weekly_report_day IS NOT NULL AND weekly_report_time IS NOT NULL
            """
        ) as cursor:
            rows = await cursor.fetchall()

            for row in rows:
                user_id = row['user_id']
                name = row['name'] or "–¥—Ä—É–≥"
                report_day = row['weekly_report_day']
                report_time = row['weekly_report_time']
                user_timezone_str = row['timezone'] or 'Europe/Moscow'

                try:
                    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_tz = pytz.timezone(user_timezone_str)

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UTC –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_now = utc_now.astimezone(user_tz)
                    current_weekday = user_now.strftime('%A')  # –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è
                    current_time = user_now.strftime('%H:%M')
                    current_weekday_ru = weekday_map.get(current_weekday, '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –æ—Ç—á—ë—Ç–∞
                    if current_weekday_ru != report_day or current_time != report_time:
                        continue

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                    continue

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –æ—Ç—á—ë—Ç
                try:
                    pdf_buffer = await generate_weekly_report_pdf(user_id)

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                    today = user_now.strftime('%Y-%m-%d')
                    filename = f"weekly_report_{today}.pdf"

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª
                    pdf_file = BufferedInputFile(
                        pdf_buffer.read(),
                        filename=filename
                    )

                    await bot.send_document(
                        user_id,
                        pdf_file,
                        caption=f"üìä <b>–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç</b>\n\n–ü—Ä–∏–≤–µ—Ç, {name}! üëã\n\n–¢–≤–æ–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é –≥–æ—Ç–æ–≤!",
                        parse_mode="HTML"
                    )

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def notification_scheduler(bot: Bot):
    """
    –ì–ª–∞–≤–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ
    """
    while True:
        try:
            now = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ 00:00
            if now.hour == 0 and now.minute == 0:
                await check_birthdays(bot)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            await send_daily_reminders(bot)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            await send_weekly_reports(bot)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        
        # –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await asyncio.sleep(60)


def start_notification_scheduler(bot: Bot):
    """
    –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    """
    asyncio.create_task(notification_scheduler(bot))