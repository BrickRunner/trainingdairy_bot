# notification_scheduler.py (–¥–æ–±–∞–≤–∏–ª —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ; –Ω–æ –∑–¥–µ—Å—å –¥–∞—Ç—ã –≤ –æ—Ç—á—ë—Ç–∞—Ö –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —è–≤–Ω–æ, —Ç–∞–∫ —á—Ç–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
"""
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, 
–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
"""

import asyncio
from datetime import datetime, timedelta
from aiogram import Bot
from database.queries import (
    get_user_settings,
    get_trainings_by_period,
    get_training_statistics
)


async def check_birthdays(bot: Bot):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
    –î–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
    """
    import aiosqlite
    import os
    
    DB_PATH = os.getenv('DB_PATH', 'database.sqlite')
    
    today = datetime.now()
    today_str = today.strftime('%m-%d')  # –§–æ—Ä–º–∞—Ç –ú–ú-–î–î
    
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
        async with db.execute(
            """
            SELECT user_id, name, birth_date 
            FROM user_settings 
            WHERE strftime('%m-%d', birth_date) = ?
            """,
            (today_str,)
        ) as cursor:
            rows = await cursor.fetchall()
            
            for row in rows:
                user_id = row['user_id']
                name = row['name'] or "–¥—Ä—É–≥"
                birth_date = datetime.strptime(row['birth_date'], '%Y-%m-%d')
                age = today.year - birth_date.year
                
                birthday_message = (
                    f"üéâüéÇ **–° –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è, {name}!** üéÇüéâ\n\n"
                    f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å {age}-–ª–µ—Ç–∏–µ–º! üéà\n\n"
                    "–ñ–µ–ª–∞–µ–º —Ç–µ–±–µ:\n"
                    "üí™ –ù–æ–≤—ã—Ö —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n"
                    "üèÜ –õ–∏—á–Ω—ã—Ö —Ä–µ–∫–æ—Ä–¥–æ–≤\n"
                    "‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å—è –∏ —ç–Ω–µ—Ä–≥–∏–∏\n"
                    "üöÄ –ü–æ–∫–æ—Ä–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—à–∏–Ω\n\n"
                    "–ü—É—Å—Ç—å –∫–∞–∂–¥–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–∞–¥–æ—Å—Ç—å! üèÉ‚Äç‚ôÇÔ∏è"
                )
                
                try:
                    await bot.send_message(user_id, birthday_message, parse_mode="Markdown")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def send_daily_reminders(bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≤–≤–æ–¥–µ –ø—É–ª—å—Å–∞ –∏ –≤–µ—Å–∞
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    import aiosqlite
    import os
    
    DB_PATH = os.getenv('DB_PATH', 'database.sqlite')
    
    current_time = datetime.now().strftime('%H:%M')
    
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        async with db.execute(
            """
            SELECT user_id, name, daily_pulse_weight_time 
            FROM user_settings 
            WHERE daily_pulse_weight_time = ?
            """,
            (current_time,)
        ) as cursor:
            rows = await cursor.fetchall()
            
            for row in rows:
                user_id = row['user_id']
                name = row['name'] or "–¥—Ä—É–≥"
                
                reminder_message = (
                    f"‚è∞ **–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ**\n\n"
                    f"–ü—Ä–∏–≤–µ—Ç, {name}! üëã\n\n"
                    "–ù–µ –∑–∞–±—É–¥—å –∑–∞–ø–∏—Å–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è:\n"
                    "üíì –ü—É–ª—å—Å –≤ –ø–æ–∫–æ–µ\n"
                    "‚öñÔ∏è –¢–µ–∫—É—â–∏–π –≤–µ—Å\n\n"
                    "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å! üìä"
                )
                
                try:
                    await bot.send_message(user_id, reminder_message, parse_mode="Markdown")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def send_weekly_reports(bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    import aiosqlite
    import os
    
    DB_PATH = os.getenv('DB_PATH', 'database.sqlite')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º—è
    now = datetime.now()
    current_weekday = now.strftime('%A')  # –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è
    current_time = now.strftime('%H:%M')
    
    # –ú–∞–ø–ø–∏–Ω–≥ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    weekday_map = {
        'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
        'Wednesday': '–°—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
        'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
        'Saturday': '–°—É–±–±–æ—Ç–∞',
        'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }
    
    current_weekday_ru = weekday_map.get(current_weekday, '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
    
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–Ω—ë–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç—á—ë—Ç–∞
        async with db.execute(
            """
            SELECT user_id, name, weekly_report_day, weekly_report_time 
            FROM user_settings 
            WHERE weekly_report_day = ? AND weekly_report_time = ?
            """,
            (current_weekday_ru, current_time)
        ) as cursor:
            rows = await cursor.fetchall()
            
            for row in rows:
                user_id = row['user_id']
                name = row['name'] or "–¥—Ä—É–≥"
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
                stats = await get_training_statistics(user_id, 'week')
                settings = await get_user_settings(user_id)
                
                distance_unit = settings.get('distance_unit', '–∫–º') if settings else '–∫–º'
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
                report_message = (
                    f"üìä **–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç**\n\n"
                    f"–ü—Ä–∏–≤–µ—Ç, {name}! üëã\n\n"
                    f"–¢–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n"
                    f"üèÉ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {stats['total_count']}\n"
                    f"üìè –û–±—â–∏–π –æ–±—ä—ë–º: {stats['total_distance']} {distance_unit}\n"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–±–∏–≤–∫—É –ø–æ —Ç–∏–ø–∞–º
                if stats['types_count']:
                    report_message += "\n**–ü–æ —Ç–∏–ø–∞–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:**\n"
                    for t_type, count in stats['types_count'].items():
                        report_message += f"  ‚Ä¢ {t_type}: {count}\n"
                
                # –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–ª–æ—Å—Ç–∏
                if stats['avg_fatigue'] > 0:
                    report_message += f"\nüò¥ –°—Ä–µ–¥–Ω—è—è —É—Å—Ç–∞–ª–æ—Å—Ç—å: {stats['avg_fatigue']}/10\n"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–π
                if settings:
                    weekly_goal = settings.get('weekly_volume_goal')
                    trainings_goal = settings.get('weekly_trainings_goal')
                    
                    if weekly_goal:
                        progress = (stats['total_distance'] / weekly_goal) * 100
                        status = "‚úÖ" if progress >= 100 else "üìà"
                        report_message += f"\n{status} –¶–µ–ª—å –ø–æ –æ–±—ä—ë–º—É: {progress:.0f}% ({stats['total_distance']}/{weekly_goal} {distance_unit})\n"
                    
                    if trainings_goal:
                        progress = (stats['total_count'] / trainings_goal) * 100
                        status = "‚úÖ" if progress >= 100 else "üìà"
                        report_message += f"{status} –¶–µ–ª—å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É: {progress:.0f}% ({stats['total_count']}/{trainings_goal})\n"
                
                report_message += "\nüí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
                
                try:
                    await bot.send_message(user_id, report_message, parse_mode="Markdown")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def notification_scheduler(bot: Bot):
    """
    –ì–ª–∞–≤–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ
    """
    while True:
        try:
            now = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ 00:00
            if now.hour == 0 and now.minute == 0:
                await check_birthdays(bot)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            await send_daily_reminders(bot)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            await send_weekly_reports(bot)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        
        # –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await asyncio.sleep(60)


def start_notification_scheduler(bot: Bot):
    """
    –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    """
    asyncio.create_task(notification_scheduler(bot))