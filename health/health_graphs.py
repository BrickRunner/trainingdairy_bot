"""
–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –º–µ—Ç—Ä–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è
"""

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime, date
from typing import List, Dict
import io
import logging

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
plt.rcParams['font.family'] = 'DejaVu Sans'


async def generate_health_graphs(metrics: List[Dict], days: int) -> io.BytesIO:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –º–µ—Ç—Ä–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è

    Args:
        metrics: –°–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–∏–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

    Returns:
        BytesIO –æ–±—ä–µ–∫—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–æ–≤
    """
    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        dates = []
        pulse_values = []
        weight_values = []
        sleep_values = []

        for metric in metrics:
            metric_date = datetime.strptime(metric['date'], '%Y-%m-%d').date()
            dates.append(metric_date)

            pulse_values.append(metric.get('morning_pulse'))
            weight_values.append(metric.get('weight'))
            sleep_values.append(metric.get('sleep_duration'))

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã —Å –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        fig, axes = plt.subplots(3, 1, figsize=(12, 10))
        fig.suptitle(f'–ú–µ—Ç—Ä–∏–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞ {days} –¥–Ω–µ–π', fontsize=16, fontweight='bold')

        # –ì—Ä–∞—Ñ–∏–∫ –ø—É–ª—å—Å–∞
        _plot_metric(
            axes[0], dates, pulse_values,
            '–£—Ç—Ä–µ–Ω–Ω–∏–π –ø—É–ª—å—Å', '—É–¥/–º–∏–Ω',
            '#e74c3c', 'üíó'
        )

        # –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞
        _plot_metric(
            axes[1], dates, weight_values,
            '–í–µ—Å', '–∫–≥',
            '#3498db', '‚öñÔ∏è'
        )

        # –ì—Ä–∞—Ñ–∏–∫ —Å–Ω–∞
        _plot_metric(
            axes[2], dates, sleep_values,
            '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞', '—á–∞—Å—ã',
            '#9b59b6', 'üò¥'
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å—Ç—É–ø–æ–≤
        plt.tight_layout()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ BytesIO
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=100, bbox_inches='tight')
        buf.seek(0)
        plt.close(fig)

        return buf

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        raise


def _plot_metric(ax, dates, values, title, ylabel, color, emoji):
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –º–µ—Ç—Ä–∏–∫–∏"""
    # –§–∏–ª—å—Ç—Ä—É–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
    valid_data = [(d, v) for d, v in zip(dates, values) if v is not None]

    if not valid_data:
        ax.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                ha='center', va='center',
                transform=ax.transAxes,
                fontsize=14, color='gray')
        ax.set_title(f'{emoji} {title}', fontsize=12, fontweight='bold')
        return

    valid_dates, valid_values = zip(*valid_data)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ª–∏–Ω–∏–∏ –∏ —Ç–æ—á–µ–∫
    ax.plot(valid_dates, valid_values,
            color=color, linewidth=2, marker='o',
            markersize=6, markerfacecolor='white',
            markeredgewidth=2, markeredgecolor=color)

    # –ó–∞–ª–∏–≤–∫–∞ –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º
    ax.fill_between(valid_dates, valid_values,
                     alpha=0.2, color=color)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Ç–æ—á–∫–∞—Ö
    for d, v in zip(valid_dates, valid_values):
        ax.annotate(f'{v:.1f}',
                   xy=(d, v),
                   xytext=(0, 10),
                   textcoords='offset points',
                   ha='center',
                   fontsize=8,
                   bbox=dict(boxstyle='round,pad=0.3',
                            facecolor='white',
                            edgecolor=color,
                            alpha=0.7))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
    ax.set_title(f'{emoji} {title}', fontsize=12, fontweight='bold')
    ax.set_ylabel(ylabel, fontsize=10)
    ax.grid(True, alpha=0.3, linestyle='--')

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–∏ X
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
    ax.xaxis.set_major_locator(mdates.DayLocator(interval=max(1, len(valid_dates)//7)))
    plt.setp(ax.xaxis.get_majorticklabels(), rotation=45, ha='right')

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –ª–∏–Ω–∏–∏
    avg_value = sum(valid_values) / len(valid_values)
    ax.axhline(y=avg_value, color=color, linestyle='--',
               linewidth=1, alpha=0.5,
               label=f'–°—Ä–µ–¥–Ω–µ–µ: {avg_value:.1f}')
    ax.legend(loc='upper right', fontsize=8)


async def generate_sleep_quality_graph(metrics: List[Dict], days: int) -> io.BytesIO:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞

    Args:
        metrics: –°–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–∏–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π

    Returns:
        BytesIO –æ–±—ä–µ–∫—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–∞
    """
    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        dates = []
        duration_values = []
        quality_values = []

        for metric in metrics:
            if metric.get('sleep_duration') or metric.get('sleep_quality'):
                metric_date = datetime.strptime(metric['date'], '%Y-%m-%d').date()
                dates.append(metric_date)
                duration_values.append(metric.get('sleep_duration'))
                quality_values.append(metric.get('sleep_quality'))

        if not dates:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–Ω–µ',
                   ha='center', va='center',
                   fontsize=16, color='gray')
            ax.axis('off')

            buf = io.BytesIO()
            plt.savefig(buf, format='png', dpi=100, bbox_inches='tight')
            buf.seek(0)
            plt.close(fig)
            return buf

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã —Å –¥–≤—É–º—è –æ—Å—è–º–∏ Y
        fig, ax1 = plt.subplots(figsize=(12, 6))
        fig.suptitle(f'üò¥ –ê–Ω–∞–ª–∏–∑ —Å–Ω–∞ –∑–∞ {days} –¥–Ω–µ–π', fontsize=16, fontweight='bold')

        # –ì—Ä–∞—Ñ–∏–∫ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–Ω–∞
        color1 = '#3498db'
        ax1.set_xlabel('–î–∞—Ç–∞', fontsize=11)
        ax1.set_ylabel('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á–∞—Å—ã)', color=color1, fontsize=11)

        # –§–∏–ª—å—Ç—Ä—É–µ–º None –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        valid_duration = [(d, v) for d, v in zip(dates, duration_values) if v is not None]
        if valid_duration:
            dur_dates, dur_values = zip(*valid_duration)
            line1 = ax1.plot(dur_dates, dur_values,
                           color=color1, linewidth=2,
                           marker='o', markersize=8,
                           label='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞')
            ax1.tick_params(axis='y', labelcolor=color1)
            ax1.fill_between(dur_dates, dur_values, alpha=0.2, color=color1)

            # –õ–∏–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π –Ω–æ—Ä–º—ã (7-9 —á–∞—Å–æ–≤)
            ax1.axhspan(7, 9, alpha=0.1, color='green', label='–ù–æ—Ä–º–∞ (7-9 —á)')

        # –ì—Ä–∞—Ñ–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞
        ax2 = ax1.twinx()
        color2 = '#e74c3c'
        ax2.set_ylabel('–ö–∞—á–µ—Å—Ç–≤–æ (1-5)', color=color2, fontsize=11)

        # –§–∏–ª—å—Ç—Ä—É–µ–º None –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
        valid_quality = [(d, v) for d, v in zip(dates, quality_values) if v is not None]
        if valid_quality:
            qual_dates, qual_values = zip(*valid_quality)
            line2 = ax2.plot(qual_dates, qual_values,
                           color=color2, linewidth=2,
                           marker='s', markersize=8,
                           label='–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞')
            ax2.tick_params(axis='y', labelcolor=color2)
            ax2.set_ylim(0, 6)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–∏ X
        ax1.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
        ax1.xaxis.set_major_locator(mdates.DayLocator(interval=max(1, len(dates)//7)))
        plt.setp(ax1.xaxis.get_majorticklabels(), rotation=45, ha='right')

        # –°–µ—Ç–∫–∞
        ax1.grid(True, alpha=0.3, linestyle='--')

        # –õ–µ–≥–µ–Ω–¥–∞
        lines1 = line1 if valid_duration else []
        lines2 = line2 if valid_quality else []
        if lines1 or lines2:
            labels1 = [l.get_label() for l in (lines1 if lines1 else [])]
            labels2 = [l.get_label() for l in (lines2 if lines2 else [])]
            ax1.legend(lines1 + lines2 + [plt.Line2D([0], [0], color='green', alpha=0.3, linewidth=10)],
                      labels1 + labels2 + ['–ù–æ—Ä–º–∞ (7-9 —á)'],
                      loc='upper left', fontsize=9)

        plt.tight_layout()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ BytesIO
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=100, bbox_inches='tight')
        buf.seek(0)
        plt.close(fig)

        return buf

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–Ω–∞: {e}")
        raise
