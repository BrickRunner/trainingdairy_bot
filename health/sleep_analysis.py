"""
–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–Ω–∞ (–∫–∞–∫ –≤ Polar, Garmin, Coros)
"""

from typing import List, Dict, Optional
from datetime import date, timedelta
import statistics
import logging

logger = logging.getLogger(__name__)


class SleepAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–Ω–∞"""

    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–æ—Ä–º—ã
    RECOMMENDED_SLEEP_MIN = 7.0
    RECOMMENDED_SLEEP_MAX = 9.0
    OPTIMAL_SLEEP = 8.0

    def __init__(self, metrics: List[Dict]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞

        Args:
            metrics: –°–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è
        """
        self.metrics = metrics
        self.sleep_data = self._extract_sleep_data()

    def _extract_sleep_data(self) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–Ω–µ –∏–∑ –º–µ—Ç—Ä–∏–∫"""
        sleep_data = []
        for metric in self.metrics:
            if metric.get('sleep_duration'):
                sleep_data.append({
                    'date': metric['date'],
                    'duration': metric['sleep_duration'],
                    'quality': metric.get('sleep_quality'),
                    'pulse': metric.get('morning_pulse'),
                    'stress': metric.get('stress_level'),
                    'energy': metric.get('energy_level')
                })
        return sleep_data

    def get_full_analysis(self) -> Dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–Ω–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        if not self.sleep_data:
            return {
                'status': 'no_data',
                'message': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
            }

        analysis = {
            'status': 'ok',
            'period_days': len(self.sleep_data),
            'overall_score': self._calculate_overall_score(),
            'duration_analysis': self._analyze_duration(),
            'quality_analysis': self._analyze_quality(),
            'consistency_analysis': self._analyze_consistency(),
            'recovery_analysis': self._analyze_recovery(),
            'trends': self._analyze_trends(),
            'recommendations': self._generate_recommendations()
        }

        return analysis

    def _calculate_overall_score(self) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞ (0-100)"""
        scores = []

        # –ë–∞–ª–ª –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        duration_score = self._score_duration()
        scores.append(duration_score)

        # –ë–∞–ª–ª –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ
        quality_score = self._score_quality()
        if quality_score is not None:
            scores.append(quality_score)

        # –ë–∞–ª–ª –∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
        consistency_score = self._score_consistency()
        scores.append(consistency_score)

        overall = sum(scores) / len(scores) if scores else 0

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if overall >= 85:
            category = '–û—Ç–ª–∏—á–Ω—ã–π'
            emoji = 'üåü'
        elif overall >= 70:
            category = '–•–æ—Ä–æ—à–∏–π'
            emoji = '‚úÖ'
        elif overall >= 50:
            category = '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π'
            emoji = '‚ö†Ô∏è'
        else:
            category = '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'
            emoji = '‚ùå'

        return {
            'score': round(overall, 1),
            'category': category,
            'emoji': emoji
        }

    def _score_duration(self) -> float:
        """–ë–∞–ª–ª –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ (0-100)"""
        durations = [s['duration'] for s in self.sleep_data]
        avg_duration = statistics.mean(durations)

        if self.RECOMMENDED_SLEEP_MIN <= avg_duration <= self.RECOMMENDED_SLEEP_MAX:
            score = 100
        elif avg_duration < self.RECOMMENDED_SLEEP_MIN:
            # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Å–Ω–∞
            diff = self.RECOMMENDED_SLEEP_MIN - avg_duration
            score = max(0, 100 - (diff * 20))
        else:
            # –ò–∑–±—ã—Ç–æ–∫ —Å–Ω–∞
            diff = avg_duration - self.RECOMMENDED_SLEEP_MAX
            score = max(60, 100 - (diff * 10))

        return score

    def _score_quality(self) -> Optional[float]:
        """–ë–∞–ª–ª –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ (0-100)"""
        qualities = [s['quality'] for s in self.sleep_data if s.get('quality')]
        if not qualities:
            return None

        avg_quality = statistics.mean(qualities)
        # –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ 5, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ 0-100
        score = (avg_quality / 5) * 100
        return score

    def _score_consistency(self) -> float:
        """–ë–∞–ª–ª –∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ (0-100)"""
        durations = [s['duration'] for s in self.sleep_data]
        if len(durations) < 2:
            return 100

        std_dev = statistics.stdev(durations)
        # –ß–µ–º –º–µ–Ω—å—à–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ
        # 0.5 —á–∞—Å–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ = 100 –±–∞–ª–ª–æ–≤
        # 2 —á–∞—Å–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ = 0 –±–∞–ª–ª–æ–≤
        score = max(0, 100 - (std_dev * 50))
        return score

    def _analyze_duration(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–Ω–∞"""
        durations = [s['duration'] for s in self.sleep_data]

        avg = statistics.mean(durations)
        min_duration = min(durations)
        max_duration = max(durations)

        # –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–æ—á–µ–π —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º —Å–Ω–æ–º
        sufficient_nights = sum(
            1 for d in durations
            if self.RECOMMENDED_SLEEP_MIN <= d <= self.RECOMMENDED_SLEEP_MAX
        )
        sufficient_percentage = (sufficient_nights / len(durations)) * 100

        # –î–µ—Ñ–∏—Ü–∏—Ç/–∏–∑–±—ã—Ç–æ–∫ —Å–Ω–∞
        sleep_debt = (self.OPTIMAL_SLEEP - avg) * len(durations)

        status = '–í –Ω–æ—Ä–º–µ'
        if avg < self.RECOMMENDED_SLEEP_MIN:
            status = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'
        elif avg > self.RECOMMENDED_SLEEP_MAX:
            status = '–ò–∑–±—ã—Ç–æ—á–Ω–æ'

        return {
            'average': round(avg, 1),
            'min': round(min_duration, 1),
            'max': round(max_duration, 1),
            'status': status,
            'sufficient_nights_pct': round(sufficient_percentage, 1),
            'sleep_debt_hours': round(sleep_debt, 1)
        }

    def _analyze_quality(self) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞"""
        qualities = [s['quality'] for s in self.sleep_data if s.get('quality')]
        if not qualities:
            return None

        avg = statistics.mean(qualities)

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        distribution = {
            'poor': sum(1 for q in qualities if q <= 2),
            'fair': sum(1 for q in qualities if q == 3),
            'good': sum(1 for q in qualities if q >= 4)
        }

        # –¢—Ä–µ–Ω–¥ –∫–∞—á–µ—Å—Ç–≤–∞
        if len(qualities) >= 3:
            recent = statistics.mean(qualities[-3:])
            earlier = statistics.mean(qualities[:3])
            trend = '–£–ª—É—á—à–∞–µ—Ç—Å—è' if recent > earlier else '–£—Ö—É–¥—à–∞–µ—Ç—Å—è' if recent < earlier else '–°—Ç–∞–±–∏–ª—å–Ω–æ'
        else:
            trend = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'

        return {
            'average': round(avg, 1),
            'distribution': distribution,
            'trend': trend
        }

    def _analyze_consistency(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞"""
        durations = [s['duration'] for s in self.sleep_data]

        if len(durations) < 2:
            return {
                'status': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö',
                'std_dev': 0
            }

        std_dev = statistics.stdev(durations)

        if std_dev < 0.5:
            status = '–û—Ç–ª–∏—á–Ω–∞—è'
            emoji = 'üåü'
        elif std_dev < 1.0:
            status = '–•–æ—Ä–æ—à–∞—è'
            emoji = '‚úÖ'
        elif std_dev < 1.5:
            status = '–£–º–µ—Ä–µ–Ω–Ω–∞—è'
            emoji = '‚ö†Ô∏è'
        else:
            status = '–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è'
            emoji = '‚ùå'

        return {
            'status': status,
            'emoji': emoji,
            'std_dev': round(std_dev, 2)
        }

    def _analyze_recovery(self) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É–ª—å—Å–∞ –∏ —ç–Ω–µ—Ä–≥–∏–∏)"""
        recovery_data = []

        for sleep in self.sleep_data:
            if sleep.get('pulse') and sleep.get('energy'):
                recovery_data.append({
                    'duration': sleep['duration'],
                    'pulse': sleep['pulse'],
                    'energy': sleep['energy']
                })

        if not recovery_data:
            return None

        # –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å–Ω–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        good_recovery_nights = sum(
            1 for r in recovery_data
            if r['energy'] >= 4 and r['duration'] >= self.RECOMMENDED_SLEEP_MIN
        )

        recovery_score = (good_recovery_nights / len(recovery_data)) * 100

        return {
            'recovery_score': round(recovery_score, 1),
            'good_recovery_nights': good_recovery_nights,
            'total_nights': len(recovery_data)
        }

    def _analyze_trends(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤"""
        durations = [s['duration'] for s in self.sleep_data]

        if len(durations) < 4:
            return {'status': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'}

        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∏ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã –ø–µ—Ä–∏–æ–¥–∞
        mid = len(durations) // 2
        first_half_avg = statistics.mean(durations[:mid])
        second_half_avg = statistics.mean(durations[mid:])

        diff = second_half_avg - first_half_avg

        if abs(diff) < 0.3:
            trend = '–°—Ç–∞–±–∏–ª—å–Ω–æ'
            emoji = '‚û°Ô∏è'
        elif diff > 0:
            trend = '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è'
            emoji = 'üìà'
        else:
            trend = '–£–º–µ–Ω—å—à–∞–µ—Ç—Å—è'
            emoji = 'üìâ'

        return {
            'trend': trend,
            'emoji': emoji,
            'change_hours': round(diff, 1)
        }

    def _generate_recommendations(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        recommendations = []

        duration_analysis = self._analyze_duration()
        consistency = self._analyze_consistency()

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if duration_analysis['average'] < self.RECOMMENDED_SLEEP_MIN:
            deficit = self.RECOMMENDED_SLEEP_MIN - duration_analysis['average']
            recommendations.append(
                f"‚è∞ –£–≤–µ–ª–∏—á—å—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ –Ω–∞ {deficit:.1f} —á. "
                f"–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–ø–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ {self.RECOMMENDED_SLEEP_MIN} —á–∞—Å–æ–≤."
            )
        elif duration_analysis['average'] > self.RECOMMENDED_SLEEP_MAX:
            recommendations.append(
                "‚ö†Ô∏è –í—ã —Å–ø–∏—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ. –≠—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º –∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ–º —Å–Ω–∞."
            )

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        if consistency['std_dev'] > 1.0:
            recommendations.append(
                "üïê –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Å–Ω–∞. "
                "–õ–æ–∂–∏—Ç–µ—Å—å –∏ –ø—Ä–æ—Å—ã–ø–∞–π—Ç–µ—Å—å –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å."
            )

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        quality = self._analyze_quality()
        if quality and quality['average'] < 3.5:
            recommendations.append(
                "üí§ –£–ª—É—á—à–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å–Ω–∞: "
                "—Ç–µ–º–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞, –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —à—É–º–∞."
            )

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é
        recovery = self._analyze_recovery()
        if recovery and recovery['recovery_score'] < 60:
            recommendations.append(
                "üîã –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ñ–∞–∫—Ç–æ—Ä—ã —Å—Ç—Ä–µ—Å—Å–∞ –∏ –Ω–∞–≥—Ä—É–∑–∫–∏. "
                "–í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ."
            )

        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if duration_analysis['sufficient_nights_pct'] < 70:
            recommendations.append(
                "üìä –¢–æ–ª—å–∫–æ {:.0f}% –Ω–æ—á–µ–π –≤—ã —Å–ø–∏—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. "
                "–°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ 90%+.".format(duration_analysis['sufficient_nights_pct'])
            )

        if not recommendations:
            recommendations.append(
                "‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í–∞—à —Ä–µ–∂–∏–º —Å–Ω–∞ –≤ –Ω–æ—Ä–º–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
            )

        return recommendations


def format_sleep_analysis_message(analysis: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å–Ω–∞ –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    Args:
        analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç SleepAnalyzer

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    if analysis['status'] == 'no_data':
        return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–∞."

    msg_parts = []

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    msg_parts.append("üò¥ <b>–ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –°–ù–ê</b>")
    msg_parts.append(f"–ü–µ—Ä–∏–æ–¥: {analysis['period_days']} –¥–Ω–µ–π\n")

    # –û–±—â–∏–π –±–∞–ª–ª
    score = analysis['overall_score']
    msg_parts.append(
        f"{score['emoji']} <b>–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {score['score']}/100</b>\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {score['category']}\n"
    )

    # –ê–Ω–∞–ª–∏–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    duration = analysis['duration_analysis']
    msg_parts.append(
        f"‚è± <b>–î–õ–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –°–ù–ê</b>\n"
        f"–°—Ä–µ–¥–Ω–µ–µ: {duration['average']} —á ({duration['status']})\n"
        f"–î–∏–∞–ø–∞–∑–æ–Ω: {duration['min']} - {duration['max']} —á\n"
        f"–î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å–æ–Ω: {duration['sufficient_nights_pct']}% –Ω–æ—á–µ–π\n"
    )

    if duration['sleep_debt_hours'] > 0:
        msg_parts.append(f"‚ö†Ô∏è –î–µ—Ñ–∏—Ü–∏—Ç —Å–Ω–∞: {duration['sleep_debt_hours']} —á\n")
    elif duration['sleep_debt_hours'] < -5:
        msg_parts.append(f"‚ö†Ô∏è –ò–∑–±—ã—Ç–æ–∫ —Å–Ω–∞: {abs(duration['sleep_debt_hours'])} —á\n")

    # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
    quality = analysis.get('quality_analysis')
    if quality:
        msg_parts.append(
            f"üí´ <b>–ö–ê–ß–ï–°–¢–í–û –°–ù–ê</b>\n"
            f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {quality['average']}/5\n"
            f"–ü–ª–æ—Ö–∏–µ –Ω–æ—á–∏: {quality['distribution']['poor']}\n"
            f"–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ: {quality['distribution']['fair']}\n"
            f"–•–æ—Ä–æ—à–∏–µ: {quality['distribution']['good']}\n"
            f"–¢—Ä–µ–Ω–¥: {quality['trend']}\n"
        )

    # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
    consistency = analysis['consistency_analysis']
    msg_parts.append(
        f"üìä <b>–°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨ –†–ï–ñ–ò–ú–ê</b>\n"
        f"{consistency['emoji']} {consistency['status']}\n"
        f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ¬±{consistency['std_dev']} —á\n"
    )

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    recovery = analysis.get('recovery_analysis')
    if recovery:
        msg_parts.append(
            f"üîã <b>–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï</b>\n"
            f"–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {recovery['recovery_score']:.0f}%\n"
            f"({recovery['good_recovery_nights']}/{recovery['total_nights']} –Ω–æ—á–µ–π)\n"
        )

    # –¢—Ä–µ–Ω–¥—ã
    trends = analysis['trends']
    if trends.get('trend'):
        msg_parts.append(
            f"üìà <b>–¢–†–ï–ù–î</b>\n"
            f"{trends['emoji']} {trends['trend']}"
        )
        if trends.get('change_hours'):
            msg_parts.append(f" ({trends['change_hours']:+.1f} —á)")
        msg_parts.append("\n")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = analysis['recommendations']
    if recommendations:
        msg_parts.append("\n<b>üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:</b>")
        if len(recommendations) == 1:
            # –ï—Å–ª–∏ –æ–¥–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è - –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏
            msg_parts.append(f"\n{recommendations[0]}")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π - —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
            for i, rec in enumerate(recommendations, 1):
                msg_parts.append(f"\n{i}. {rec}")

    return "\n".join(msg_parts)
