"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥—É–ª—è –∑–¥–æ—Ä–æ–≤—å—è
"""

from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, BufferedInputFile
from aiogram.fsm.context import FSMContext
from datetime import date, timedelta
import re
import logging

from health.health_fsm import HealthMetricsStates
from health.health_keyboards import (
    get_health_menu_keyboard,
    get_quick_input_keyboard,
    get_sleep_quality_keyboard,
    get_stats_period_keyboard,
    get_graphs_period_keyboard,
    get_cancel_keyboard,
    get_skip_cancel_keyboard,
    get_date_choice_keyboard
)
from health.health_queries import (
    save_health_metrics,
    get_health_metrics_by_date,
    get_latest_health_metrics,
    get_health_statistics,
    check_today_metrics_filled,
    get_current_week_metrics,
    get_current_month_metrics
)
from health.health_graphs import generate_health_graphs, generate_sleep_quality_graph
from health.sleep_analysis import SleepAnalyzer, format_sleep_analysis_message

router = Router()
logger = logging.getLogger(__name__)


# ============== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ==============

async def return_to_health_menu(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–¥–æ—Ä–æ–≤—å—è"""
    user_id = message.from_user.id
    filled = await check_today_metrics_filled(user_id)

    status_text = "üìã <b>–°—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
    status_text += f"{'‚úÖ' if filled['morning_pulse'] else '‚ùå'} –£—Ç—Ä–µ–Ω–Ω–∏–π –ø—É–ª—å—Å\n"
    status_text += f"{'‚úÖ' if filled['weight'] else '‚ùå'} –í–µ—Å\n"
    status_text += f"{'‚úÖ' if filled['sleep_duration'] else '‚ùå'} –°–æ–Ω\n"

    await message.answer(
        f"‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ—Ç—Ä–∏–∫–∏</b>\n\n"
        f"{status_text}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_health_menu_keyboard(),
        parse_mode="HTML"
    )


# ============== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–¥–æ—Ä–æ–≤—å—è ==============

@router.message(F.text == "‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ")
async def health_menu(message: Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    await state.clear()
    user_id = message.from_user.id

    logger.info(f"health_menu called for user_id = {user_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è
    filled = await check_today_metrics_filled(user_id)

    status_text = "üìã <b>–°—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
    status_text += f"{'‚úÖ' if filled['morning_pulse'] else '‚ùå'} –£—Ç—Ä–µ–Ω–Ω–∏–π –ø—É–ª—å—Å\n"
    status_text += f"{'‚úÖ' if filled['weight'] else '‚ùå'} –í–µ—Å\n"
    status_text += f"{'‚úÖ' if filled['sleep_duration'] else '‚ùå'} –°–æ–Ω\n"

    await message.answer(
        f"‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ—Ç—Ä–∏–∫–∏</b>\n\n"
        f"{status_text}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_health_menu_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "health:menu")
async def health_menu_callback(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∑–¥–æ—Ä–æ–≤—å—è"""
    # –ù–ï –æ—á–∏—â–∞–µ–º state - –ø—É—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ç—Ä–∏–∫–∏
    # await state.clear()

    # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await state.set_state(None)

    user_id = callback.from_user.id

    filled = await check_today_metrics_filled(user_id)

    status_text = "üìã <b>–°—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
    status_text += f"{'‚úÖ' if filled['morning_pulse'] else '‚ùå'} –£—Ç—Ä–µ–Ω–Ω–∏–π –ø—É–ª—å—Å\n"
    status_text += f"{'‚úÖ' if filled['weight'] else '‚ùå'} –í–µ—Å\n"
    status_text += f"{'‚úÖ' if filled['sleep_duration'] else '‚ùå'} –°–æ–Ω\n"

    await callback.message.edit_text(
        f"‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ—Ç—Ä–∏–∫–∏</b>\n\n"
        f"{status_text}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_health_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


# ============== –í–≤–æ–¥ –º–µ—Ç—Ä–∏–∫ ==============

@router.callback_query(F.data == "health:add_metrics")
async def choose_input_type(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –≤–≤–æ–¥–∞ –º–µ—Ç—Ä–∏–∫"""
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    from datetime import date
    today = date.today()
    today_metrics = await get_health_metrics_by_date(user_id, today)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if today_metrics and (today_metrics.get('morning_pulse') or today_metrics.get('weight') or today_metrics.get('sleep_duration')):
        message_text = "üìù <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>"
    else:
        message_text = "üìù <b>–í–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</b>"

    await callback.message.edit_text(
        message_text,
        reply_markup=get_quick_input_keyboard(today_metrics),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "health:input_all")
async def start_full_input(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫"""
    await callback.message.answer(
        "üíó –í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—É–ª—å—Å</b> (—É–¥/–º–∏–Ω):\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 60",
        reply_markup=get_skip_cancel_keyboard(),
        parse_mode="HTML"
    )
    await callback.message.delete()
    await state.set_state(HealthMetricsStates.waiting_for_pulse)
    await callback.answer()


@router.callback_query(F.data == "health:input_pulse")
async def start_pulse_input(callback: CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ —Ç–æ–ª—å–∫–æ –ø—É–ª—å—Å–∞"""
    # –ù–ï –æ—á–∏—â–∞–µ–º state - —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏!
    await callback.message.answer(
        "üíó –í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—É–ª—å—Å</b> (—É–¥/–º–∏–Ω):\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 60",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await callback.message.delete()
    await state.set_state(HealthMetricsStates.waiting_for_pulse)
    await state.update_data(quick_input='pulse')
    await callback.answer()


@router.callback_query(F.data == "health:input_weight")
async def start_weight_input(callback: CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ —Ç–æ–ª—å–∫–æ –≤–µ—Å–∞"""
    # –ù–ï –æ—á–∏—â–∞–µ–º state - —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏!
    await callback.message.answer(
        "‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–≤–µ—Å</b> (–∫–≥):\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 75.5",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(HealthMetricsStates.waiting_for_weight)
    await state.update_data(quick_input='weight')
    await callback.answer()


@router.callback_query(F.data == "health:input_sleep")
async def start_sleep_input(callback: CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ —Ç–æ–ª—å–∫–æ —Å–Ω–∞"""
    # –ù–ï –æ—á–∏—â–∞–µ–º state - —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏!
    await callback.message.answer(
        "üò¥ –í–≤–µ–¥–∏—Ç–µ <b>–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞</b> (—á–∞—Å—ã):\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 7.5 –∏–ª–∏ 8",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(HealthMetricsStates.waiting_for_sleep_duration)
    await state.update_data(quick_input='sleep')
    await callback.answer()


@router.callback_query(F.data == "health:choose_date")
async def choose_date_for_metrics(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    await callback.message.answer(
        "üìÖ <b>–ó–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ?</b>",
        reply_markup=get_date_choice_keyboard(),
        parse_mode="HTML"
    )
    await callback.message.delete()
    await state.set_state(HealthMetricsStates.waiting_for_date_choice)
    await callback.answer()


@router.message(HealthMetricsStates.waiting_for_date_choice)
async def process_date_choice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.set_state(None)
        await message.answer(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardRemove()
        )
        await return_to_health_menu(message)
        return

    today = date.today()

    if message.text == "üìÖ –°–µ–≥–æ–¥–Ω—è":
        selected_date = today
    elif message.text == "üìÖ –í—á–µ—Ä–∞":
        selected_date = today - timedelta(days=1)
    elif message.text == "üìÖ –ü–æ–∑–∞–≤—á–µ—Ä–∞":
        selected_date = today - timedelta(days=2)
    elif message.text == "üìù –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É":
        await message.answer(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 20.10.2025",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML"
        )
        await state.set_state(HealthMetricsStates.waiting_for_custom_date)
        return
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏."
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤–≤–æ–¥–∞
    await state.update_data(selected_date=selected_date)

    user_id = message.from_user.id
    metrics = await get_health_metrics_by_date(user_id, selected_date)

    date_str = selected_date.strftime("%d.%m.%Y")

    if metrics and (metrics.get('morning_pulse') or metrics.get('weight') or metrics.get('sleep_duration')):
        message_text = f"üìù <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ {date_str}</b>"
    else:
        message_text = f"üìù <b>–í–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date_str}</b>"

    await message.answer(
        message_text,
        reply_markup=get_quick_input_keyboard(metrics),
        parse_mode="HTML"
    )
    await state.set_state(None)


@router.message(HealthMetricsStates.waiting_for_custom_date)
async def process_custom_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –¥–∞—Ç—ã"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.set_state(None)
        await message.answer(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardRemove()
        )
        await return_to_health_menu(message)
        return

    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
    match = re.match(r'(\d{1,2})\.(\d{1,2})\.(\d{4})', message.text)
    if not match:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 20.10.2025"
        )
        return

    day, month, year = int(match.group(1)), int(match.group(2)), int(match.group(3))

    try:
        selected_date = date(year, month, day)
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
    if selected_date > date.today():
        await message.answer(
            "‚ùå –ù–µ–ª—å–∑—è –≤–Ω–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –±—É–¥—É—â—É—é –¥–∞—Ç—É."
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤–≤–æ–¥–∞
    await state.update_data(selected_date=selected_date)

    user_id = message.from_user.id
    metrics = await get_health_metrics_by_date(user_id, selected_date)

    date_str = selected_date.strftime("%d.%m.%Y")

    if metrics and (metrics.get('morning_pulse') or metrics.get('weight') or metrics.get('sleep_duration')):
        message_text = f"üìù <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ {date_str}</b>"
    else:
        message_text = f"üìù <b>–í–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date_str}</b>"

    await message.answer(
        message_text,
        reply_markup=get_quick_input_keyboard(metrics),
        parse_mode="HTML"
    )
    await state.set_state(None)


# ============== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–µ—Ç—Ä–∏–∫ ==============

@router.message(HealthMetricsStates.waiting_for_pulse)
async def process_pulse(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—É–ª—å—Å–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=ReplyKeyboardRemove()
        )
        await return_to_health_menu(message)
        return

    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(pulse=None)
        await ask_weight(message, state)
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    try:
        pulse = int(message.text)
        if not (30 <= pulse <= 200):
            await message.answer("‚ùå –ü—É–ª—å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 30-200 —É–¥/–º–∏–Ω")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return

    await state.update_data(pulse=pulse)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞
    data = await state.get_data()
    if data.get('quick_input') == 'pulse':
        # –ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø—É–ª—å—Å
        await save_and_finish(message, state, morning_pulse=pulse)
    else:
        # –ü–æ–ª–Ω—ã–π –≤–≤–æ–¥ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–µ—Å—É
        await ask_weight(message, state)


async def ask_weight(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –≤–µ—Å–∞"""
    await message.answer(
        "‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–≤–µ—Å</b> (–∫–≥):\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 75.5",
        reply_markup=get_skip_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(HealthMetricsStates.waiting_for_weight)


@router.message(HealthMetricsStates.waiting_for_weight)
async def process_weight(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–µ—Å–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=ReplyKeyboardRemove()
        )
        await return_to_health_menu(message)
        return

    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(weight=None)
        data = await state.get_data()
        if data.get('quick_input'):
            await save_and_finish(message, state)
        else:
            await ask_sleep_duration(message, state)
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    try:
        weight = float(message.text.replace(',', '.'))
        if not (30 <= weight <= 300):
            await message.answer("‚ùå –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 30-300 –∫–≥")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return

    await state.update_data(weight=weight)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞
    data = await state.get_data()
    if data.get('quick_input') == 'weight':
        await save_and_finish(message, state, weight=weight)
    else:
        await ask_sleep_duration(message, state)


async def ask_sleep_duration(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–Ω–∞"""
    await message.answer(
        "üò¥ –í–≤–µ–¥–∏—Ç–µ <b>–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞</b>:\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ 7:30 (7 —á–∞—Å–æ–≤ 30 –º–∏–Ω—É—Ç)\n"
        "‚Ä¢ 8:00 (8 —á–∞—Å–æ–≤)\n"
        "‚Ä¢ 7.5 (7.5 —á–∞—Å–æ–≤)\n"
        "‚Ä¢ 8 (8 —á–∞—Å–æ–≤)",
        reply_markup=get_skip_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(HealthMetricsStates.waiting_for_sleep_duration)


@router.message(HealthMetricsStates.waiting_for_sleep_duration)
async def process_sleep_duration(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–Ω–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=ReplyKeyboardRemove()
        )
        await return_to_health_menu(message)
        return

    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(sleep_duration=None)
        data = await state.get_data()
        if data.get('quick_input'):
            await save_and_finish(message, state)
        else:
            await ask_sleep_quality(message, state)
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥
    try:
        text = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú
        if ':' in text:
            parts = text.split(':')
            if len(parts) != 2:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7:30)")
                return

            hours = int(parts[0])
            minutes = int(parts[1])

            if not (0 <= hours <= 20):
                await message.answer("‚ùå –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-20")
                return

            if not (0 <= minutes < 60):
                await message.answer("‚ùå –ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-59")
                return

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤
            sleep_duration = hours + (minutes / 60.0)
        else:
            # –û–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
            sleep_duration = float(text.replace(',', '.'))

        if not (1 <= sleep_duration <= 20):
            await message.answer("‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1-20 —á–∞—Å–æ–≤")
            return

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä—ã: 7:30 –∏–ª–∏ 7.5 –∏–ª–∏ 8")
        return

    await state.update_data(sleep_duration=sleep_duration)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞
    data = await state.get_data()
    if data.get('quick_input') == 'sleep':
        # –ü–æ—Å–ª–µ —Å–Ω–∞ –≤ –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        await ask_sleep_quality(message, state)
    else:
        await ask_sleep_quality(message, state)


async def ask_sleep_quality(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞"""
    await message.answer(
        "üò¥ –û—Ü–µ–Ω–∏—Ç–µ <b>–∫–∞—á–µ—Å—Ç–≤–æ –≤–∞—à–µ–≥–æ —Å–Ω–∞</b>:\n\n"
        "1 - –û—á–µ–Ω—å –ø–ª–æ—Ö–æ\n"
        "5 - –û—Ç–ª–∏—á–Ω–æ",
        reply_markup=get_sleep_quality_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(HealthMetricsStates.waiting_for_sleep_quality)


@router.callback_query(F.data.startswith("sleep_quality:"))
async def process_sleep_quality(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞"""
    quality_str = callback.data.split(":")[1]

    if quality_str == "skip":
        await state.update_data(sleep_quality=None)
    else:
        quality = int(quality_str)
        await state.update_data(sleep_quality=quality)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await save_and_finish(callback.message, state)
    await callback.answer()


async def save_and_finish(message: Message, state: FSMContext, **extra_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"""
    data = await state.get_data()
    data.update(extra_data)

    user_id = message.from_user.id if hasattr(message, 'from_user') else message.chat.id

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–∑ state, –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    metric_date = data.get('selected_date', date.today())

    # –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –≤ state
    logger.info(f"save_and_finish: data from state = {data}")
    logger.info(f"save_and_finish: extra_data = {extra_data}")
    logger.info(f"save_and_finish: metric_date = {metric_date}")

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    save_params = {
        'user_id': user_id,
        'metric_date': metric_date
    }

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã (–Ω–µ None)
    if 'pulse' in data and data['pulse'] is not None:
        save_params['morning_pulse'] = data['pulse']
    if 'weight' in data and data['weight'] is not None:
        save_params['weight'] = data['weight']
    if 'sleep_duration' in data and data['sleep_duration'] is not None:
        save_params['sleep_duration'] = data['sleep_duration']
    if 'sleep_quality' in data and data['sleep_quality'] is not None:
        save_params['sleep_quality'] = data['sleep_quality']

    # –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –≤ –ë–î
    logger.info(f"save_and_finish: save_params = {save_params}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    success = await save_health_metrics(**save_params)

    if success:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        saved_items = []
        if data.get('pulse'):
            saved_items.append(f"üíó –ü—É–ª—å—Å: {data['pulse']} —É–¥/–º–∏–Ω")
        if data.get('weight'):
            saved_items.append(f"‚öñÔ∏è –í–µ—Å: {data['weight']} –∫–≥")
        if data.get('sleep_duration'):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞
            duration = data['sleep_duration']
            hours = int(duration)
            minutes = int((duration - hours) * 60)
            if minutes > 0:
                saved_items.append(f"üò¥ –°–æ–Ω: {hours} —á {minutes} –º–∏–Ω")
            else:
                saved_items.append(f"üò¥ –°–æ–Ω: {hours} —á")
        if data.get('sleep_quality'):
            saved_items.append(f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {data['sleep_quality']}/5")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        filled = await check_today_metrics_filled(user_id)
        status_text = "\n\nüìã <b>–°—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
        status_text += f"{'‚úÖ' if filled['morning_pulse'] else '‚ùå'} –£—Ç—Ä–µ–Ω–Ω–∏–π –ø—É–ª—å—Å\n"
        status_text += f"{'‚úÖ' if filled['weight'] else '‚ùå'} –í–µ—Å\n"
        status_text += f"{'‚úÖ' if filled['sleep_duration'] else '‚ùå'} –°–æ–Ω"

        await message.answer(
            "‚úÖ <b>–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n\n" +
            "\n".join(saved_items) + status_text,
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="HTML"
        )

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        updated_metrics = await get_health_metrics_by_date(user_id, metric_date)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        date_str = metric_date.strftime("%d.%m.%Y")
        is_today = metric_date == date.today()

        if updated_metrics and (updated_metrics.get('morning_pulse') or updated_metrics.get('weight') or updated_metrics.get('sleep_duration')):
            if is_today:
                message_text = "üìù <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>"
            else:
                message_text = f"üìù <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ {date_str}</b>"
        else:
            if is_today:
                message_text = "üìù <b>–í–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</b>"
            else:
                message_text = f"üìù <b>–í–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date_str}</b>"

        await message.answer(
            message_text,
            reply_markup=get_quick_input_keyboard(updated_metrics),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove()
        )

    # –ù–ï –æ—á–∏—â–∞–µ–º state - —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    # State –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–π–¥–µ—Ç –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –∑–¥–æ—Ä–æ–≤—å—è
    # await state.clear()


# ============== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –≥—Ä–∞—Ñ–∏–∫–∏ ==============

@router.callback_query(F.data == "health:stats_and_graphs")
async def show_stats_graphs_periods(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    await callback.message.edit_text(
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –≥—Ä–∞—Ñ–∏–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=get_stats_period_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("health_stats_graphs:"))
async def show_stats_and_graphs(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    period_param = callback.data.split(":")[1]
    user_id = callback.from_user.id

    await callback.answer("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...", show_alert=True)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
    if period_param == "week":
        metrics = await get_current_week_metrics(user_id)
        period_name = "—ç—Ç—É –Ω–µ–¥–µ–ª—é"
    elif period_param == "month":
        metrics = await get_current_month_metrics(user_id)
        period_name = "—ç—Ç–æ—Ç –º–µ—Å—è—Ü"
    else:
        # –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π - –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
        days = int(period_param)
        metrics = await get_latest_health_metrics(user_id, days)
        period_name = f"{days} –¥–Ω–µ–π"

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    if not metrics:
        stats = {}
    else:
        pulse_values = [m['morning_pulse'] for m in metrics if m.get('morning_pulse')]
        weight_values = [m['weight'] for m in metrics if m.get('weight')]
        sleep_values = [m['sleep_duration'] for m in metrics if m.get('sleep_duration')]

        from health.health_queries import _calculate_trend

        stats = {
            'total_days': len(metrics),
            'pulse': {
                'avg': sum(pulse_values) / len(pulse_values) if pulse_values else None,
                'min': min(pulse_values) if pulse_values else None,
                'max': max(pulse_values) if pulse_values else None,
                'trend': _calculate_trend(pulse_values) if len(pulse_values) > 1 else None
            },
            'weight': {
                'current': weight_values[-1] if weight_values else None,
                'start': weight_values[0] if weight_values else None,
                'change': (weight_values[-1] - weight_values[0]) if len(weight_values) > 1 else None,
                'trend': _calculate_trend(weight_values) if len(weight_values) > 1 else None
            },
            'sleep': {
                'avg': sum(sleep_values) / len(sleep_values) if sleep_values else None,
                'min': min(sleep_values) if sleep_values else None,
                'max': max(sleep_values) if sleep_values else None
            }
        }

    if not stats and not metrics:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–¥–æ—Ä–æ–≤—å—è
        filled = await check_today_metrics_filled(user_id)
        status_text = "üìã <b>–°—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
        status_text += f"{'‚úÖ' if filled['morning_pulse'] else '‚ùå'} –£—Ç—Ä–µ–Ω–Ω–∏–π –ø—É–ª—å—Å\n"
        status_text += f"{'‚úÖ' if filled['weight'] else '‚ùå'} –í–µ—Å\n"
        status_text += f"{'‚úÖ' if filled['sleep_duration'] else '‚ùå'} –°–æ–Ω\n"

        await callback.message.edit_text(
            f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {period_name}\n\n"
            f"‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ—Ç—Ä–∏–∫–∏</b>\n\n"
            f"{status_text}\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_health_menu_keyboard(),
            parse_mode="HTML"
        )
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    msg = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_name}</b>\n\n"

    # –ü—É–ª—å—Å
    if stats and stats['pulse']['avg']:
        msg += f"üíó <b>–£—Ç—Ä–µ–Ω–Ω–∏–π –ø—É–ª—å—Å:</b>\n"
        msg += f"   –°—Ä–µ–¥–Ω–µ–µ: {stats['pulse']['avg']:.1f} —É–¥/–º–∏–Ω\n"
        msg += f"   –î–∏–∞–ø–∞–∑–æ–Ω: {stats['pulse']['min']} - {stats['pulse']['max']}\n"
        trend = stats['pulse']['trend']
        trend_emoji = "üìà" if trend == "increasing" else "üìâ" if trend == "decreasing" else "‚û°Ô∏è"
        msg += f"   –¢—Ä–µ–Ω–¥: {trend_emoji}\n\n"

    # –í–µ—Å
    if stats and stats['weight']['current']:
        msg += f"‚öñÔ∏è <b>–í–µ—Å:</b>\n"
        msg += f"   –¢–µ–∫—É—â–∏–π: {stats['weight']['current']:.1f} –∫–≥\n"
        if stats['weight']['change']:
            change = stats['weight']['change']
            change_emoji = "üìà" if change > 0 else "üìâ"
            msg += f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_emoji} {change:+.1f} –∫–≥\n"
        trend = stats['weight']['trend']
        trend_emoji = "üìà" if trend == "increasing" else "üìâ" if trend == "decreasing" else "‚û°Ô∏è"
        msg += f"   –¢—Ä–µ–Ω–¥: {trend_emoji}\n\n"

    # –°–æ–Ω
    if stats and stats['sleep']['avg']:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ä–µ–¥–Ω—é—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        avg_hours = int(stats['sleep']['avg'])
        avg_minutes = int((stats['sleep']['avg'] - avg_hours) * 60)
        avg_text = f"{avg_hours} —á {avg_minutes} –º–∏–Ω" if avg_minutes > 0 else f"{avg_hours} —á"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º—É–º
        min_hours = int(stats['sleep']['min'])
        min_minutes = int((stats['sleep']['min'] - min_hours) * 60)
        min_text = f"{min_hours}:{min_minutes:02d}" if min_minutes > 0 else f"{min_hours}:00"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º—É–º
        max_hours = int(stats['sleep']['max'])
        max_minutes = int((stats['sleep']['max'] - max_hours) * 60)
        max_text = f"{max_hours}:{max_minutes:02d}" if max_minutes > 0 else f"{max_hours}:00"

        msg += f"üò¥ <b>–°–æ–Ω:</b>\n"
        msg += f"   –°—Ä–µ–¥–Ω–µ–µ: {avg_text}\n"
        msg += f"   –î–∏–∞–ø–∞–∑–æ–Ω: {min_text} - {max_text}\n"

        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞
        avg_sleep = stats['sleep']['avg']
        if 7 <= avg_sleep <= 9:
            msg += f"   –û—Ü–µ–Ω–∫–∞: ‚úÖ –í –Ω–æ—Ä–º–µ\n"
        elif avg_sleep < 7:
            msg += f"   –û—Ü–µ–Ω–∫–∞: ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ\n"
        else:
            msg += f"   –û—Ü–µ–Ω–∫–∞: ‚ö†Ô∏è –ò–∑–±—ã—Ç–æ—á–Ω–æ\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await callback.message.answer(msg, parse_mode="HTML")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    if metrics:
        try:
            # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–µ—Ä–µ–¥–∞—ë–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º len(metrics) –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
            days_for_graph = len(metrics) if len(metrics) > 0 else 7
            graph_buffer = await generate_health_graphs(metrics, days_for_graph)
            photo = BufferedInputFile(graph_buffer.read(), filename=f"health_stats.png")
            await callback.message.answer_photo(
                photo=photo,
                caption=f"üìà –ì—Ä–∞—Ñ–∏–∫–∏ –º–µ—Ç—Ä–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞ {period_name}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–¥–æ—Ä–æ–≤—å—è
    filled = await check_today_metrics_filled(user_id)
    status_text = "üìã <b>–°—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
    status_text += f"{'‚úÖ' if filled['morning_pulse'] else '‚ùå'} –£—Ç—Ä–µ–Ω–Ω–∏–π –ø—É–ª—å—Å\n"
    status_text += f"{'‚úÖ' if filled['weight'] else '‚ùå'} –í–µ—Å\n"
    status_text += f"{'‚úÖ' if filled['sleep_duration'] else '‚ùå'} –°–æ–Ω\n"

    await callback.message.answer(
        f"‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ—Ç—Ä–∏–∫–∏</b>\n\n"
        f"{status_text}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_health_menu_keyboard(),
        parse_mode="HTML"
    )


# –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
@router.callback_query(F.data == "health:statistics")
async def show_statistics_periods(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)"""
    await show_stats_graphs_periods(callback)


@router.callback_query(F.data == "health:graphs")
async def show_graphs_periods(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)"""
    await show_stats_graphs_periods(callback)


# ============== –ê–Ω–∞–ª–∏–∑ —Å–Ω–∞ ==============

@router.callback_query(F.data == "health:sleep_analysis")
async def show_sleep_analysis(callback: CallbackQuery):
    """–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–Ω–∞"""
    user_id = callback.from_user.id

    await callback.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...", show_alert=True)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 30 –¥–Ω–µ–π
    metrics = await get_latest_health_metrics(user_id, 30)

    if not metrics or len(metrics) < 3:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–¥–æ—Ä–æ–≤—å—è
        filled = await check_today_metrics_filled(user_id)
        status_text = "üìã <b>–°—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
        status_text += f"{'‚úÖ' if filled['morning_pulse'] else '‚ùå'} –£—Ç—Ä–µ–Ω–Ω–∏–π –ø—É–ª—å—Å\n"
        status_text += f"{'‚úÖ' if filled['weight'] else '‚ùå'} –í–µ—Å\n"
        status_text += f"{'‚úÖ' if filled['sleep_duration'] else '‚ùå'} –°–æ–Ω\n"

        await callback.message.answer(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
            "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 –¥–Ω—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–Ω–µ.\n\n"
            f"‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ—Ç—Ä–∏–∫–∏</b>\n\n"
            f"{status_text}\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_health_menu_keyboard(),
            parse_mode="HTML"
        )
        return

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        analyzer = SleepAnalyzer(metrics)
        analysis = analyzer.get_full_analysis()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = format_sleep_analysis_message(analysis)

        await callback.message.answer(
            message_text,
            parse_mode="HTML"
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å–Ω–∞
        graph_buffer = await generate_sleep_quality_graph(metrics, 30)
        photo = BufferedInputFile(graph_buffer.read(), filename="sleep_analysis.png")
        await callback.message.answer_photo(
            photo=photo,
            caption="üìä –ì—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–∞"
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–¥–æ—Ä–æ–≤—å—è
        filled = await check_today_metrics_filled(user_id)
        status_text = "üìã <b>–°—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
        status_text += f"{'‚úÖ' if filled['morning_pulse'] else '‚ùå'} –£—Ç—Ä–µ–Ω–Ω–∏–π –ø—É–ª—å—Å\n"
        status_text += f"{'‚úÖ' if filled['weight'] else '‚ùå'} –í–µ—Å\n"
        status_text += f"{'‚úÖ' if filled['sleep_duration'] else '‚ùå'} –°–æ–Ω\n"

        await callback.message.answer(
            f"‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ—Ç—Ä–∏–∫–∏</b>\n\n"
            f"{status_text}\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_health_menu_keyboard(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–Ω–∞: {e}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–¥–æ—Ä–æ–≤—å—è –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        filled = await check_today_metrics_filled(user_id)
        status_text = "üìã <b>–°—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
        status_text += f"{'‚úÖ' if filled['morning_pulse'] else '‚ùå'} –£—Ç—Ä–µ–Ω–Ω–∏–π –ø—É–ª—å—Å\n"
        status_text += f"{'‚úÖ' if filled['weight'] else '‚ùå'} –í–µ—Å\n"
        status_text += f"{'‚úÖ' if filled['sleep_duration'] else '‚ùå'} –°–æ–Ω\n"

        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö\n\n"
            f"‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ—Ç—Ä–∏–∫–∏</b>\n\n"
            f"{status_text}\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_health_menu_keyboard(),
            parse_mode="HTML"
        )


# ============== –û—Ç–º–µ–Ω–∞ ==============

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", StateFilter("*"))
async def cancel_handler(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    await return_to_health_menu(message)
