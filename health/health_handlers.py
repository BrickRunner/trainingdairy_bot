"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥—É–ª—è –∑–¥–æ—Ä–æ–≤—å—è
"""

from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, BufferedInputFile
from aiogram.fsm.context import FSMContext
from datetime import date
import re
import logging

from health.health_fsm import HealthMetricsStates
from health.health_keyboards import (
    get_health_menu_keyboard,
    get_quick_input_keyboard,
    get_sleep_quality_keyboard,
    get_stats_period_keyboard,
    get_graphs_period_keyboard,
    get_cancel_keyboard,
    get_skip_cancel_keyboard
)
from health.health_queries import (
    save_health_metrics,
    get_health_metrics_by_date,
    get_latest_health_metrics,
    get_health_statistics,
    check_today_metrics_filled
)
from health.health_graphs import generate_health_graphs, generate_sleep_quality_graph
from health.sleep_analysis import SleepAnalyzer, format_sleep_analysis_message

router = Router()
logger = logging.getLogger(__name__)


# ============== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–¥–æ—Ä–æ–≤—å—è ==============

@router.message(F.text == "‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ")
async def health_menu(message: Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    await state.clear()
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è
    filled = await check_today_metrics_filled(user_id)

    status_text = "üìã <b>–°—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
    status_text += f"{'‚úÖ' if filled['morning_pulse'] else '‚ùå'} –£—Ç—Ä–µ–Ω–Ω–∏–π –ø—É–ª—å—Å\n"
    status_text += f"{'‚úÖ' if filled['weight'] else '‚ùå'} –í–µ—Å\n"
    status_text += f"{'‚úÖ' if filled['sleep_duration'] else '‚ùå'} –°–æ–Ω\n"

    await message.answer(
        f"‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ—Ç—Ä–∏–∫–∏</b>\n\n"
        f"{status_text}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_health_menu_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "health:menu")
async def health_menu_callback(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∑–¥–æ—Ä–æ–≤—å—è"""
    await state.clear()
    user_id = callback.from_user.id

    filled = await check_today_metrics_filled(user_id)

    status_text = "üìã <b>–°—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
    status_text += f"{'‚úÖ' if filled['morning_pulse'] else '‚ùå'} –£—Ç—Ä–µ–Ω–Ω–∏–π –ø—É–ª—å—Å\n"
    status_text += f"{'‚úÖ' if filled['weight'] else '‚ùå'} –í–µ—Å\n"
    status_text += f"{'‚úÖ' if filled['sleep_duration'] else '‚ùå'} –°–æ–Ω\n"

    await callback.message.edit_text(
        f"‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ—Ç—Ä–∏–∫–∏</b>\n\n"
        f"{status_text}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_health_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


# ============== –í–≤–æ–¥ –º–µ—Ç—Ä–∏–∫ ==============

@router.callback_query(F.data == "health:add_metrics")
async def choose_input_type(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –≤–≤–æ–¥–∞ –º–µ—Ç—Ä–∏–∫"""
    await callback.message.edit_text(
        "üìù <b>–í–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏:",
        reply_markup=get_quick_input_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "health:input_all")
async def start_full_input(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫"""
    await callback.message.answer(
        "üíó –í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—É–ª—å—Å</b> (—É–¥/–º–∏–Ω):\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 60",
        reply_markup=get_skip_cancel_keyboard(),
        parse_mode="HTML"
    )
    await callback.message.delete()
    await state.set_state(HealthMetricsStates.waiting_for_pulse)
    await callback.answer()


@router.callback_query(F.data == "health:input_pulse")
async def start_pulse_input(callback: CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ —Ç–æ–ª—å–∫–æ –ø—É–ª—å—Å–∞"""
    await callback.message.answer(
        "üíó –í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—É–ª—å—Å</b> (—É–¥/–º–∏–Ω):\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 60",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await callback.message.delete()
    await state.set_state(HealthMetricsStates.waiting_for_pulse)
    await state.update_data(quick_input='pulse')
    await callback.answer()


@router.callback_query(F.data == "health:input_weight")
async def start_weight_input(callback: CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ —Ç–æ–ª—å–∫–æ –≤–µ—Å–∞"""
    await callback.message.answer(
        "‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–≤–µ—Å</b> (–∫–≥):\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 75.5",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(HealthMetricsStates.waiting_for_weight)
    await state.update_data(quick_input='weight')
    await callback.answer()


@router.callback_query(F.data == "health:input_sleep")
async def start_sleep_input(callback: CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ —Ç–æ–ª—å–∫–æ —Å–Ω–∞"""
    await callback.message.answer(
        "üò¥ –í–≤–µ–¥–∏—Ç–µ <b>–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞</b> (—á–∞—Å—ã):\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 7.5 –∏–ª–∏ 8",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(HealthMetricsStates.waiting_for_sleep_duration)
    await state.update_data(quick_input='sleep')
    await callback.answer()


# ============== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–µ—Ç—Ä–∏–∫ ==============

@router.message(HealthMetricsStates.waiting_for_pulse)
async def process_pulse(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—É–ª—å—Å–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=ReplyKeyboardRemove()
        )
        return

    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(pulse=None)
        await ask_weight(message, state)
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    try:
        pulse = int(message.text)
        if not (30 <= pulse <= 200):
            await message.answer("‚ùå –ü—É–ª—å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 30-200 —É–¥/–º–∏–Ω")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return

    await state.update_data(pulse=pulse)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞
    data = await state.get_data()
    if data.get('quick_input') == 'pulse':
        # –ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø—É–ª—å—Å
        await save_and_finish(message, state, morning_pulse=pulse)
    else:
        # –ü–æ–ª–Ω—ã–π –≤–≤–æ–¥ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–µ—Å—É
        await ask_weight(message, state)


async def ask_weight(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –≤–µ—Å–∞"""
    await message.answer(
        "‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–≤–µ—Å</b> (–∫–≥):\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 75.5",
        reply_markup=get_skip_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(HealthMetricsStates.waiting_for_weight)


@router.message(HealthMetricsStates.waiting_for_weight)
async def process_weight(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–µ—Å–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=ReplyKeyboardRemove()
        )
        return

    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(weight=None)
        data = await state.get_data()
        if data.get('quick_input'):
            await save_and_finish(message, state)
        else:
            await ask_sleep_duration(message, state)
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    try:
        weight = float(message.text.replace(',', '.'))
        if not (30 <= weight <= 300):
            await message.answer("‚ùå –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 30-300 –∫–≥")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return

    await state.update_data(weight=weight)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞
    data = await state.get_data()
    if data.get('quick_input') == 'weight':
        await save_and_finish(message, state, weight=weight)
    else:
        await ask_sleep_duration(message, state)


async def ask_sleep_duration(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–Ω–∞"""
    await message.answer(
        "üò¥ –í–≤–µ–¥–∏—Ç–µ <b>–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞</b>:\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ 7:30 (7 —á–∞—Å–æ–≤ 30 –º–∏–Ω—É—Ç)\n"
        "‚Ä¢ 8:00 (8 —á–∞—Å–æ–≤)\n"
        "‚Ä¢ 7.5 (7.5 —á–∞—Å–æ–≤)\n"
        "‚Ä¢ 8 (8 —á–∞—Å–æ–≤)",
        reply_markup=get_skip_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(HealthMetricsStates.waiting_for_sleep_duration)


@router.message(HealthMetricsStates.waiting_for_sleep_duration)
async def process_sleep_duration(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–Ω–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=ReplyKeyboardRemove()
        )
        return

    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(sleep_duration=None)
        data = await state.get_data()
        if data.get('quick_input'):
            await save_and_finish(message, state)
        else:
            await ask_sleep_quality(message, state)
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥
    try:
        text = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú
        if ':' in text:
            parts = text.split(':')
            if len(parts) != 2:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7:30)")
                return

            hours = int(parts[0])
            minutes = int(parts[1])

            if not (0 <= hours <= 20):
                await message.answer("‚ùå –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-20")
                return

            if not (0 <= minutes < 60):
                await message.answer("‚ùå –ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-59")
                return

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤
            sleep_duration = hours + (minutes / 60.0)
        else:
            # –û–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
            sleep_duration = float(text.replace(',', '.'))

        if not (1 <= sleep_duration <= 20):
            await message.answer("‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1-20 —á–∞—Å–æ–≤")
            return

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä—ã: 7:30 –∏–ª–∏ 7.5 –∏–ª–∏ 8")
        return

    await state.update_data(sleep_duration=sleep_duration)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞
    data = await state.get_data()
    if data.get('quick_input') == 'sleep':
        # –ü–æ—Å–ª–µ —Å–Ω–∞ –≤ –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        await ask_sleep_quality(message, state)
    else:
        await ask_sleep_quality(message, state)


async def ask_sleep_quality(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞"""
    await message.answer(
        "üò¥ –û—Ü–µ–Ω–∏—Ç–µ <b>–∫–∞—á–µ—Å—Ç–≤–æ –≤–∞—à–µ–≥–æ —Å–Ω–∞</b>:\n\n"
        "1 - –û—á–µ–Ω—å –ø–ª–æ—Ö–æ\n"
        "5 - –û—Ç–ª–∏—á–Ω–æ",
        reply_markup=get_sleep_quality_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(HealthMetricsStates.waiting_for_sleep_quality)


@router.callback_query(F.data.startswith("sleep_quality:"))
async def process_sleep_quality(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞"""
    quality_str = callback.data.split(":")[1]

    if quality_str == "skip":
        await state.update_data(sleep_quality=None)
    else:
        quality = int(quality_str)
        await state.update_data(sleep_quality=quality)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await save_and_finish(callback.message, state)
    await callback.answer()


async def save_and_finish(message: Message, state: FSMContext, **extra_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"""
    data = await state.get_data()
    data.update(extra_data)

    user_id = message.from_user.id if hasattr(message, 'from_user') else message.chat.id
    today = date.today()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    success = await save_health_metrics(
        user_id=user_id,
        metric_date=today,
        morning_pulse=data.get('pulse'),
        weight=data.get('weight'),
        sleep_duration=data.get('sleep_duration'),
        sleep_quality=data.get('sleep_quality')
    )

    if success:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        saved_items = []
        if data.get('pulse'):
            saved_items.append(f"üíó –ü—É–ª—å—Å: {data['pulse']} —É–¥/–º–∏–Ω")
        if data.get('weight'):
            saved_items.append(f"‚öñÔ∏è –í–µ—Å: {data['weight']} –∫–≥")
        if data.get('sleep_duration'):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞
            duration = data['sleep_duration']
            hours = int(duration)
            minutes = int((duration - hours) * 60)
            if minutes > 0:
                saved_items.append(f"üò¥ –°–æ–Ω: {hours} —á {minutes} –º–∏–Ω")
            else:
                saved_items.append(f"üò¥ –°–æ–Ω: {hours} —á")
        if data.get('sleep_quality'):
            saved_items.append(f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {data['sleep_quality']}/5")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        filled = await check_today_metrics_filled(user_id)
        status_text = "\n\nüìã <b>–°—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
        status_text += f"{'‚úÖ' if filled['morning_pulse'] else '‚ùå'} –£—Ç—Ä–µ–Ω–Ω–∏–π –ø—É–ª—å—Å\n"
        status_text += f"{'‚úÖ' if filled['weight'] else '‚ùå'} –í–µ—Å\n"
        status_text += f"{'‚úÖ' if filled['sleep_duration'] else '‚ùå'} –°–æ–Ω"

        await message.answer(
            "‚úÖ <b>–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n\n" +
            "\n".join(saved_items) + status_text,
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="HTML"
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –∑–¥–æ—Ä–æ–≤—å—è
        await message.answer(
            "‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ—Ç—Ä–∏–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_health_menu_keyboard(),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove()
        )

    await state.clear()


# ============== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ==============

@router.callback_query(F.data == "health:statistics")
async def show_statistics_periods(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await callback.message.edit_text(
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=get_stats_period_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("health_stats:"))
async def show_statistics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    days = int(callback.data.split(":")[1])
    user_id = callback.from_user.id

    await callback.message.edit_text(
        "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...",
        reply_markup=None
    )

    stats = await get_health_statistics(user_id, days)

    if not stats:
        await callback.message.edit_text(
            f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π",
            reply_markup=get_stats_period_keyboard()
        )
        await callback.answer()
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    msg = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {days} –¥–Ω–µ–π</b>\n\n"

    # –ü—É–ª—å—Å
    if stats['pulse']['avg']:
        msg += f"üíó <b>–£—Ç—Ä–µ–Ω–Ω–∏–π –ø—É–ª—å—Å:</b>\n"
        msg += f"   –°—Ä–µ–¥–Ω–µ–µ: {stats['pulse']['avg']:.1f} —É–¥/–º–∏–Ω\n"
        msg += f"   –î–∏–∞–ø–∞–∑–æ–Ω: {stats['pulse']['min']} - {stats['pulse']['max']}\n"
        trend = stats['pulse']['trend']
        trend_emoji = "üìà" if trend == "increasing" else "üìâ" if trend == "decreasing" else "‚û°Ô∏è"
        msg += f"   –¢—Ä–µ–Ω–¥: {trend_emoji}\n\n"

    # –í–µ—Å
    if stats['weight']['current']:
        msg += f"‚öñÔ∏è <b>–í–µ—Å:</b>\n"
        msg += f"   –¢–µ–∫—É—â–∏–π: {stats['weight']['current']:.1f} –∫–≥\n"
        if stats['weight']['change']:
            change = stats['weight']['change']
            change_emoji = "üìà" if change > 0 else "üìâ"
            msg += f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_emoji} {change:+.1f} –∫–≥\n"
        trend = stats['weight']['trend']
        trend_emoji = "üìà" if trend == "increasing" else "üìâ" if trend == "decreasing" else "‚û°Ô∏è"
        msg += f"   –¢—Ä–µ–Ω–¥: {trend_emoji}\n\n"

    # –°–æ–Ω
    if stats['sleep']['avg']:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ä–µ–¥–Ω—é—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        avg_hours = int(stats['sleep']['avg'])
        avg_minutes = int((stats['sleep']['avg'] - avg_hours) * 60)
        avg_text = f"{avg_hours} —á {avg_minutes} –º–∏–Ω" if avg_minutes > 0 else f"{avg_hours} —á"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º—É–º
        min_hours = int(stats['sleep']['min'])
        min_minutes = int((stats['sleep']['min'] - min_hours) * 60)
        min_text = f"{min_hours}:{min_minutes:02d}" if min_minutes > 0 else f"{min_hours}:00"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º—É–º
        max_hours = int(stats['sleep']['max'])
        max_minutes = int((stats['sleep']['max'] - max_hours) * 60)
        max_text = f"{max_hours}:{max_minutes:02d}" if max_minutes > 0 else f"{max_hours}:00"

        msg += f"üò¥ <b>–°–æ–Ω:</b>\n"
        msg += f"   –°—Ä–µ–¥–Ω–µ–µ: {avg_text}\n"
        msg += f"   –î–∏–∞–ø–∞–∑–æ–Ω: {min_text} - {max_text}\n"

        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞
        avg_sleep = stats['sleep']['avg']
        if 7 <= avg_sleep <= 9:
            msg += f"   –û—Ü–µ–Ω–∫–∞: ‚úÖ –í –Ω–æ—Ä–º–µ\n"
        elif avg_sleep < 7:
            msg += f"   –û—Ü–µ–Ω–∫–∞: ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ\n"
        else:
            msg += f"   –û—Ü–µ–Ω–∫–∞: ‚ö†Ô∏è –ò–∑–±—ã—Ç–æ—á–Ω–æ\n"

    await callback.message.edit_text(
        msg,
        reply_markup=get_stats_period_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


# ============== –ì—Ä–∞—Ñ–∏–∫–∏ ==============

@router.callback_query(F.data == "health:graphs")
async def show_graphs_periods(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    await callback.message.edit_text(
        "üìà <b>–ì—Ä–∞—Ñ–∏–∫–∏ –º–µ—Ç—Ä–∏–∫</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=get_graphs_period_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("health_graphs:"))
async def show_graphs(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    days = int(callback.data.split(":")[1])
    user_id = callback.from_user.id

    await callback.answer("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤...", show_alert=True)

    metrics = await get_latest_health_metrics(user_id, days)

    if not metrics:
        await callback.message.answer(
            f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π"
        )
        return

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        graph_buffer = await generate_health_graphs(metrics, days)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
        photo = BufferedInputFile(graph_buffer.read(), filename=f"health_graphs_{days}d.png")
        await callback.message.answer_photo(
            photo=photo,
            caption=f"üìà –ì—Ä–∞—Ñ–∏–∫–∏ –º–µ—Ç—Ä–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞ {days} –¥–Ω–µ–π"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤"
        )


# ============== –ê–Ω–∞–ª–∏–∑ —Å–Ω–∞ ==============

@router.callback_query(F.data == "health:sleep_analysis")
async def show_sleep_analysis(callback: CallbackQuery):
    """–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–Ω–∞"""
    user_id = callback.from_user.id

    await callback.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...", show_alert=True)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 30 –¥–Ω–µ–π
    metrics = await get_latest_health_metrics(user_id, 30)

    if not metrics or len(metrics) < 3:
        await callback.message.answer(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
            "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 –¥–Ω—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–Ω–µ."
        )
        return

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        analyzer = SleepAnalyzer(metrics)
        analysis = analyzer.get_full_analysis()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = format_sleep_analysis_message(analysis)

        await callback.message.answer(
            message_text,
            parse_mode="HTML"
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å–Ω–∞
        graph_buffer = await generate_sleep_quality_graph(metrics, 30)
        photo = BufferedInputFile(graph_buffer.read(), filename="sleep_analysis.png")
        await callback.message.answer_photo(
            photo=photo,
            caption="üìä –ì—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–∞"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–Ω–∞: {e}")
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        )


# ============== –û—Ç–º–µ–Ω–∞ ==============

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", StateFilter("*"))
async def cancel_handler(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
