"""
Тест для нормализации формата времени
Проверка 100 различных значений
"""
from utils.time_formatter import normalize_time, validate_time_format, parse_time_to_seconds, seconds_to_time_str


def test_time_normalization():
    """Тест нормализации времени с 100 тестовыми случаями"""

    # Тестовые данные: (входное значение, ожидаемый результат)
    test_cases = [
        # Формат HH:MM:SS с ведущими нулями в часах
        ("00:40:30", "40:30"),
        ("00:45:00", "45:00"),
        ("00:05:30", "5:30"),
        ("00:00:45", "0:45"),
        ("00:59:59", "59:59"),
        ("00:10:10", "10:10"),
        ("00:25:45", "25:45"),
        ("00:30:00", "30:00"),
        ("00:01:23", "1:23"),
        ("00:12:34", "12:34"),

        # Формат HH:MM:SS с часами от 01 до 09
        ("01:23:45", "1:23:45"),
        ("02:30:15", "2:30:15"),
        ("03:45:30", "3:45:30"),
        ("04:15:00", "4:15:00"),
        ("05:00:00", "5:00:00"),
        ("06:30:45", "6:30:45"),
        ("07:15:20", "7:15:20"),
        ("08:45:10", "8:45:10"),
        ("09:59:59", "9:59:59"),
        ("01:00:00", "1:00:00"),

        # Формат HH:MM:SS с часами >= 10
        ("10:15:30", "10:15:30"),
        ("11:23:45", "11:23:45"),
        ("12:00:00", "12:00:00"),
        ("15:30:45", "15:30:45"),
        ("20:15:00", "20:15:00"),
        ("23:59:59", "23:59:59"),
        ("10:00:00", "10:00:00"),
        ("14:25:30", "14:25:30"),
        ("18:45:15", "18:45:15"),
        ("22:10:20", "22:10:20"),

        # Формат MM:SS (без изменений)
        ("40:30", "40:30"),
        ("45:00", "45:00"),
        ("05:30", "05:30"),
        ("59:59", "59:59"),
        ("10:10", "10:10"),
        ("25:45", "25:45"),
        ("30:00", "30:00"),
        ("01:23", "01:23"),
        ("12:34", "12:34"),
        ("99:59", "99:59"),

        # Экстремальные случаи для марафона/ультрамарафона
        ("02:30:00", "2:30:00"),
        ("03:15:45", "3:15:45"),
        ("04:00:00", "4:00:00"),
        ("05:30:00", "5:30:00"),
        ("10:00:00", "10:00:00"),
        ("12:30:15", "12:30:15"),
        ("24:00:00", "24:00:00"),
        ("30:15:30", "30:15:30"),
        ("48:00:00", "48:00:00"),
        ("100:30:45", "100:30:45"),

        # Различные значения минут и секунд
        ("01:01:01", "1:01:01"),
        ("02:02:02", "2:02:02"),
        ("03:33:33", "3:33:33"),
        ("04:44:44", "4:44:44"),
        ("05:55:55", "5:55:55"),
        ("00:11:11", "11:11"),
        ("00:22:22", "22:22"),
        ("00:33:33", "33:33"),
        ("00:44:44", "44:44"),
        ("00:55:55", "55:55"),

        # Короткие времена (спринт)
        ("00:00:10", "0:10"),
        ("00:00:30", "0:30"),
        ("00:01:00", "1:00"),
        ("00:02:30", "2:30"),
        ("00:05:00", "5:00"),
        ("00:10:00", "10:00"),
        ("00:15:00", "15:00"),
        ("00:20:00", "20:00"),
        ("00:25:00", "25:00"),
        ("00:30:00", "30:00"),

        # Типичные времена для 5 км
        ("00:15:30", "15:30"),
        ("00:18:45", "18:45"),
        ("00:20:00", "20:00"),
        ("00:22:30", "22:30"),
        ("00:25:15", "25:15"),
        ("00:28:00", "28:00"),
        ("00:30:45", "30:45"),
        ("00:35:00", "35:00"),
        ("00:40:00", "40:00"),
        ("00:45:00", "45:00"),

        # Типичные времена для 10 км
        ("00:30:15", "30:15"),
        ("00:35:30", "35:30"),
        ("00:40:00", "40:00"),
        ("00:45:30", "45:30"),
        ("00:50:00", "50:00"),
        ("00:55:15", "55:15"),
        ("01:00:00", "1:00:00"),
        ("01:05:30", "1:05:30"),
        ("01:10:00", "1:10:00"),
        ("01:20:00", "1:20:00"),

        # Типичные времена для полумарафона
        ("01:15:30", "1:15:30"),
        ("01:30:00", "1:30:00"),
        ("01:45:15", "1:45:15"),
        ("02:00:00", "2:00:00"),
        ("02:15:45", "2:15:45"),
        ("02:30:00", "2:30:00"),
        ("02:45:30", "2:45:30"),
        ("03:00:00", "3:00:00"),
    ]

    print("=" * 70)
    print("ТЕСТ НОРМАЛИЗАЦИИ ФОРМАТА ВРЕМЕНИ")
    print("=" * 70)
    print()

    passed = 0
    failed = 0
    errors = []

    for input_time, expected_output in test_cases:
        try:
            result = normalize_time(input_time)
            if result == expected_output:
                passed += 1
            else:
                failed += 1
                errors.append({
                    'input': input_time,
                    'expected': expected_output,
                    'got': result
                })
        except Exception as e:
            failed += 1
            errors.append({
                'input': input_time,
                'expected': expected_output,
                'error': str(e)
            })

    # Выводим результаты
    print(f"Всего тестов: {len(test_cases)}")
    print(f"[OK] Пройдено: {passed}")
    print(f"[FAIL] Провалено: {failed}")
    print()

    if errors:
        print("ОШИБКИ:")
        print("-" * 70)
        for i, error in enumerate(errors, 1):
            print(f"{i}. Входное значение: {error['input']}")
            print(f"   Ожидалось: {error['expected']}")
            if 'got' in error:
                print(f"   Получено: {error['got']}")
            if 'error' in error:
                print(f"   Ошибка: {error['error']}")
            print()
    else:
        print("[SUCCESS] ВСЕ ТЕСТЫ ПРОЙДЕНЫ УСПЕШНО!")

    print("=" * 70)
    print()

    # Дополнительная проверка валидации
    print("ПРОВЕРКА ВАЛИДАЦИИ ФОРМАТА:")
    print("-" * 70)

    validation_tests = [
        ("01:23:45", True),
        ("40:30", True),
        ("00:00:00", True),
        ("1:23:45", True),
        ("123:45", True),
        ("abc:de:fg", False),
        ("", False),
        ("12:345", False),
        ("1:2:3:4", False),
    ]

    validation_passed = 0
    validation_failed = 0

    for time_str, should_be_valid in validation_tests:
        is_valid = validate_time_format(time_str)
        if is_valid == should_be_valid:
            validation_passed += 1
            status = "[OK]"
        else:
            validation_failed += 1
            status = "[FAIL]"
        print(f"{status} '{time_str}' -> {is_valid} (ожидалось: {should_be_valid})")

    print()
    print(f"Валидация: {validation_passed}/{len(validation_tests)} пройдено")
    print()

    # Проверка преобразования в секунды и обратно
    print("ПРОВЕРКА ПРЕОБРАЗОВАНИЯ В СЕКУНДЫ И ОБРАТНО:")
    print("-" * 70)

    roundtrip_tests = [
        "1:23:45",
        "40:30",
        "2:30:00",
        "59:59",
    ]

    for time_str in roundtrip_tests:
        seconds = parse_time_to_seconds(time_str)
        back_to_time = seconds_to_time_str(seconds) if seconds else None
        normalized_original = normalize_time(time_str)

        match = "[OK]" if back_to_time == normalized_original else "[FAIL]"
        print(f"{match} {time_str} -> {seconds} сек -> {back_to_time} (ожидалось: {normalized_original})")

    print()
    print("=" * 70)

    return passed, failed


if __name__ == "__main__":
    passed, failed = test_time_normalization()
    exit(0 if failed == 0 else 1)
